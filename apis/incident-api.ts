/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AnnotationDto } from '../models';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { IncidentDto } from '../models';
/**
 * IncidentApi - axios parameter creator
 * @export
 */
export const IncidentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Clears the annotation of an incident with given id.
         * @summary Clear Incident Annotation
         * @param {string} id The id of the incident to clear the annotation at.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearIncidentAnnotation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling clearIncidentAnnotation.');
            }
            const localVarPath = `/incident/{id}/annotation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an incident by ID.
         * @summary Get Incident
         * @param {string} id The id of the incident to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncident: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getIncident.');
            }
            const localVarPath = `/incident/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.18/reference/rest/incident/get-query-count/) method.
         * @summary Get List
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [incidentTimestampBefore] Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [incidentTimestampAfter] Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidents: async (incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/incident`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (incidentId !== undefined) {
                localVarQueryParameter['incidentId'] = incidentId;
            }

            if (incidentType !== undefined) {
                localVarQueryParameter['incidentType'] = incidentType;
            }

            if (incidentMessage !== undefined) {
                localVarQueryParameter['incidentMessage'] = incidentMessage;
            }

            if (incidentMessageLike !== undefined) {
                localVarQueryParameter['incidentMessageLike'] = incidentMessageLike;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (incidentTimestampBefore !== undefined) {
                localVarQueryParameter['incidentTimestampBefore'] = (incidentTimestampBefore as any instanceof Date) ?
                    (incidentTimestampBefore as any).toISOString() :
                    incidentTimestampBefore;
            }

            if (incidentTimestampAfter !== undefined) {
                localVarQueryParameter['incidentTimestampAfter'] = (incidentTimestampAfter as any instanceof Date) ?
                    (incidentTimestampAfter as any).toISOString() :
                    incidentTimestampAfter;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (failedActivityId !== undefined) {
                localVarQueryParameter['failedActivityId'] = failedActivityId;
            }

            if (causeIncidentId !== undefined) {
                localVarQueryParameter['causeIncidentId'] = causeIncidentId;
            }

            if (rootCauseIncidentId !== undefined) {
                localVarQueryParameter['rootCauseIncidentId'] = rootCauseIncidentId;
            }

            if (configuration !== undefined) {
                localVarQueryParameter['configuration'] = configuration;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (jobDefinitionIdIn !== undefined) {
                localVarQueryParameter['jobDefinitionIdIn'] = jobDefinitionIdIn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.18/reference/rest/incident/get-query/) method.
         * @summary Get List Count
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [incidentTimestampBefore] Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [incidentTimestampAfter] Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidentsCount: async (incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/incident/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (incidentId !== undefined) {
                localVarQueryParameter['incidentId'] = incidentId;
            }

            if (incidentType !== undefined) {
                localVarQueryParameter['incidentType'] = incidentType;
            }

            if (incidentMessage !== undefined) {
                localVarQueryParameter['incidentMessage'] = incidentMessage;
            }

            if (incidentMessageLike !== undefined) {
                localVarQueryParameter['incidentMessageLike'] = incidentMessageLike;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (incidentTimestampBefore !== undefined) {
                localVarQueryParameter['incidentTimestampBefore'] = (incidentTimestampBefore as any instanceof Date) ?
                    (incidentTimestampBefore as any).toISOString() :
                    incidentTimestampBefore;
            }

            if (incidentTimestampAfter !== undefined) {
                localVarQueryParameter['incidentTimestampAfter'] = (incidentTimestampAfter as any instanceof Date) ?
                    (incidentTimestampAfter as any).toISOString() :
                    incidentTimestampAfter;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (failedActivityId !== undefined) {
                localVarQueryParameter['failedActivityId'] = failedActivityId;
            }

            if (causeIncidentId !== undefined) {
                localVarQueryParameter['causeIncidentId'] = causeIncidentId;
            }

            if (rootCauseIncidentId !== undefined) {
                localVarQueryParameter['rootCauseIncidentId'] = rootCauseIncidentId;
            }

            if (configuration !== undefined) {
                localVarQueryParameter['configuration'] = configuration;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (jobDefinitionIdIn !== undefined) {
                localVarQueryParameter['jobDefinitionIdIn'] = jobDefinitionIdIn;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolves an incident with given id.
         * @summary Resolve Incident
         * @param {string} id The id of the incident to be resolved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveIncident: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling resolveIncident.');
            }
            const localVarPath = `/incident/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the annotation of an incident with given id.
         * @summary Set Incident Annotation
         * @param {string} id The id of the incident to clear the annotation at.
         * @param {AnnotationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIncidentAnnotation: async (id: string, body?: AnnotationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setIncidentAnnotation.');
            }
            const localVarPath = `/incident/{id}/annotation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IncidentApi - functional programming interface
 * @export
 */
export const IncidentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Clears the annotation of an incident with given id.
         * @summary Clear Incident Annotation
         * @param {string} id The id of the incident to clear the annotation at.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearIncidentAnnotation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await IncidentApiAxiosParamCreator(configuration).clearIncidentAnnotation(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves an incident by ID.
         * @summary Get Incident
         * @param {string} id The id of the incident to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncident(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IncidentDto>>> {
            const localVarAxiosArgs = await IncidentApiAxiosParamCreator(configuration).getIncident(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.18/reference/rest/incident/get-query-count/) method.
         * @summary Get List
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [incidentTimestampBefore] Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [incidentTimestampAfter] Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<IncidentDto>>>> {
            const localVarAxiosArgs = await IncidentApiAxiosParamCreator(configuration).getIncidents(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn, sortBy, sortOrder, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.18/reference/rest/incident/get-query/) method.
         * @summary Get List Count
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [incidentTimestampBefore] Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [incidentTimestampAfter] Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await IncidentApiAxiosParamCreator(configuration).getIncidentsCount(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Resolves an incident with given id.
         * @summary Resolve Incident
         * @param {string} id The id of the incident to be resolved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveIncident(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await IncidentApiAxiosParamCreator(configuration).resolveIncident(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the annotation of an incident with given id.
         * @summary Set Incident Annotation
         * @param {string} id The id of the incident to clear the annotation at.
         * @param {AnnotationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setIncidentAnnotation(id: string, body?: AnnotationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await IncidentApiAxiosParamCreator(configuration).setIncidentAnnotation(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IncidentApi - factory interface
 * @export
 */
export const IncidentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Clears the annotation of an incident with given id.
         * @summary Clear Incident Annotation
         * @param {string} id The id of the incident to clear the annotation at.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearIncidentAnnotation(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return IncidentApiFp(configuration).clearIncidentAnnotation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an incident by ID.
         * @summary Get Incident
         * @param {string} id The id of the incident to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncident(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<IncidentDto>> {
            return IncidentApiFp(configuration).getIncident(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.18/reference/rest/incident/get-query-count/) method.
         * @summary Get List
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [incidentTimestampBefore] Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [incidentTimestampAfter] Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<IncidentDto>>> {
            return IncidentApiFp(configuration).getIncidents(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.18/reference/rest/incident/get-query/) method.
         * @summary Get List Count
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [incidentTimestampBefore] Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [incidentTimestampAfter] Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return IncidentApiFp(configuration).getIncidentsCount(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Resolves an incident with given id.
         * @summary Resolve Incident
         * @param {string} id The id of the incident to be resolved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveIncident(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return IncidentApiFp(configuration).resolveIncident(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the annotation of an incident with given id.
         * @summary Set Incident Annotation
         * @param {string} id The id of the incident to clear the annotation at.
         * @param {AnnotationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setIncidentAnnotation(id: string, body?: AnnotationDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return IncidentApiFp(configuration).setIncidentAnnotation(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IncidentApi - object-oriented interface
 * @export
 * @class IncidentApi
 * @extends {BaseAPI}
 */
export class IncidentApi extends BaseAPI {
    /**
     * Clears the annotation of an incident with given id.
     * @summary Clear Incident Annotation
     * @param {string} id The id of the incident to clear the annotation at.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentApi
     */
    public async clearIncidentAnnotation(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return IncidentApiFp(this.configuration).clearIncidentAnnotation(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves an incident by ID.
     * @summary Get Incident
     * @param {string} id The id of the incident to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentApi
     */
    public async getIncident(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<IncidentDto>> {
        return IncidentApiFp(this.configuration).getIncident(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.18/reference/rest/incident/get-query-count/) method.
     * @summary Get List
     * @param {string} [incidentId] Restricts to incidents that have the given id.
     * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
     * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
     * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
     * @param {string} [processDefinitionKeyIn] Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
     * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
     * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
     * @param {Date} [incidentTimestampBefore] Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [incidentTimestampAfter] Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
     * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
     * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
     * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
     * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentApi
     */
    public async getIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<IncidentDto>>> {
        return IncidentApiFp(this.configuration).getIncidents(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.18/reference/rest/incident/get-query/) method.
     * @summary Get List Count
     * @param {string} [incidentId] Restricts to incidents that have the given id.
     * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
     * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
     * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
     * @param {string} [processDefinitionKeyIn] Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
     * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
     * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
     * @param {Date} [incidentTimestampBefore] Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [incidentTimestampAfter] Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
     * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
     * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
     * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
     * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentApi
     */
    public async getIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, incidentTimestampBefore?: Date, incidentTimestampAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, tenantIdIn?: string, jobDefinitionIdIn?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return IncidentApiFp(this.configuration).getIncidentsCount(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Resolves an incident with given id.
     * @summary Resolve Incident
     * @param {string} id The id of the incident to be resolved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentApi
     */
    public async resolveIncident(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return IncidentApiFp(this.configuration).resolveIncident(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the annotation of an incident with given id.
     * @summary Set Incident Annotation
     * @param {string} id The id of the incident to clear the annotation at.
     * @param {AnnotationDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentApi
     */
    public async setIncidentAnnotation(id: string, body?: AnnotationDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return IncidentApiFp(this.configuration).setIncidentAnnotation(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}

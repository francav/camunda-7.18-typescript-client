/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoricActivityInstanceDto } from '../models';
import { HistoricActivityInstanceQueryDto } from '../models';
/**
 * HistoricActivityInstanceApi - axios parameter creator
 * @export
 */
export const HistoricActivityInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.
         * @summary Get
         * @param {string} id The id of the historic activity instance to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricActivityInstance: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getHistoricActivityInstance.');
            }
            const localVarPath = `/history/activity-instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [executionId] Filter by the id of the execution that executed the activity instance.
         * @param {string} [activityId] Filter by the activity id (according to BPMN 2.0 XML).
         * @param {string} [activityName] Filter by the activity name (according to BPMN 2.0 XML).
         * @param {string} [activityType] Filter by activity type.
         * @param {string} [taskAssignee] Only include activity instances that are user tasks and assigned to a given user.
         * @param {boolean} [finished] Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [unfinished] Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [canceled] Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [completeScope] Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricActivityInstances: async (sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/activity-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (activityInstanceId !== undefined) {
                localVarQueryParameter['activityInstanceId'] = activityInstanceId;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (activityName !== undefined) {
                localVarQueryParameter['activityName'] = activityName;
            }

            if (activityType !== undefined) {
                localVarQueryParameter['activityType'] = activityType;
            }

            if (taskAssignee !== undefined) {
                localVarQueryParameter['taskAssignee'] = taskAssignee;
            }

            if (finished !== undefined) {
                localVarQueryParameter['finished'] = finished;
            }

            if (unfinished !== undefined) {
                localVarQueryParameter['unfinished'] = unfinished;
            }

            if (canceled !== undefined) {
                localVarQueryParameter['canceled'] = canceled;
            }

            if (completeScope !== undefined) {
                localVarQueryParameter['completeScope'] = completeScope;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            if (finishedBefore !== undefined) {
                localVarQueryParameter['finishedBefore'] = (finishedBefore as any instanceof Date) ?
                    (finishedBefore as any).toISOString() :
                    finishedBefore;
            }

            if (finishedAfter !== undefined) {
                localVarQueryParameter['finishedAfter'] = (finishedAfter as any instanceof Date) ?
                    (finishedAfter as any).toISOString() :
                    finishedAfter;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
         * @summary Get List Count
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [executionId] Filter by the id of the execution that executed the activity instance.
         * @param {string} [activityId] Filter by the activity id (according to BPMN 2.0 XML).
         * @param {string} [activityName] Filter by the activity name (according to BPMN 2.0 XML).
         * @param {string} [activityType] Filter by activity type.
         * @param {string} [taskAssignee] Only include activity instances that are user tasks and assigned to a given user.
         * @param {boolean} [finished] Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [unfinished] Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [canceled] Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [completeScope] Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricActivityInstancesCount: async (activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/activity-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (activityInstanceId !== undefined) {
                localVarQueryParameter['activityInstanceId'] = activityInstanceId;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (activityName !== undefined) {
                localVarQueryParameter['activityName'] = activityName;
            }

            if (activityType !== undefined) {
                localVarQueryParameter['activityType'] = activityType;
            }

            if (taskAssignee !== undefined) {
                localVarQueryParameter['taskAssignee'] = taskAssignee;
            }

            if (finished !== undefined) {
                localVarQueryParameter['finished'] = finished;
            }

            if (unfinished !== undefined) {
                localVarQueryParameter['unfinished'] = unfinished;
            }

            if (canceled !== undefined) {
                localVarQueryParameter['canceled'] = canceled;
            }

            if (completeScope !== undefined) {
                localVarQueryParameter['completeScope'] = completeScope;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            if (finishedBefore !== undefined) {
                localVarQueryParameter['finishedBefore'] = (finishedBefore as any instanceof Date) ?
                    (finishedBefore as any).toISOString() :
                    finishedBefore;
            }

            if (finishedAfter !== undefined) {
                localVarQueryParameter['finishedAfter'] = (finishedAfter as any instanceof Date) ?
                    (finishedAfter as any).toISOString() :
                    finishedAfter;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
         * @summary Get List (POST)
         * @param {HistoricActivityInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricActivityInstances: async (body?: HistoricActivityInstanceQueryDto, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/activity-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic activity instances that fulfill the given parameters.
         * @summary Get List Count (POST)
         * @param {HistoricActivityInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricActivityInstancesCount: async (body?: HistoricActivityInstanceQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/activity-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricActivityInstanceApi - functional programming interface
 * @export
 */
export const HistoricActivityInstanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.
         * @summary Get
         * @param {string} id The id of the historic activity instance to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricActivityInstance(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HistoricActivityInstanceDto>>> {
            const localVarAxiosArgs = await HistoricActivityInstanceApiAxiosParamCreator(configuration).getHistoricActivityInstance(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [executionId] Filter by the id of the execution that executed the activity instance.
         * @param {string} [activityId] Filter by the activity id (according to BPMN 2.0 XML).
         * @param {string} [activityName] Filter by the activity name (according to BPMN 2.0 XML).
         * @param {string} [activityType] Filter by activity type.
         * @param {string} [taskAssignee] Only include activity instances that are user tasks and assigned to a given user.
         * @param {boolean} [finished] Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [unfinished] Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [canceled] Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [completeScope] Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricActivityInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricActivityInstanceDto>>>> {
            const localVarAxiosArgs = await HistoricActivityInstanceApiAxiosParamCreator(configuration).getHistoricActivityInstances(sortBy, sortOrder, firstResult, maxResults, activityInstanceId, processInstanceId, processDefinitionId, executionId, activityId, activityName, activityType, taskAssignee, finished, unfinished, canceled, completeScope, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
         * @summary Get List Count
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [executionId] Filter by the id of the execution that executed the activity instance.
         * @param {string} [activityId] Filter by the activity id (according to BPMN 2.0 XML).
         * @param {string} [activityName] Filter by the activity name (according to BPMN 2.0 XML).
         * @param {string} [activityType] Filter by activity type.
         * @param {string} [taskAssignee] Only include activity instances that are user tasks and assigned to a given user.
         * @param {boolean} [finished] Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [unfinished] Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [canceled] Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [completeScope] Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricActivityInstancesCount(activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricActivityInstanceApiAxiosParamCreator(configuration).getHistoricActivityInstancesCount(activityInstanceId, processInstanceId, processDefinitionId, executionId, activityId, activityName, activityType, taskAssignee, finished, unfinished, canceled, completeScope, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
         * @summary Get List (POST)
         * @param {HistoricActivityInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricActivityInstances(body?: HistoricActivityInstanceQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricActivityInstanceDto>>>> {
            const localVarAxiosArgs = await HistoricActivityInstanceApiAxiosParamCreator(configuration).queryHistoricActivityInstances(body, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic activity instances that fulfill the given parameters.
         * @summary Get List Count (POST)
         * @param {HistoricActivityInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricActivityInstancesCount(body?: HistoricActivityInstanceQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricActivityInstanceApiAxiosParamCreator(configuration).queryHistoricActivityInstancesCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoricActivityInstanceApi - factory interface
 * @export
 */
export const HistoricActivityInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.
         * @summary Get
         * @param {string} id The id of the historic activity instance to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricActivityInstance(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HistoricActivityInstanceDto>> {
            return HistoricActivityInstanceApiFp(configuration).getHistoricActivityInstance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [executionId] Filter by the id of the execution that executed the activity instance.
         * @param {string} [activityId] Filter by the activity id (according to BPMN 2.0 XML).
         * @param {string} [activityName] Filter by the activity name (according to BPMN 2.0 XML).
         * @param {string} [activityType] Filter by activity type.
         * @param {string} [taskAssignee] Only include activity instances that are user tasks and assigned to a given user.
         * @param {boolean} [finished] Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [unfinished] Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [canceled] Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [completeScope] Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricActivityInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricActivityInstanceDto>>> {
            return HistoricActivityInstanceApiFp(configuration).getHistoricActivityInstances(sortBy, sortOrder, firstResult, maxResults, activityInstanceId, processInstanceId, processDefinitionId, executionId, activityId, activityName, activityType, taskAssignee, finished, unfinished, canceled, completeScope, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
         * @summary Get List Count
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [executionId] Filter by the id of the execution that executed the activity instance.
         * @param {string} [activityId] Filter by the activity id (according to BPMN 2.0 XML).
         * @param {string} [activityName] Filter by the activity name (according to BPMN 2.0 XML).
         * @param {string} [activityType] Filter by activity type.
         * @param {string} [taskAssignee] Only include activity instances that are user tasks and assigned to a given user.
         * @param {boolean} [finished] Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [unfinished] Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [canceled] Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {boolean} [completeScope] Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricActivityInstancesCount(activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricActivityInstanceApiFp(configuration).getHistoricActivityInstancesCount(activityInstanceId, processInstanceId, processDefinitionId, executionId, activityId, activityName, activityType, taskAssignee, finished, unfinished, canceled, completeScope, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
         * @summary Get List (POST)
         * @param {HistoricActivityInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricActivityInstances(body?: HistoricActivityInstanceQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricActivityInstanceDto>>> {
            return HistoricActivityInstanceApiFp(configuration).queryHistoricActivityInstances(body, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic activity instances that fulfill the given parameters.
         * @summary Get List Count (POST)
         * @param {HistoricActivityInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricActivityInstancesCount(body?: HistoricActivityInstanceQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricActivityInstanceApiFp(configuration).queryHistoricActivityInstancesCount(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricActivityInstanceApi - object-oriented interface
 * @export
 * @class HistoricActivityInstanceApi
 * @extends {BaseAPI}
 */
export class HistoricActivityInstanceApi extends BaseAPI {
    /**
     * Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.
     * @summary Get
     * @param {string} id The id of the historic activity instance to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricActivityInstanceApi
     */
    public async getHistoricActivityInstance(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<HistoricActivityInstanceDto>> {
        return HistoricActivityInstanceApiFp(this.configuration).getHistoricActivityInstance(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     * @summary Get List
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {string} [activityInstanceId] Filter by activity instance id.
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processDefinitionId] Filter by process definition id.
     * @param {string} [executionId] Filter by the id of the execution that executed the activity instance.
     * @param {string} [activityId] Filter by the activity id (according to BPMN 2.0 XML).
     * @param {string} [activityName] Filter by the activity name (according to BPMN 2.0 XML).
     * @param {string} [activityType] Filter by activity type.
     * @param {string} [taskAssignee] Only include activity instances that are user tasks and assigned to a given user.
     * @param {boolean} [finished] Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param {boolean} [unfinished] Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param {boolean} [canceled] Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param {boolean} [completeScope] Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricActivityInstanceApi
     */
    public async getHistoricActivityInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricActivityInstanceDto>>> {
        return HistoricActivityInstanceApiFp(this.configuration).getHistoricActivityInstances(sortBy, sortOrder, firstResult, maxResults, activityInstanceId, processInstanceId, processDefinitionId, executionId, activityId, activityName, activityType, taskAssignee, finished, unfinished, canceled, completeScope, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
     * @summary Get List Count
     * @param {string} [activityInstanceId] Filter by activity instance id.
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processDefinitionId] Filter by process definition id.
     * @param {string} [executionId] Filter by the id of the execution that executed the activity instance.
     * @param {string} [activityId] Filter by the activity id (according to BPMN 2.0 XML).
     * @param {string} [activityName] Filter by the activity name (according to BPMN 2.0 XML).
     * @param {string} [activityType] Filter by activity type.
     * @param {string} [taskAssignee] Only include activity instances that are user tasks and assigned to a given user.
     * @param {boolean} [finished] Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param {boolean} [unfinished] Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param {boolean} [canceled] Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param {boolean} [completeScope] Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricActivityInstanceApi
     */
    public async getHistoricActivityInstancesCount(activityInstanceId?: string, processInstanceId?: string, processDefinitionId?: string, executionId?: string, activityId?: string, activityName?: string, activityType?: string, taskAssignee?: string, finished?: boolean, unfinished?: boolean, canceled?: boolean, completeScope?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, tenantIdIn?: string, withoutTenantId?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricActivityInstanceApiFp(this.configuration).getHistoricActivityInstancesCount(activityInstanceId, processInstanceId, processDefinitionId, executionId, activityId, activityName, activityType, taskAssignee, finished, unfinished, canceled, completeScope, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     * @summary Get List (POST)
     * @param {HistoricActivityInstanceQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricActivityInstanceApi
     */
    public async queryHistoricActivityInstances(body?: HistoricActivityInstanceQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricActivityInstanceDto>>> {
        return HistoricActivityInstanceApiFp(this.configuration).queryHistoricActivityInstances(body, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic activity instances that fulfill the given parameters.
     * @summary Get List Count (POST)
     * @param {HistoricActivityInstanceQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricActivityInstanceApi
     */
    public async queryHistoricActivityInstancesCount(body?: HistoricActivityInstanceQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricActivityInstanceApiFp(this.configuration).queryHistoricActivityInstancesCount(body, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { ResourceOptionsDto } from '../models';
import { TenantDto } from '../models';
/**
 * TenantApi - axios parameter creator
 * @export
 */
export const TenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant Group Membership Resource Options
         * @param {string} id The id of the tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableTenantGroupMembersOperations: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling availableTenantGroupMembersOperations.');
            }
            const localVarPath = `/tenant/{id}/group-members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant/{id}` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant Resource Options
         * @param {string} id The id of the tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableTenantInstanceOperations: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling availableTenantInstanceOperations.');
            }
            const localVarPath = `/tenant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/tenant` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant Resource Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableTenantResourceOperations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant User Membership Resource Options
         * @param {string} id The id of the tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableTenantUserMembersOperations: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling availableTenantUserMembersOperations.');
            }
            const localVarPath = `/tenant/{id}/user-members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a membership between a tenant and a group.
         * @summary Create Tenant Group Membership
         * @param {string} id The id of the tenant.
         * @param {string} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupMembership: async (id: string, groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createGroupMembership.');
            }
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling createGroupMembership.');
            }
            const localVarPath = `/tenant/{id}/group-members/{groupId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new tenant.
         * @summary Create Tenant
         * @param {TenantDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant: async (body?: TenantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a membership between a tenant and an user.
         * @summary Create Tenant User Membership
         * @param {string} id The id of the tenant.
         * @param {string} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserMembership: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createUserMembership.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling createUserMembership.');
            }
            const localVarPath = `/tenant/{id}/user-members/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a membership between a tenant and a group.
         * @summary Create Tenant Group Membership
         * @param {string} id The id of the tenant.
         * @param {string} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupMembership: async (id: string, groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteGroupMembership.');
            }
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling deleteGroupMembership.');
            }
            const localVarPath = `/tenant/{id}/group-members/{groupId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a tenant by id.
         * @summary Delete Tenant
         * @param {string} id The id of the tenant to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTenant.');
            }
            const localVarPath = `/tenant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a membership between a tenant and an user.
         * @summary Delete a Tenant User Membership
         * @param {string} id The id of the tenant.
         * @param {string} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserMembership: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUserMembership.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUserMembership.');
            }
            const localVarPath = `/tenant/{id}/user-members/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a tenant.
         * @summary Get Tenant
         * @param {string} id The id of the tenant to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTenant.');
            }
            const localVarPath = `/tenant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for tenants using a list of parameters and retrieves the count.
         * @summary Get Tenant Count
         * @param {string} [id] Filter by the id of the tenant.
         * @param {string} [name] Filter by the name of the tenant.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [userMember] Select only tenants where the given user is a member of.
         * @param {string} [groupMember] Select only tenants where the given group is a member of.
         * @param {boolean} [includingGroupsOfUser] Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantCount: async (id?: string, name?: string, nameLike?: string, userMember?: string, groupMember?: string, includingGroupsOfUser?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (userMember !== undefined) {
                localVarQueryParameter['userMember'] = userMember;
            }

            if (groupMember !== undefined) {
                localVarQueryParameter['groupMember'] = groupMember;
            }

            if (includingGroupsOfUser !== undefined) {
                localVarQueryParameter['includingGroupsOfUser'] = includingGroupsOfUser;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/7.18/reference/rest/tenant/get-query-count/) method.
         * @summary Get Tenants
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [id] Filter by the id of the tenant.
         * @param {string} [name] Filter by the name of the tenant.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [userMember] Select only tenants where the given user is a member of.
         * @param {string} [groupMember] Select only tenants where the given group is a member of.
         * @param {boolean} [includingGroupsOfUser] Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTenants: async (sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, id?: string, name?: string, nameLike?: string, userMember?: string, groupMember?: string, includingGroupsOfUser?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (userMember !== undefined) {
                localVarQueryParameter['userMember'] = userMember;
            }

            if (groupMember !== undefined) {
                localVarQueryParameter['groupMember'] = groupMember;
            }

            if (includingGroupsOfUser !== undefined) {
                localVarQueryParameter['includingGroupsOfUser'] = includingGroupsOfUser;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a given tenant.
         * @summary Update Tenant
         * @param {string} id The id of the tenant.
         * @param {TenantDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant: async (id: string, body?: TenantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateTenant.');
            }
            const localVarPath = `/tenant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantApi - functional programming interface
 * @export
 */
export const TenantApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant Group Membership Resource Options
         * @param {string} id The id of the tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableTenantGroupMembersOperations(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResourceOptionsDto>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).availableTenantGroupMembersOperations(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant/{id}` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant Resource Options
         * @param {string} id The id of the tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableTenantInstanceOperations(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResourceOptionsDto>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).availableTenantInstanceOperations(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The `/tenant` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant Resource Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableTenantResourceOperations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResourceOptionsDto>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).availableTenantResourceOperations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant User Membership Resource Options
         * @param {string} id The id of the tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableTenantUserMembersOperations(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResourceOptionsDto>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).availableTenantUserMembersOperations(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a membership between a tenant and a group.
         * @summary Create Tenant Group Membership
         * @param {string} id The id of the tenant.
         * @param {string} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupMembership(id: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).createGroupMembership(id, groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new tenant.
         * @summary Create Tenant
         * @param {TenantDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenant(body?: TenantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).createTenant(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a membership between a tenant and an user.
         * @summary Create Tenant User Membership
         * @param {string} id The id of the tenant.
         * @param {string} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserMembership(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).createUserMembership(id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a membership between a tenant and a group.
         * @summary Create Tenant Group Membership
         * @param {string} id The id of the tenant.
         * @param {string} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupMembership(id: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).deleteGroupMembership(id, groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a tenant by id.
         * @summary Delete Tenant
         * @param {string} id The id of the tenant to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenant(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).deleteTenant(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a membership between a tenant and an user.
         * @summary Delete a Tenant User Membership
         * @param {string} id The id of the tenant.
         * @param {string} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserMembership(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).deleteUserMembership(id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a tenant.
         * @summary Get Tenant
         * @param {string} id The id of the tenant to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenant(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TenantDto>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).getTenant(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for tenants using a list of parameters and retrieves the count.
         * @summary Get Tenant Count
         * @param {string} [id] Filter by the id of the tenant.
         * @param {string} [name] Filter by the name of the tenant.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [userMember] Select only tenants where the given user is a member of.
         * @param {string} [groupMember] Select only tenants where the given group is a member of.
         * @param {boolean} [includingGroupsOfUser] Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantCount(id?: string, name?: string, nameLike?: string, userMember?: string, groupMember?: string, includingGroupsOfUser?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).getTenantCount(id, name, nameLike, userMember, groupMember, includingGroupsOfUser, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/7.18/reference/rest/tenant/get-query-count/) method.
         * @summary Get Tenants
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [id] Filter by the id of the tenant.
         * @param {string} [name] Filter by the name of the tenant.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [userMember] Select only tenants where the given user is a member of.
         * @param {string} [groupMember] Select only tenants where the given group is a member of.
         * @param {boolean} [includingGroupsOfUser] Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryTenants(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, id?: string, name?: string, nameLike?: string, userMember?: string, groupMember?: string, includingGroupsOfUser?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TenantDto>>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).queryTenants(sortBy, sortOrder, firstResult, maxResults, id, name, nameLike, userMember, groupMember, includingGroupsOfUser, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a given tenant.
         * @summary Update Tenant
         * @param {string} id The id of the tenant.
         * @param {TenantDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenant(id: string, body?: TenantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).updateTenant(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TenantApi - factory interface
 * @export
 */
export const TenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant Group Membership Resource Options
         * @param {string} id The id of the tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableTenantGroupMembersOperations(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResourceOptionsDto>> {
            return TenantApiFp(configuration).availableTenantGroupMembersOperations(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant/{id}` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant Resource Options
         * @param {string} id The id of the tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableTenantInstanceOperations(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResourceOptionsDto>> {
            return TenantApiFp(configuration).availableTenantInstanceOperations(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/tenant` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant Resource Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableTenantResourceOperations(options?: AxiosRequestConfig): Promise<AxiosResponse<ResourceOptionsDto>> {
            return TenantApiFp(configuration).availableTenantResourceOperations(options).then((request) => request(axios, basePath));
        },
        /**
         * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Tenant User Membership Resource Options
         * @param {string} id The id of the tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableTenantUserMembersOperations(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResourceOptionsDto>> {
            return TenantApiFp(configuration).availableTenantUserMembersOperations(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a membership between a tenant and a group.
         * @summary Create Tenant Group Membership
         * @param {string} id The id of the tenant.
         * @param {string} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupMembership(id: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TenantApiFp(configuration).createGroupMembership(id, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new tenant.
         * @summary Create Tenant
         * @param {TenantDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenant(body?: TenantDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TenantApiFp(configuration).createTenant(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a membership between a tenant and an user.
         * @summary Create Tenant User Membership
         * @param {string} id The id of the tenant.
         * @param {string} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserMembership(id: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TenantApiFp(configuration).createUserMembership(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a membership between a tenant and a group.
         * @summary Create Tenant Group Membership
         * @param {string} id The id of the tenant.
         * @param {string} groupId The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupMembership(id: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TenantApiFp(configuration).deleteGroupMembership(id, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a tenant by id.
         * @summary Delete Tenant
         * @param {string} id The id of the tenant to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenant(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TenantApiFp(configuration).deleteTenant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a membership between a tenant and an user.
         * @summary Delete a Tenant User Membership
         * @param {string} id The id of the tenant.
         * @param {string} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserMembership(id: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TenantApiFp(configuration).deleteUserMembership(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a tenant.
         * @summary Get Tenant
         * @param {string} id The id of the tenant to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenant(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TenantDto>> {
            return TenantApiFp(configuration).getTenant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Query for tenants using a list of parameters and retrieves the count.
         * @summary Get Tenant Count
         * @param {string} [id] Filter by the id of the tenant.
         * @param {string} [name] Filter by the name of the tenant.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [userMember] Select only tenants where the given user is a member of.
         * @param {string} [groupMember] Select only tenants where the given group is a member of.
         * @param {boolean} [includingGroupsOfUser] Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantCount(id?: string, name?: string, nameLike?: string, userMember?: string, groupMember?: string, includingGroupsOfUser?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return TenantApiFp(configuration).getTenantCount(id, name, nameLike, userMember, groupMember, includingGroupsOfUser, options).then((request) => request(axios, basePath));
        },
        /**
         * Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/7.18/reference/rest/tenant/get-query-count/) method.
         * @summary Get Tenants
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [id] Filter by the id of the tenant.
         * @param {string} [name] Filter by the name of the tenant.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [userMember] Select only tenants where the given user is a member of.
         * @param {string} [groupMember] Select only tenants where the given group is a member of.
         * @param {boolean} [includingGroupsOfUser] Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryTenants(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, id?: string, name?: string, nameLike?: string, userMember?: string, groupMember?: string, includingGroupsOfUser?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TenantDto>>> {
            return TenantApiFp(configuration).queryTenants(sortBy, sortOrder, firstResult, maxResults, id, name, nameLike, userMember, groupMember, includingGroupsOfUser, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a given tenant.
         * @summary Update Tenant
         * @param {string} id The id of the tenant.
         * @param {TenantDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenant(id: string, body?: TenantDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TenantApiFp(configuration).updateTenant(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export class TenantApi extends BaseAPI {
    /**
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @summary Tenant Group Membership Resource Options
     * @param {string} id The id of the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async availableTenantGroupMembersOperations(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResourceOptionsDto>> {
        return TenantApiFp(this.configuration).availableTenantGroupMembersOperations(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant/{id}` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @summary Tenant Resource Options
     * @param {string} id The id of the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async availableTenantInstanceOperations(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResourceOptionsDto>> {
        return TenantApiFp(this.configuration).availableTenantInstanceOperations(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/tenant` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/tenant` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @summary Tenant Resource Options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async availableTenantResourceOperations(options?: AxiosRequestConfig) : Promise<AxiosResponse<ResourceOptionsDto>> {
        return TenantApiFp(this.configuration).availableTenantResourceOperations(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @summary Tenant User Membership Resource Options
     * @param {string} id The id of the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async availableTenantUserMembersOperations(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResourceOptionsDto>> {
        return TenantApiFp(this.configuration).availableTenantUserMembersOperations(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a membership between a tenant and a group.
     * @summary Create Tenant Group Membership
     * @param {string} id The id of the tenant.
     * @param {string} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async createGroupMembership(id: string, groupId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TenantApiFp(this.configuration).createGroupMembership(id, groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new tenant.
     * @summary Create Tenant
     * @param {TenantDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async createTenant(body?: TenantDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TenantApiFp(this.configuration).createTenant(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a membership between a tenant and an user.
     * @summary Create Tenant User Membership
     * @param {string} id The id of the tenant.
     * @param {string} userId The id of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async createUserMembership(id: string, userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TenantApiFp(this.configuration).createUserMembership(id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a membership between a tenant and a group.
     * @summary Create Tenant Group Membership
     * @param {string} id The id of the tenant.
     * @param {string} groupId The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async deleteGroupMembership(id: string, groupId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TenantApiFp(this.configuration).deleteGroupMembership(id, groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a tenant by id.
     * @summary Delete Tenant
     * @param {string} id The id of the tenant to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async deleteTenant(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TenantApiFp(this.configuration).deleteTenant(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a membership between a tenant and an user.
     * @summary Delete a Tenant User Membership
     * @param {string} id The id of the tenant.
     * @param {string} userId The id of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async deleteUserMembership(id: string, userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TenantApiFp(this.configuration).deleteUserMembership(id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a tenant.
     * @summary Get Tenant
     * @param {string} id The id of the tenant to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async getTenant(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TenantDto>> {
        return TenantApiFp(this.configuration).getTenant(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query for tenants using a list of parameters and retrieves the count.
     * @summary Get Tenant Count
     * @param {string} [id] Filter by the id of the tenant.
     * @param {string} [name] Filter by the name of the tenant.
     * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
     * @param {string} [userMember] Select only tenants where the given user is a member of.
     * @param {string} [groupMember] Select only tenants where the given group is a member of.
     * @param {boolean} [includingGroupsOfUser] Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async getTenantCount(id?: string, name?: string, nameLike?: string, userMember?: string, groupMember?: string, includingGroupsOfUser?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return TenantApiFp(this.configuration).getTenantCount(id, name, nameLike, userMember, groupMember, includingGroupsOfUser, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/7.18/reference/rest/tenant/get-query-count/) method.
     * @summary Get Tenants
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {string} [id] Filter by the id of the tenant.
     * @param {string} [name] Filter by the name of the tenant.
     * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
     * @param {string} [userMember] Select only tenants where the given user is a member of.
     * @param {string} [groupMember] Select only tenants where the given group is a member of.
     * @param {boolean} [includingGroupsOfUser] Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async queryTenants(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, id?: string, name?: string, nameLike?: string, userMember?: string, groupMember?: string, includingGroupsOfUser?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TenantDto>>> {
        return TenantApiFp(this.configuration).queryTenants(sortBy, sortOrder, firstResult, maxResults, id, name, nameLike, userMember, groupMember, includingGroupsOfUser, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a given tenant.
     * @summary Update Tenant
     * @param {string} id The id of the tenant.
     * @param {TenantDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async updateTenant(id: string, body?: TenantDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TenantApiFp(this.configuration).updateTenant(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { DecisionDefinitionDiagramDto } from '../models';
import { DecisionDefinitionDto } from '../models';
import { EvaluateDecisionDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoryTimeToLiveDto } from '../models';
import { VariableValueDto } from '../models';
/**
 * DecisionDefinitionApi - axios parameter creator
 * @export
 */
export const DecisionDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
         * @summary Evaluate By Id
         * @param {string} id The id of the decision definition to be evaluated.
         * @param {EvaluateDecisionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateDecisionById: async (id: string, body?: EvaluateDecisionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling evaluateDecisionById.');
            }
            const localVarPath = `/decision-definition/{id}/evaluate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
         * @summary Evaluate By Key
         * @param {string} key The key of the decision definition (the latest version thereof) to be evaluated.
         * @param {EvaluateDecisionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateDecisionByKey: async (key: string, body?: EvaluateDecisionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling evaluateDecisionByKey.');
            }
            const localVarPath = `/decision-definition/key/{key}/evaluate`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
         * @summary Evaluate By Key And Tenant
         * @param {string} key The key of the decision definition (the latest version thereof) to be evaluated.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {EvaluateDecisionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateDecisionByKeyAndTenant: async (key: string, tenantId: string, body?: EvaluateDecisionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling evaluateDecisionByKeyAndTenant.');
            }
            // verify required parameter 'tenantId' is not null or undefined
            if (tenantId === null || tenantId === undefined) {
                throw new RequiredError('tenantId','Required parameter tenantId was null or undefined when calling evaluateDecisionByKeyAndTenant.');
            }
            const localVarPath = `/decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"tenant-id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.
         * @summary Get Decision Definition By Id
         * @param {string} id The id of the decision definition to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDecisionDefinitionById.');
            }
            const localVarPath = `/decision-definition/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the latest version of the decision definition which belongs to no tenant.
         * @summary Get Decision Definition By Key
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionByKey: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionDefinitionByKey.');
            }
            const localVarPath = `/decision-definition/key/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the latest version of the decision definition for tenant
         * @summary Get Decision Definition By Key And Tenant Id
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionByKeyAndTenantId: async (key: string, tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionDefinitionByKeyAndTenantId.');
            }
            // verify required parameter 'tenantId' is not null or undefined
            if (tenantId === null || tenantId === undefined) {
                throw new RequiredError('tenantId','Required parameter tenantId was null or undefined when calling getDecisionDefinitionByKeyAndTenantId.');
            }
            const localVarPath = `/decision-definition/key/{key}/tenant-id/{tenant-id}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"tenant-id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the diagram of a decision definition.
         * @summary Get Diagram
         * @param {string} id The id of the process definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionDiagram: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDecisionDefinitionDiagram.');
            }
            const localVarPath = `/decision-definition/{id}/diagram`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the diagram for the latest version of the decision definition which belongs to no tenant
         * @summary Get Diagram By Key
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionDiagramByKey: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionDefinitionDiagramByKey.');
            }
            const localVarPath = `/decision-definition/key/{key}/diagram`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the XML of the latest version of the decision definition for tenant.
         * @summary Get Diagram By Key And Tenant
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionDiagramByKeyAndTenant: async (key: string, tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionDefinitionDiagramByKeyAndTenant.');
            }
            // verify required parameter 'tenantId' is not null or undefined
            if (tenantId === null || tenantId === undefined) {
                throw new RequiredError('tenantId','Required parameter tenantId was null or undefined when calling getDecisionDefinitionDiagramByKeyAndTenant.');
            }
            const localVarPath = `/decision-definition/key/{key}/tenant-id/{tenant-id}/diagram`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"tenant-id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the DMN XML of a decision definition.
         * @summary Get XML By Id
         * @param {string} id The id of the decision definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionDmnXmlById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDecisionDefinitionDmnXmlById.');
            }
            const localVarPath = `/decision-definition/{id}/xml`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
         * @summary Get XML By Key
         * @param {string} key The key of the decision definition (the latest version thereof).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionDmnXmlByKey: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionDefinitionDmnXmlByKey.');
            }
            const localVarPath = `/decision-definition/key/{key}/xml`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the XML of the latest version of the decision definition for tenant
         * @summary Get XML By Key and Tenant
         * @param {string} key The key of the decision definition (the latest version thereof).
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionDmnXmlByKeyAndTenant: async (key: string, tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionDefinitionDmnXmlByKeyAndTenant.');
            }
            // verify required parameter 'tenantId' is not null or undefined
            if (tenantId === null || tenantId === undefined) {
                throw new RequiredError('tenantId','Required parameter tenantId was null or undefined when calling getDecisionDefinitionDmnXmlByKeyAndTenant.');
            }
            const localVarPath = `/decision-definition/key/{key}/tenant-id/{tenant-id}/xml`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"tenant-id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/decision-definition/get-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [decisionDefinitionId] Filter by decision definition id.
         * @param {string} [decisionDefinitionIdIn] Filter by decision definition ids.
         * @param {string} [name] Filter by decision definition name.
         * @param {string} [nameLike] Filter by decision definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {Date} [deployedAfter] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
         * @param {Date} [deployedAt] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
         * @param {string} [key] Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
         * @param {string} [keyLike] Filter by decision definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision definition version.
         * @param {boolean} [latestVersion] Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision definition resources that the parameter is a substring of.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the id of the decision requirements definition this decision definition belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition this decision definition belongs to.
         * @param {boolean} [withoutDecisionRequirementsDefinition] Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionDefinitionsWithoutTenantId] Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [versionTag] Filter by the version tag.
         * @param {string} [versionTagLike] Filter by the version tags of those decision definition resources that the parameter is a substring of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitions: async (sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/decision-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (decisionDefinitionId !== undefined) {
                localVarQueryParameter['decisionDefinitionId'] = decisionDefinitionId;
            }

            if (decisionDefinitionIdIn !== undefined) {
                localVarQueryParameter['decisionDefinitionIdIn'] = decisionDefinitionIdIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (deploymentId !== undefined) {
                localVarQueryParameter['deploymentId'] = deploymentId;
            }

            if (deployedAfter !== undefined) {
                localVarQueryParameter['deployedAfter'] = (deployedAfter as any instanceof Date) ?
                    (deployedAfter as any).toISOString() :
                    deployedAfter;
            }

            if (deployedAt !== undefined) {
                localVarQueryParameter['deployedAt'] = (deployedAt as any instanceof Date) ?
                    (deployedAt as any).toISOString() :
                    deployedAt;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (keyLike !== undefined) {
                localVarQueryParameter['keyLike'] = keyLike;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (categoryLike !== undefined) {
                localVarQueryParameter['categoryLike'] = categoryLike;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (latestVersion !== undefined) {
                localVarQueryParameter['latestVersion'] = latestVersion;
            }

            if (resourceName !== undefined) {
                localVarQueryParameter['resourceName'] = resourceName;
            }

            if (resourceNameLike !== undefined) {
                localVarQueryParameter['resourceNameLike'] = resourceNameLike;
            }

            if (decisionRequirementsDefinitionId !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionId'] = decisionRequirementsDefinitionId;
            }

            if (decisionRequirementsDefinitionKey !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionKey'] = decisionRequirementsDefinitionKey;
            }

            if (withoutDecisionRequirementsDefinition !== undefined) {
                localVarQueryParameter['withoutDecisionRequirementsDefinition'] = withoutDecisionRequirementsDefinition;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (includeDecisionDefinitionsWithoutTenantId !== undefined) {
                localVarQueryParameter['includeDecisionDefinitionsWithoutTenantId'] = includeDecisionDefinitionsWithoutTenantId;
            }

            if (versionTag !== undefined) {
                localVarQueryParameter['versionTag'] = versionTag;
            }

            if (versionTagLike !== undefined) {
                localVarQueryParameter['versionTagLike'] = versionTagLike;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.18/reference/rest/decision-definition/get-query/) method.
         * @summary Get List Count
         * @param {string} [decisionDefinitionId] Filter by decision definition id.
         * @param {string} [decisionDefinitionIdIn] Filter by decision definition ids.
         * @param {string} [name] Filter by decision definition name.
         * @param {string} [nameLike] Filter by decision definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {Date} [deployedAfter] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
         * @param {Date} [deployedAt] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
         * @param {string} [key] Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
         * @param {string} [keyLike] Filter by decision definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision definition version.
         * @param {boolean} [latestVersion] Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision definition resources that the parameter is a substring of.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the id of the decision requirements definition this decision definition belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition this decision definition belongs to.
         * @param {boolean} [withoutDecisionRequirementsDefinition] Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionDefinitionsWithoutTenantId] Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [versionTag] Filter by the version tag.
         * @param {string} [versionTagLike] Filter by the version tags of those decision definition resources that the parameter is a substring of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitionsCount: async (decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/decision-definition/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (decisionDefinitionId !== undefined) {
                localVarQueryParameter['decisionDefinitionId'] = decisionDefinitionId;
            }

            if (decisionDefinitionIdIn !== undefined) {
                localVarQueryParameter['decisionDefinitionIdIn'] = decisionDefinitionIdIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (deploymentId !== undefined) {
                localVarQueryParameter['deploymentId'] = deploymentId;
            }

            if (deployedAfter !== undefined) {
                localVarQueryParameter['deployedAfter'] = (deployedAfter as any instanceof Date) ?
                    (deployedAfter as any).toISOString() :
                    deployedAfter;
            }

            if (deployedAt !== undefined) {
                localVarQueryParameter['deployedAt'] = (deployedAt as any instanceof Date) ?
                    (deployedAt as any).toISOString() :
                    deployedAt;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (keyLike !== undefined) {
                localVarQueryParameter['keyLike'] = keyLike;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (categoryLike !== undefined) {
                localVarQueryParameter['categoryLike'] = categoryLike;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (latestVersion !== undefined) {
                localVarQueryParameter['latestVersion'] = latestVersion;
            }

            if (resourceName !== undefined) {
                localVarQueryParameter['resourceName'] = resourceName;
            }

            if (resourceNameLike !== undefined) {
                localVarQueryParameter['resourceNameLike'] = resourceNameLike;
            }

            if (decisionRequirementsDefinitionId !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionId'] = decisionRequirementsDefinitionId;
            }

            if (decisionRequirementsDefinitionKey !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionKey'] = decisionRequirementsDefinitionKey;
            }

            if (withoutDecisionRequirementsDefinition !== undefined) {
                localVarQueryParameter['withoutDecisionRequirementsDefinition'] = withoutDecisionRequirementsDefinition;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (includeDecisionDefinitionsWithoutTenantId !== undefined) {
                localVarQueryParameter['includeDecisionDefinitionsWithoutTenantId'] = includeDecisionDefinitionsWithoutTenantId;
            }

            if (versionTag !== undefined) {
                localVarQueryParameter['versionTag'] = versionTag;
            }

            if (versionTagLike !== undefined) {
                localVarQueryParameter['versionTagLike'] = versionTagLike;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
         * @summary Update History Time to Live
         * @param {string} id The id of the decision definition to change history time to live.
         * @param {HistoryTimeToLiveDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHistoryTimeToLiveByDecisionDefinitionId: async (id: string, body?: HistoryTimeToLiveDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateHistoryTimeToLiveByDecisionDefinitionId.');
            }
            const localVarPath = `/decision-definition/{id}/history-time-to-live`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
         * @summary Update History Time to Live By Key
         * @param {string} key The key of the decision definitions to change history time to live.
         * @param {HistoryTimeToLiveDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHistoryTimeToLiveByDecisionDefinitionKey: async (key: string, body?: HistoryTimeToLiveDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling updateHistoryTimeToLiveByDecisionDefinitionKey.');
            }
            const localVarPath = `/decision-definition/key/{key}/history-time-to-live`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
         * @summary Update History Time to Live By Key And Tenant
         * @param {string} key The key of the decision definitions to change history time to live.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {HistoryTimeToLiveDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant: async (key: string, tenantId: string, body?: HistoryTimeToLiveDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant.');
            }
            // verify required parameter 'tenantId' is not null or undefined
            if (tenantId === null || tenantId === undefined) {
                throw new RequiredError('tenantId','Required parameter tenantId was null or undefined when calling updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant.');
            }
            const localVarPath = `/decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"tenant-id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DecisionDefinitionApi - functional programming interface
 * @export
 */
export const DecisionDefinitionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
         * @summary Evaluate By Id
         * @param {string} id The id of the decision definition to be evaluated.
         * @param {EvaluateDecisionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateDecisionById(id: string, body?: EvaluateDecisionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<{ [key: string]: VariableValueDto; }>>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).evaluateDecisionById(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
         * @summary Evaluate By Key
         * @param {string} key The key of the decision definition (the latest version thereof) to be evaluated.
         * @param {EvaluateDecisionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateDecisionByKey(key: string, body?: EvaluateDecisionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<{ [key: string]: VariableValueDto; }>>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).evaluateDecisionByKey(key, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
         * @summary Evaluate By Key And Tenant
         * @param {string} key The key of the decision definition (the latest version thereof) to be evaluated.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {EvaluateDecisionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateDecisionByKeyAndTenant(key: string, tenantId: string, body?: EvaluateDecisionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<{ [key: string]: VariableValueDto; }>>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).evaluateDecisionByKeyAndTenant(key, tenantId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.
         * @summary Get Decision Definition By Id
         * @param {string} id The id of the decision definition to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionDefinitionDto>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the latest version of the decision definition which belongs to no tenant.
         * @summary Get Decision Definition By Key
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionByKey(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionDefinitionDto>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionByKey(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the latest version of the decision definition for tenant
         * @summary Get Decision Definition By Key And Tenant Id
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionDefinitionDto>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionByKeyAndTenantId(key, tenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the diagram of a decision definition.
         * @summary Get Diagram
         * @param {string} id The id of the process definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDiagram(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionDiagram(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the diagram for the latest version of the decision definition which belongs to no tenant
         * @summary Get Diagram By Key
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDiagramByKey(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionDiagramByKey(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the XML of the latest version of the decision definition for tenant.
         * @summary Get Diagram By Key And Tenant
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDiagramByKeyAndTenant(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionDiagramByKeyAndTenant(key, tenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the DMN XML of a decision definition.
         * @summary Get XML By Id
         * @param {string} id The id of the decision definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDmnXmlById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionDefinitionDiagramDto>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionDmnXmlById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
         * @summary Get XML By Key
         * @param {string} key The key of the decision definition (the latest version thereof).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDmnXmlByKey(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionDefinitionDiagramDto>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionDmnXmlByKey(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the XML of the latest version of the decision definition for tenant
         * @summary Get XML By Key and Tenant
         * @param {string} key The key of the decision definition (the latest version thereof).
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDmnXmlByKeyAndTenant(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionDefinitionDiagramDto>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionDmnXmlByKeyAndTenant(key, tenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/decision-definition/get-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [decisionDefinitionId] Filter by decision definition id.
         * @param {string} [decisionDefinitionIdIn] Filter by decision definition ids.
         * @param {string} [name] Filter by decision definition name.
         * @param {string} [nameLike] Filter by decision definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {Date} [deployedAfter] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
         * @param {Date} [deployedAt] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
         * @param {string} [key] Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
         * @param {string} [keyLike] Filter by decision definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision definition version.
         * @param {boolean} [latestVersion] Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision definition resources that the parameter is a substring of.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the id of the decision requirements definition this decision definition belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition this decision definition belongs to.
         * @param {boolean} [withoutDecisionRequirementsDefinition] Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionDefinitionsWithoutTenantId] Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [versionTag] Filter by the version tag.
         * @param {string} [versionTagLike] Filter by the version tags of those decision definition resources that the parameter is a substring of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitions(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DecisionDefinitionDto>>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitions(sortBy, sortOrder, firstResult, maxResults, decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.18/reference/rest/decision-definition/get-query/) method.
         * @summary Get List Count
         * @param {string} [decisionDefinitionId] Filter by decision definition id.
         * @param {string} [decisionDefinitionIdIn] Filter by decision definition ids.
         * @param {string} [name] Filter by decision definition name.
         * @param {string} [nameLike] Filter by decision definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {Date} [deployedAfter] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
         * @param {Date} [deployedAt] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
         * @param {string} [key] Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
         * @param {string} [keyLike] Filter by decision definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision definition version.
         * @param {boolean} [latestVersion] Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision definition resources that the parameter is a substring of.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the id of the decision requirements definition this decision definition belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition this decision definition belongs to.
         * @param {boolean} [withoutDecisionRequirementsDefinition] Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionDefinitionsWithoutTenantId] Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [versionTag] Filter by the version tag.
         * @param {string} [versionTagLike] Filter by the version tags of those decision definition resources that the parameter is a substring of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionsCount(decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).getDecisionDefinitionsCount(decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
         * @summary Update History Time to Live
         * @param {string} id The id of the decision definition to change history time to live.
         * @param {HistoryTimeToLiveDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHistoryTimeToLiveByDecisionDefinitionId(id: string, body?: HistoryTimeToLiveDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).updateHistoryTimeToLiveByDecisionDefinitionId(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
         * @summary Update History Time to Live By Key
         * @param {string} key The key of the decision definitions to change history time to live.
         * @param {HistoryTimeToLiveDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHistoryTimeToLiveByDecisionDefinitionKey(key: string, body?: HistoryTimeToLiveDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).updateHistoryTimeToLiveByDecisionDefinitionKey(key, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
         * @summary Update History Time to Live By Key And Tenant
         * @param {string} key The key of the decision definitions to change history time to live.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {HistoryTimeToLiveDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key: string, tenantId: string, body?: HistoryTimeToLiveDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DecisionDefinitionApiAxiosParamCreator(configuration).updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key, tenantId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DecisionDefinitionApi - factory interface
 * @export
 */
export const DecisionDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
         * @summary Evaluate By Id
         * @param {string} id The id of the decision definition to be evaluated.
         * @param {EvaluateDecisionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateDecisionById(id: string, body?: EvaluateDecisionDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<{ [key: string]: VariableValueDto; }>>> {
            return DecisionDefinitionApiFp(configuration).evaluateDecisionById(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
         * @summary Evaluate By Key
         * @param {string} key The key of the decision definition (the latest version thereof) to be evaluated.
         * @param {EvaluateDecisionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateDecisionByKey(key: string, body?: EvaluateDecisionDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<{ [key: string]: VariableValueDto; }>>> {
            return DecisionDefinitionApiFp(configuration).evaluateDecisionByKey(key, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
         * @summary Evaluate By Key And Tenant
         * @param {string} key The key of the decision definition (the latest version thereof) to be evaluated.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {EvaluateDecisionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateDecisionByKeyAndTenant(key: string, tenantId: string, body?: EvaluateDecisionDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<{ [key: string]: VariableValueDto; }>>> {
            return DecisionDefinitionApiFp(configuration).evaluateDecisionByKeyAndTenant(key, tenantId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.
         * @summary Get Decision Definition By Id
         * @param {string} id The id of the decision definition to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionById(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionDefinitionDto>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the latest version of the decision definition which belongs to no tenant.
         * @summary Get Decision Definition By Key
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionByKey(key: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionDefinitionDto>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionByKey(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the latest version of the decision definition for tenant
         * @summary Get Decision Definition By Key And Tenant Id
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionDefinitionDto>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionByKeyAndTenantId(key, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the diagram of a decision definition.
         * @summary Get Diagram
         * @param {string} id The id of the process definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDiagram(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionDiagram(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the diagram for the latest version of the decision definition which belongs to no tenant
         * @summary Get Diagram By Key
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDiagramByKey(key: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionDiagramByKey(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the XML of the latest version of the decision definition for tenant.
         * @summary Get Diagram By Key And Tenant
         * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDiagramByKeyAndTenant(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionDiagramByKeyAndTenant(key, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the DMN XML of a decision definition.
         * @summary Get XML By Id
         * @param {string} id The id of the decision definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDmnXmlById(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionDefinitionDiagramDto>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionDmnXmlById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
         * @summary Get XML By Key
         * @param {string} key The key of the decision definition (the latest version thereof).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDmnXmlByKey(key: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionDefinitionDiagramDto>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionDmnXmlByKey(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the XML of the latest version of the decision definition for tenant
         * @summary Get XML By Key and Tenant
         * @param {string} key The key of the decision definition (the latest version thereof).
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionDmnXmlByKeyAndTenant(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionDefinitionDiagramDto>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionDmnXmlByKeyAndTenant(key, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/decision-definition/get-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [decisionDefinitionId] Filter by decision definition id.
         * @param {string} [decisionDefinitionIdIn] Filter by decision definition ids.
         * @param {string} [name] Filter by decision definition name.
         * @param {string} [nameLike] Filter by decision definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {Date} [deployedAfter] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
         * @param {Date} [deployedAt] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
         * @param {string} [key] Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
         * @param {string} [keyLike] Filter by decision definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision definition version.
         * @param {boolean} [latestVersion] Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision definition resources that the parameter is a substring of.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the id of the decision requirements definition this decision definition belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition this decision definition belongs to.
         * @param {boolean} [withoutDecisionRequirementsDefinition] Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionDefinitionsWithoutTenantId] Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [versionTag] Filter by the version tag.
         * @param {string} [versionTagLike] Filter by the version tags of those decision definition resources that the parameter is a substring of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitions(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DecisionDefinitionDto>>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitions(sortBy, sortOrder, firstResult, maxResults, decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.18/reference/rest/decision-definition/get-query/) method.
         * @summary Get List Count
         * @param {string} [decisionDefinitionId] Filter by decision definition id.
         * @param {string} [decisionDefinitionIdIn] Filter by decision definition ids.
         * @param {string} [name] Filter by decision definition name.
         * @param {string} [nameLike] Filter by decision definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {Date} [deployedAfter] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
         * @param {Date} [deployedAt] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
         * @param {string} [key] Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
         * @param {string} [keyLike] Filter by decision definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision definition version.
         * @param {boolean} [latestVersion] Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision definition resources that the parameter is a substring of.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the id of the decision requirements definition this decision definition belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition this decision definition belongs to.
         * @param {boolean} [withoutDecisionRequirementsDefinition] Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionDefinitionsWithoutTenantId] Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [versionTag] Filter by the version tag.
         * @param {string} [versionTagLike] Filter by the version tags of those decision definition resources that the parameter is a substring of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitionsCount(decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return DecisionDefinitionApiFp(configuration).getDecisionDefinitionsCount(decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
         * @summary Update History Time to Live
         * @param {string} id The id of the decision definition to change history time to live.
         * @param {HistoryTimeToLiveDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHistoryTimeToLiveByDecisionDefinitionId(id: string, body?: HistoryTimeToLiveDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DecisionDefinitionApiFp(configuration).updateHistoryTimeToLiveByDecisionDefinitionId(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
         * @summary Update History Time to Live By Key
         * @param {string} key The key of the decision definitions to change history time to live.
         * @param {HistoryTimeToLiveDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHistoryTimeToLiveByDecisionDefinitionKey(key: string, body?: HistoryTimeToLiveDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DecisionDefinitionApiFp(configuration).updateHistoryTimeToLiveByDecisionDefinitionKey(key, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
         * @summary Update History Time to Live By Key And Tenant
         * @param {string} key The key of the decision definitions to change history time to live.
         * @param {string} tenantId The id of the tenant the decision definition belongs to.
         * @param {HistoryTimeToLiveDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key: string, tenantId: string, body?: HistoryTimeToLiveDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DecisionDefinitionApiFp(configuration).updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key, tenantId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DecisionDefinitionApi - object-oriented interface
 * @export
 * @class DecisionDefinitionApi
 * @extends {BaseAPI}
 */
export class DecisionDefinitionApi extends BaseAPI {
    /**
     * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
     * @summary Evaluate By Id
     * @param {string} id The id of the decision definition to be evaluated.
     * @param {EvaluateDecisionDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async evaluateDecisionById(id: string, body?: EvaluateDecisionDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<{ [key: string]: VariableValueDto; }>>> {
        return DecisionDefinitionApiFp(this.configuration).evaluateDecisionById(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
     * @summary Evaluate By Key
     * @param {string} key The key of the decision definition (the latest version thereof) to be evaluated.
     * @param {EvaluateDecisionDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async evaluateDecisionByKey(key: string, body?: EvaluateDecisionDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<{ [key: string]: VariableValueDto; }>>> {
        return DecisionDefinitionApiFp(this.configuration).evaluateDecisionByKey(key, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
     * @summary Evaluate By Key And Tenant
     * @param {string} key The key of the decision definition (the latest version thereof) to be evaluated.
     * @param {string} tenantId The id of the tenant the decision definition belongs to.
     * @param {EvaluateDecisionDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async evaluateDecisionByKeyAndTenant(key: string, tenantId: string, body?: EvaluateDecisionDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<{ [key: string]: VariableValueDto; }>>> {
        return DecisionDefinitionApiFp(this.configuration).evaluateDecisionByKeyAndTenant(key, tenantId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.
     * @summary Get Decision Definition By Id
     * @param {string} id The id of the decision definition to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionById(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionDefinitionDto>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the latest version of the decision definition which belongs to no tenant.
     * @summary Get Decision Definition By Key
     * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionByKey(key: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionDefinitionDto>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionByKey(key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the latest version of the decision definition for tenant
     * @summary Get Decision Definition By Key And Tenant Id
     * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param {string} tenantId The id of the tenant the decision definition belongs to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionDefinitionDto>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionByKeyAndTenantId(key, tenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the diagram of a decision definition.
     * @summary Get Diagram
     * @param {string} id The id of the process definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionDiagram(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionDiagram(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the diagram for the latest version of the decision definition which belongs to no tenant
     * @summary Get Diagram By Key
     * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionDiagramByKey(key: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionDiagramByKey(key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the XML of the latest version of the decision definition for tenant.
     * @summary Get Diagram By Key And Tenant
     * @param {string} key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param {string} tenantId The id of the tenant the decision definition belongs to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionDiagramByKeyAndTenant(key: string, tenantId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionDiagramByKeyAndTenant(key, tenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the DMN XML of a decision definition.
     * @summary Get XML By Id
     * @param {string} id The id of the decision definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionDmnXmlById(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionDefinitionDiagramDto>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionDmnXmlById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
     * @summary Get XML By Key
     * @param {string} key The key of the decision definition (the latest version thereof).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionDmnXmlByKey(key: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionDefinitionDiagramDto>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionDmnXmlByKey(key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the XML of the latest version of the decision definition for tenant
     * @summary Get XML By Key and Tenant
     * @param {string} key The key of the decision definition (the latest version thereof).
     * @param {string} tenantId The id of the tenant the decision definition belongs to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionDmnXmlByKeyAndTenant(key: string, tenantId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionDefinitionDiagramDto>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionDmnXmlByKeyAndTenant(key, tenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/decision-definition/get-query-count/) method.
     * @summary Get List
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {string} [decisionDefinitionId] Filter by decision definition id.
     * @param {string} [decisionDefinitionIdIn] Filter by decision definition ids.
     * @param {string} [name] Filter by decision definition name.
     * @param {string} [nameLike] Filter by decision definition names that the parameter is a substring of.
     * @param {string} [deploymentId] Filter by the deployment the id belongs to.
     * @param {Date} [deployedAfter] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
     * @param {Date} [deployedAt] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
     * @param {string} [key] Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
     * @param {string} [keyLike] Filter by decision definition keys that the parameter is a substring of.
     * @param {string} [category] Filter by decision definition category. Exact match.
     * @param {string} [categoryLike] Filter by decision definition categories that the parameter is a substring of.
     * @param {number} [version] Filter by decision definition version.
     * @param {boolean} [latestVersion] Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [resourceName] Filter by the name of the decision definition resource. Exact match.
     * @param {string} [resourceNameLike] Filter by names of those decision definition resources that the parameter is a substring of.
     * @param {string} [decisionRequirementsDefinitionId] Filter by the id of the decision requirements definition this decision definition belongs to.
     * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition this decision definition belongs to.
     * @param {boolean} [withoutDecisionRequirementsDefinition] Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeDecisionDefinitionsWithoutTenantId] Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [versionTag] Filter by the version tag.
     * @param {string} [versionTagLike] Filter by the version tags of those decision definition resources that the parameter is a substring of.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitions(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DecisionDefinitionDto>>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitions(sortBy, sortOrder, firstResult, maxResults, decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.18/reference/rest/decision-definition/get-query/) method.
     * @summary Get List Count
     * @param {string} [decisionDefinitionId] Filter by decision definition id.
     * @param {string} [decisionDefinitionIdIn] Filter by decision definition ids.
     * @param {string} [name] Filter by decision definition name.
     * @param {string} [nameLike] Filter by decision definition names that the parameter is a substring of.
     * @param {string} [deploymentId] Filter by the deployment the id belongs to.
     * @param {Date} [deployedAfter] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
     * @param {Date} [deployedAt] Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
     * @param {string} [key] Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
     * @param {string} [keyLike] Filter by decision definition keys that the parameter is a substring of.
     * @param {string} [category] Filter by decision definition category. Exact match.
     * @param {string} [categoryLike] Filter by decision definition categories that the parameter is a substring of.
     * @param {number} [version] Filter by decision definition version.
     * @param {boolean} [latestVersion] Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [resourceName] Filter by the name of the decision definition resource. Exact match.
     * @param {string} [resourceNameLike] Filter by names of those decision definition resources that the parameter is a substring of.
     * @param {string} [decisionRequirementsDefinitionId] Filter by the id of the decision requirements definition this decision definition belongs to.
     * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition this decision definition belongs to.
     * @param {boolean} [withoutDecisionRequirementsDefinition] Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeDecisionDefinitionsWithoutTenantId] Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [versionTag] Filter by the version tag.
     * @param {string} [versionTagLike] Filter by the version tags of those decision definition resources that the parameter is a substring of.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async getDecisionDefinitionsCount(decisionDefinitionId?: string, decisionDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, deployedAfter?: Date, deployedAt?: Date, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, withoutDecisionRequirementsDefinition?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionDefinitionsWithoutTenantId?: boolean, versionTag?: string, versionTagLike?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return DecisionDefinitionApiFp(this.configuration).getDecisionDefinitionsCount(decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
     * @summary Update History Time to Live
     * @param {string} id The id of the decision definition to change history time to live.
     * @param {HistoryTimeToLiveDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async updateHistoryTimeToLiveByDecisionDefinitionId(id: string, body?: HistoryTimeToLiveDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DecisionDefinitionApiFp(this.configuration).updateHistoryTimeToLiveByDecisionDefinitionId(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
     * @summary Update History Time to Live By Key
     * @param {string} key The key of the decision definitions to change history time to live.
     * @param {HistoryTimeToLiveDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async updateHistoryTimeToLiveByDecisionDefinitionKey(key: string, body?: HistoryTimeToLiveDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DecisionDefinitionApiFp(this.configuration).updateHistoryTimeToLiveByDecisionDefinitionKey(key, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
     * @summary Update History Time to Live By Key And Tenant
     * @param {string} key The key of the decision definitions to change history time to live.
     * @param {string} tenantId The id of the tenant the decision definition belongs to.
     * @param {HistoryTimeToLiveDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionApi
     */
    public async updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key: string, tenantId: string, body?: HistoryTimeToLiveDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DecisionDefinitionApiFp(this.configuration).updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key, tenantId, body, options).then((request) => request(this.axios, this.basePath));
    }
}

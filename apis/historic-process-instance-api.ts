/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BatchDto } from '../models';
import { CountResultDto } from '../models';
import { DeleteHistoricProcessInstancesDto } from '../models';
import { DurationReportResultDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoricProcessInstanceDto } from '../models';
import { HistoricProcessInstanceQueryDto } from '../models';
import { SetRemovalTimeToHistoricProcessInstancesDto } from '../models';
/**
 * HistoricProcessInstanceApi - axios parameter creator
 * @export
 */
export const HistoricProcessInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a process instance from the history by id.
         * @summary Delete
         * @param {string} id The id of the historic process instance to be deleted.
         * @param {boolean} [failIfNotExists] If set to &#x60;false&#x60;, the request will still be successful if the process id is not found.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHistoricProcessInstance: async (id: string, failIfNotExists?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteHistoricProcessInstance.');
            }
            const localVarPath = `/history/process-instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (failIfNotExists !== undefined) {
                localVarQueryParameter['failIfNotExists'] = failIfNotExists;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple historic process instances asynchronously (batch). At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
         * @summary Delete Async (POST)
         * @param {DeleteHistoricProcessInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHistoricProcessInstancesAsync: async (body?: DeleteHistoricProcessInstancesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/process-instance/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes all variables of a process instance from the history by id.
         * @summary Delete Variable Instances
         * @param {string} id The id of the process instance for which all historic variables are to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHistoricVariableInstancesOfHistoricProcessInstance: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteHistoricVariableInstancesOfHistoricProcessInstance.');
            }
            const localVarPath = `/history/process-instance/{id}/variable-instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.
         * @summary Get
         * @param {string} id The id of the historic process instance to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricProcessInstance: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getHistoricProcessInstance.');
            }
            const localVarPath = `/history/process-instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
         * @summary Get Duration Report
         * @param {string} reportType **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.
         * @param {string} periodUnit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.
         * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
         * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricProcessInstanceDurationReport: async (reportType: string, periodUnit: string, processDefinitionIdIn?: string, processDefinitionKeyIn?: string, startedBefore?: Date, startedAfter?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportType' is not null or undefined
            if (reportType === null || reportType === undefined) {
                throw new RequiredError('reportType','Required parameter reportType was null or undefined when calling getHistoricProcessInstanceDurationReport.');
            }
            // verify required parameter 'periodUnit' is not null or undefined
            if (periodUnit === null || periodUnit === undefined) {
                throw new RequiredError('periodUnit','Required parameter periodUnit was null or undefined when calling getHistoricProcessInstanceDurationReport.');
            }
            const localVarPath = `/history/process-instance/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reportType !== undefined) {
                localVarQueryParameter['reportType'] = reportType;
            }

            if (periodUnit !== undefined) {
                localVarQueryParameter['periodUnit'] = periodUnit;
            }

            if (processDefinitionIdIn !== undefined) {
                localVarQueryParameter['processDefinitionIdIn'] = processDefinitionIdIn;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIds] Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionId] Filter by the process definition the instances run on.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionName] Filter by the name of the process definition the instances run on.
         * @param {string} [processDefinitionNameLike] Filter by process definition names that the parameter is a substring of.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processInstanceBusinessKey] Filter by process instance business key.
         * @param {string} [processInstanceBusinessKeyIn] Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [processInstanceBusinessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [finished] Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [unfinished] Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withIncidents] Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withRootIncidents] Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentStatus] Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityAfter] Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityBefore] Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobAfter] Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobBefore] Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [startedBy] Only include process instances that were started by the given user.
         * @param {string} [superProcessInstanceId] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstanceId] Restrict query to one process instance that has a sub process instance with the given id.
         * @param {string} [superCaseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstanceId] Restrict query to one process instance that has a sub case instance with the given id.
         * @param {string} [caseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [tenantIdIn] Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [withoutTenantId] Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [executedActivityIdIn] Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [activeActivityIdIn] Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [active] Restrict to instances that are active.
         * @param {boolean} [suspended] Restrict to instances that are suspended.
         * @param {boolean} [completed] Restrict to instances that are completed.
         * @param {boolean} [externallyTerminated] Restrict to instances that are externallyTerminated.
         * @param {boolean} [internallyTerminated] Restrict to instances that are internallyTerminated.
         * @param {string} [variables] Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricProcessInstances: async (sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, processInstanceId?: string, processInstanceIds?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, processDefinitionKeyNotIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, rootProcessInstances?: boolean, finished?: boolean, unfinished?: boolean, withIncidents?: boolean, withRootIncidents?: boolean, incidentType?: string, incidentStatus?: string, incidentMessage?: string, incidentMessageLike?: string, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, executedActivityAfter?: Date, executedActivityBefore?: Date, executedJobAfter?: Date, executedJobBefore?: Date, startedBy?: string, superProcessInstanceId?: string, subProcessInstanceId?: string, superCaseInstanceId?: string, subCaseInstanceId?: string, caseInstanceId?: string, tenantIdIn?: string, withoutTenantId?: boolean, executedActivityIdIn?: string, activeActivityIdIn?: string, active?: boolean, suspended?: boolean, completed?: boolean, externallyTerminated?: boolean, internallyTerminated?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/process-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processInstanceIds !== undefined) {
                localVarQueryParameter['processInstanceIds'] = processInstanceIds;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (processDefinitionName !== undefined) {
                localVarQueryParameter['processDefinitionName'] = processDefinitionName;
            }

            if (processDefinitionNameLike !== undefined) {
                localVarQueryParameter['processDefinitionNameLike'] = processDefinitionNameLike;
            }

            if (processDefinitionKeyNotIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyNotIn'] = processDefinitionKeyNotIn;
            }

            if (processInstanceBusinessKey !== undefined) {
                localVarQueryParameter['processInstanceBusinessKey'] = processInstanceBusinessKey;
            }

            if (processInstanceBusinessKeyIn !== undefined) {
                localVarQueryParameter['processInstanceBusinessKeyIn'] = processInstanceBusinessKeyIn;
            }

            if (processInstanceBusinessKeyLike !== undefined) {
                localVarQueryParameter['processInstanceBusinessKeyLike'] = processInstanceBusinessKeyLike;
            }

            if (rootProcessInstances !== undefined) {
                localVarQueryParameter['rootProcessInstances'] = rootProcessInstances;
            }

            if (finished !== undefined) {
                localVarQueryParameter['finished'] = finished;
            }

            if (unfinished !== undefined) {
                localVarQueryParameter['unfinished'] = unfinished;
            }

            if (withIncidents !== undefined) {
                localVarQueryParameter['withIncidents'] = withIncidents;
            }

            if (withRootIncidents !== undefined) {
                localVarQueryParameter['withRootIncidents'] = withRootIncidents;
            }

            if (incidentType !== undefined) {
                localVarQueryParameter['incidentType'] = incidentType;
            }

            if (incidentStatus !== undefined) {
                localVarQueryParameter['incidentStatus'] = incidentStatus;
            }

            if (incidentMessage !== undefined) {
                localVarQueryParameter['incidentMessage'] = incidentMessage;
            }

            if (incidentMessageLike !== undefined) {
                localVarQueryParameter['incidentMessageLike'] = incidentMessageLike;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            if (finishedBefore !== undefined) {
                localVarQueryParameter['finishedBefore'] = (finishedBefore as any instanceof Date) ?
                    (finishedBefore as any).toISOString() :
                    finishedBefore;
            }

            if (finishedAfter !== undefined) {
                localVarQueryParameter['finishedAfter'] = (finishedAfter as any instanceof Date) ?
                    (finishedAfter as any).toISOString() :
                    finishedAfter;
            }

            if (executedActivityAfter !== undefined) {
                localVarQueryParameter['executedActivityAfter'] = (executedActivityAfter as any instanceof Date) ?
                    (executedActivityAfter as any).toISOString() :
                    executedActivityAfter;
            }

            if (executedActivityBefore !== undefined) {
                localVarQueryParameter['executedActivityBefore'] = (executedActivityBefore as any instanceof Date) ?
                    (executedActivityBefore as any).toISOString() :
                    executedActivityBefore;
            }

            if (executedJobAfter !== undefined) {
                localVarQueryParameter['executedJobAfter'] = (executedJobAfter as any instanceof Date) ?
                    (executedJobAfter as any).toISOString() :
                    executedJobAfter;
            }

            if (executedJobBefore !== undefined) {
                localVarQueryParameter['executedJobBefore'] = (executedJobBefore as any instanceof Date) ?
                    (executedJobBefore as any).toISOString() :
                    executedJobBefore;
            }

            if (startedBy !== undefined) {
                localVarQueryParameter['startedBy'] = startedBy;
            }

            if (superProcessInstanceId !== undefined) {
                localVarQueryParameter['superProcessInstanceId'] = superProcessInstanceId;
            }

            if (subProcessInstanceId !== undefined) {
                localVarQueryParameter['subProcessInstanceId'] = subProcessInstanceId;
            }

            if (superCaseInstanceId !== undefined) {
                localVarQueryParameter['superCaseInstanceId'] = superCaseInstanceId;
            }

            if (subCaseInstanceId !== undefined) {
                localVarQueryParameter['subCaseInstanceId'] = subCaseInstanceId;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (executedActivityIdIn !== undefined) {
                localVarQueryParameter['executedActivityIdIn'] = executedActivityIdIn;
            }

            if (activeActivityIdIn !== undefined) {
                localVarQueryParameter['activeActivityIdIn'] = activeActivityIdIn;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (completed !== undefined) {
                localVarQueryParameter['completed'] = completed;
            }

            if (externallyTerminated !== undefined) {
                localVarQueryParameter['externallyTerminated'] = externallyTerminated;
            }

            if (internallyTerminated !== undefined) {
                localVarQueryParameter['internallyTerminated'] = internallyTerminated;
            }

            if (variables !== undefined) {
                localVarQueryParameter['variables'] = variables;
            }

            if (variableNamesIgnoreCase !== undefined) {
                localVarQueryParameter['variableNamesIgnoreCase'] = variableNamesIgnoreCase;
            }

            if (variableValuesIgnoreCase !== undefined) {
                localVarQueryParameter['variableValuesIgnoreCase'] = variableValuesIgnoreCase;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) method.
         * @summary Get List Count
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIds] Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionId] Filter by the process definition the instances run on.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionName] Filter by the name of the process definition the instances run on.
         * @param {string} [processDefinitionNameLike] Filter by process definition names that the parameter is a substring of.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processInstanceBusinessKey] Filter by process instance business key.
         * @param {string} [processInstanceBusinessKeyIn] Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [processInstanceBusinessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [finished] Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [unfinished] Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withIncidents] Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withRootIncidents] Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentStatus] Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityAfter] Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityBefore] Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobAfter] Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobBefore] Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [startedBy] Only include process instances that were started by the given user.
         * @param {string} [superProcessInstanceId] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstanceId] Restrict query to one process instance that has a sub process instance with the given id.
         * @param {string} [superCaseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstanceId] Restrict query to one process instance that has a sub case instance with the given id.
         * @param {string} [caseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [tenantIdIn] Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [withoutTenantId] Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [executedActivityIdIn] Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [activeActivityIdIn] Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [active] Restrict to instances that are active.
         * @param {boolean} [suspended] Restrict to instances that are suspended.
         * @param {boolean} [completed] Restrict to instances that are completed.
         * @param {boolean} [externallyTerminated] Restrict to instances that are externallyTerminated.
         * @param {boolean} [internallyTerminated] Restrict to instances that are internallyTerminated.
         * @param {string} [variables] Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricProcessInstancesCount: async (processInstanceId?: string, processInstanceIds?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, processDefinitionKeyNotIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, rootProcessInstances?: boolean, finished?: boolean, unfinished?: boolean, withIncidents?: boolean, withRootIncidents?: boolean, incidentType?: string, incidentStatus?: string, incidentMessage?: string, incidentMessageLike?: string, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, executedActivityAfter?: Date, executedActivityBefore?: Date, executedJobAfter?: Date, executedJobBefore?: Date, startedBy?: string, superProcessInstanceId?: string, subProcessInstanceId?: string, superCaseInstanceId?: string, subCaseInstanceId?: string, caseInstanceId?: string, tenantIdIn?: string, withoutTenantId?: boolean, executedActivityIdIn?: string, activeActivityIdIn?: string, active?: boolean, suspended?: boolean, completed?: boolean, externallyTerminated?: boolean, internallyTerminated?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/process-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processInstanceIds !== undefined) {
                localVarQueryParameter['processInstanceIds'] = processInstanceIds;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (processDefinitionName !== undefined) {
                localVarQueryParameter['processDefinitionName'] = processDefinitionName;
            }

            if (processDefinitionNameLike !== undefined) {
                localVarQueryParameter['processDefinitionNameLike'] = processDefinitionNameLike;
            }

            if (processDefinitionKeyNotIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyNotIn'] = processDefinitionKeyNotIn;
            }

            if (processInstanceBusinessKey !== undefined) {
                localVarQueryParameter['processInstanceBusinessKey'] = processInstanceBusinessKey;
            }

            if (processInstanceBusinessKeyIn !== undefined) {
                localVarQueryParameter['processInstanceBusinessKeyIn'] = processInstanceBusinessKeyIn;
            }

            if (processInstanceBusinessKeyLike !== undefined) {
                localVarQueryParameter['processInstanceBusinessKeyLike'] = processInstanceBusinessKeyLike;
            }

            if (rootProcessInstances !== undefined) {
                localVarQueryParameter['rootProcessInstances'] = rootProcessInstances;
            }

            if (finished !== undefined) {
                localVarQueryParameter['finished'] = finished;
            }

            if (unfinished !== undefined) {
                localVarQueryParameter['unfinished'] = unfinished;
            }

            if (withIncidents !== undefined) {
                localVarQueryParameter['withIncidents'] = withIncidents;
            }

            if (withRootIncidents !== undefined) {
                localVarQueryParameter['withRootIncidents'] = withRootIncidents;
            }

            if (incidentType !== undefined) {
                localVarQueryParameter['incidentType'] = incidentType;
            }

            if (incidentStatus !== undefined) {
                localVarQueryParameter['incidentStatus'] = incidentStatus;
            }

            if (incidentMessage !== undefined) {
                localVarQueryParameter['incidentMessage'] = incidentMessage;
            }

            if (incidentMessageLike !== undefined) {
                localVarQueryParameter['incidentMessageLike'] = incidentMessageLike;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            if (finishedBefore !== undefined) {
                localVarQueryParameter['finishedBefore'] = (finishedBefore as any instanceof Date) ?
                    (finishedBefore as any).toISOString() :
                    finishedBefore;
            }

            if (finishedAfter !== undefined) {
                localVarQueryParameter['finishedAfter'] = (finishedAfter as any instanceof Date) ?
                    (finishedAfter as any).toISOString() :
                    finishedAfter;
            }

            if (executedActivityAfter !== undefined) {
                localVarQueryParameter['executedActivityAfter'] = (executedActivityAfter as any instanceof Date) ?
                    (executedActivityAfter as any).toISOString() :
                    executedActivityAfter;
            }

            if (executedActivityBefore !== undefined) {
                localVarQueryParameter['executedActivityBefore'] = (executedActivityBefore as any instanceof Date) ?
                    (executedActivityBefore as any).toISOString() :
                    executedActivityBefore;
            }

            if (executedJobAfter !== undefined) {
                localVarQueryParameter['executedJobAfter'] = (executedJobAfter as any instanceof Date) ?
                    (executedJobAfter as any).toISOString() :
                    executedJobAfter;
            }

            if (executedJobBefore !== undefined) {
                localVarQueryParameter['executedJobBefore'] = (executedJobBefore as any instanceof Date) ?
                    (executedJobBefore as any).toISOString() :
                    executedJobBefore;
            }

            if (startedBy !== undefined) {
                localVarQueryParameter['startedBy'] = startedBy;
            }

            if (superProcessInstanceId !== undefined) {
                localVarQueryParameter['superProcessInstanceId'] = superProcessInstanceId;
            }

            if (subProcessInstanceId !== undefined) {
                localVarQueryParameter['subProcessInstanceId'] = subProcessInstanceId;
            }

            if (superCaseInstanceId !== undefined) {
                localVarQueryParameter['superCaseInstanceId'] = superCaseInstanceId;
            }

            if (subCaseInstanceId !== undefined) {
                localVarQueryParameter['subCaseInstanceId'] = subCaseInstanceId;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (executedActivityIdIn !== undefined) {
                localVarQueryParameter['executedActivityIdIn'] = executedActivityIdIn;
            }

            if (activeActivityIdIn !== undefined) {
                localVarQueryParameter['activeActivityIdIn'] = activeActivityIdIn;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (completed !== undefined) {
                localVarQueryParameter['completed'] = completed;
            }

            if (externallyTerminated !== undefined) {
                localVarQueryParameter['externallyTerminated'] = externallyTerminated;
            }

            if (internallyTerminated !== undefined) {
                localVarQueryParameter['internallyTerminated'] = internallyTerminated;
            }

            if (variables !== undefined) {
                localVarQueryParameter['variables'] = variables;
            }

            if (variableNamesIgnoreCase !== undefined) {
                localVarQueryParameter['variableNamesIgnoreCase'] = variableNamesIgnoreCase;
            }

            if (variableValuesIgnoreCase !== undefined) {
                localVarQueryParameter['variableValuesIgnoreCase'] = variableValuesIgnoreCase;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.
         * @summary Get List (POST)
         * @param {HistoricProcessInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricProcessInstances: async (body?: HistoricProcessInstanceQueryDto, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/process-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/post-process-instance-query-count/) method.
         * @summary Get List Count (POST)
         * @param {HistoricProcessInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricProcessInstancesCount: async (body?: HistoricProcessInstanceQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/process-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the removal time to multiple historic process instances asynchronously (batch).  At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
         * @summary Set Removal Time Async (POST)
         * @param {SetRemovalTimeToHistoricProcessInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRemovalTimeAsync: async (body?: SetRemovalTimeToHistoricProcessInstancesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/process-instance/set-removal-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricProcessInstanceApi - functional programming interface
 * @export
 */
export const HistoricProcessInstanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a process instance from the history by id.
         * @summary Delete
         * @param {string} id The id of the historic process instance to be deleted.
         * @param {boolean} [failIfNotExists] If set to &#x60;false&#x60;, the request will still be successful if the process id is not found.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoricProcessInstance(id: string, failIfNotExists?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).deleteHistoricProcessInstance(id, failIfNotExists, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete multiple historic process instances asynchronously (batch). At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
         * @summary Delete Async (POST)
         * @param {DeleteHistoricProcessInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoricProcessInstancesAsync(body?: DeleteHistoricProcessInstancesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).deleteHistoricProcessInstancesAsync(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes all variables of a process instance from the history by id.
         * @summary Delete Variable Instances
         * @param {string} id The id of the process instance for which all historic variables are to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoricVariableInstancesOfHistoricProcessInstance(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).deleteHistoricVariableInstancesOfHistoricProcessInstance(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.
         * @summary Get
         * @param {string} id The id of the historic process instance to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricProcessInstance(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HistoricProcessInstanceDto>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).getHistoricProcessInstance(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
         * @summary Get Duration Report
         * @param {string} reportType **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.
         * @param {string} periodUnit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.
         * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
         * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricProcessInstanceDurationReport(reportType: string, periodUnit: string, processDefinitionIdIn?: string, processDefinitionKeyIn?: string, startedBefore?: Date, startedAfter?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DurationReportResultDto>>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).getHistoricProcessInstanceDurationReport(reportType, periodUnit, processDefinitionIdIn, processDefinitionKeyIn, startedBefore, startedAfter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIds] Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionId] Filter by the process definition the instances run on.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionName] Filter by the name of the process definition the instances run on.
         * @param {string} [processDefinitionNameLike] Filter by process definition names that the parameter is a substring of.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processInstanceBusinessKey] Filter by process instance business key.
         * @param {string} [processInstanceBusinessKeyIn] Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [processInstanceBusinessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [finished] Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [unfinished] Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withIncidents] Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withRootIncidents] Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentStatus] Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityAfter] Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityBefore] Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobAfter] Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobBefore] Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [startedBy] Only include process instances that were started by the given user.
         * @param {string} [superProcessInstanceId] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstanceId] Restrict query to one process instance that has a sub process instance with the given id.
         * @param {string} [superCaseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstanceId] Restrict query to one process instance that has a sub case instance with the given id.
         * @param {string} [caseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [tenantIdIn] Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [withoutTenantId] Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [executedActivityIdIn] Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [activeActivityIdIn] Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [active] Restrict to instances that are active.
         * @param {boolean} [suspended] Restrict to instances that are suspended.
         * @param {boolean} [completed] Restrict to instances that are completed.
         * @param {boolean} [externallyTerminated] Restrict to instances that are externallyTerminated.
         * @param {boolean} [internallyTerminated] Restrict to instances that are internallyTerminated.
         * @param {string} [variables] Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricProcessInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, processInstanceId?: string, processInstanceIds?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, processDefinitionKeyNotIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, rootProcessInstances?: boolean, finished?: boolean, unfinished?: boolean, withIncidents?: boolean, withRootIncidents?: boolean, incidentType?: string, incidentStatus?: string, incidentMessage?: string, incidentMessageLike?: string, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, executedActivityAfter?: Date, executedActivityBefore?: Date, executedJobAfter?: Date, executedJobBefore?: Date, startedBy?: string, superProcessInstanceId?: string, subProcessInstanceId?: string, superCaseInstanceId?: string, subCaseInstanceId?: string, caseInstanceId?: string, tenantIdIn?: string, withoutTenantId?: boolean, executedActivityIdIn?: string, activeActivityIdIn?: string, active?: boolean, suspended?: boolean, completed?: boolean, externallyTerminated?: boolean, internallyTerminated?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricProcessInstanceDto>>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).getHistoricProcessInstances(sortBy, sortOrder, firstResult, maxResults, processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) method.
         * @summary Get List Count
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIds] Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionId] Filter by the process definition the instances run on.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionName] Filter by the name of the process definition the instances run on.
         * @param {string} [processDefinitionNameLike] Filter by process definition names that the parameter is a substring of.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processInstanceBusinessKey] Filter by process instance business key.
         * @param {string} [processInstanceBusinessKeyIn] Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [processInstanceBusinessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [finished] Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [unfinished] Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withIncidents] Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withRootIncidents] Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentStatus] Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityAfter] Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityBefore] Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobAfter] Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobBefore] Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [startedBy] Only include process instances that were started by the given user.
         * @param {string} [superProcessInstanceId] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstanceId] Restrict query to one process instance that has a sub process instance with the given id.
         * @param {string} [superCaseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstanceId] Restrict query to one process instance that has a sub case instance with the given id.
         * @param {string} [caseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [tenantIdIn] Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [withoutTenantId] Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [executedActivityIdIn] Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [activeActivityIdIn] Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [active] Restrict to instances that are active.
         * @param {boolean} [suspended] Restrict to instances that are suspended.
         * @param {boolean} [completed] Restrict to instances that are completed.
         * @param {boolean} [externallyTerminated] Restrict to instances that are externallyTerminated.
         * @param {boolean} [internallyTerminated] Restrict to instances that are internallyTerminated.
         * @param {string} [variables] Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricProcessInstancesCount(processInstanceId?: string, processInstanceIds?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, processDefinitionKeyNotIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, rootProcessInstances?: boolean, finished?: boolean, unfinished?: boolean, withIncidents?: boolean, withRootIncidents?: boolean, incidentType?: string, incidentStatus?: string, incidentMessage?: string, incidentMessageLike?: string, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, executedActivityAfter?: Date, executedActivityBefore?: Date, executedJobAfter?: Date, executedJobBefore?: Date, startedBy?: string, superProcessInstanceId?: string, subProcessInstanceId?: string, superCaseInstanceId?: string, subCaseInstanceId?: string, caseInstanceId?: string, tenantIdIn?: string, withoutTenantId?: boolean, executedActivityIdIn?: string, activeActivityIdIn?: string, active?: boolean, suspended?: boolean, completed?: boolean, externallyTerminated?: boolean, internallyTerminated?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).getHistoricProcessInstancesCount(processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.
         * @summary Get List (POST)
         * @param {HistoricProcessInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricProcessInstances(body?: HistoricProcessInstanceQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricProcessInstanceDto>>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).queryHistoricProcessInstances(body, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/post-process-instance-query-count/) method.
         * @summary Get List Count (POST)
         * @param {HistoricProcessInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricProcessInstancesCount(body?: HistoricProcessInstanceQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).queryHistoricProcessInstancesCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the removal time to multiple historic process instances asynchronously (batch).  At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
         * @summary Set Removal Time Async (POST)
         * @param {SetRemovalTimeToHistoricProcessInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRemovalTimeAsync(body?: SetRemovalTimeToHistoricProcessInstancesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await HistoricProcessInstanceApiAxiosParamCreator(configuration).setRemovalTimeAsync(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoricProcessInstanceApi - factory interface
 * @export
 */
export const HistoricProcessInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a process instance from the history by id.
         * @summary Delete
         * @param {string} id The id of the historic process instance to be deleted.
         * @param {boolean} [failIfNotExists] If set to &#x60;false&#x60;, the request will still be successful if the process id is not found.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoricProcessInstance(id: string, failIfNotExists?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return HistoricProcessInstanceApiFp(configuration).deleteHistoricProcessInstance(id, failIfNotExists, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple historic process instances asynchronously (batch). At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
         * @summary Delete Async (POST)
         * @param {DeleteHistoricProcessInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoricProcessInstancesAsync(body?: DeleteHistoricProcessInstancesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return HistoricProcessInstanceApiFp(configuration).deleteHistoricProcessInstancesAsync(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes all variables of a process instance from the history by id.
         * @summary Delete Variable Instances
         * @param {string} id The id of the process instance for which all historic variables are to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoricVariableInstancesOfHistoricProcessInstance(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return HistoricProcessInstanceApiFp(configuration).deleteHistoricVariableInstancesOfHistoricProcessInstance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.
         * @summary Get
         * @param {string} id The id of the historic process instance to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricProcessInstance(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HistoricProcessInstanceDto>> {
            return HistoricProcessInstanceApiFp(configuration).getHistoricProcessInstance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
         * @summary Get Duration Report
         * @param {string} reportType **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.
         * @param {string} periodUnit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.
         * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
         * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricProcessInstanceDurationReport(reportType: string, periodUnit: string, processDefinitionIdIn?: string, processDefinitionKeyIn?: string, startedBefore?: Date, startedAfter?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DurationReportResultDto>>> {
            return HistoricProcessInstanceApiFp(configuration).getHistoricProcessInstanceDurationReport(reportType, periodUnit, processDefinitionIdIn, processDefinitionKeyIn, startedBefore, startedAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIds] Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionId] Filter by the process definition the instances run on.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionName] Filter by the name of the process definition the instances run on.
         * @param {string} [processDefinitionNameLike] Filter by process definition names that the parameter is a substring of.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processInstanceBusinessKey] Filter by process instance business key.
         * @param {string} [processInstanceBusinessKeyIn] Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [processInstanceBusinessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [finished] Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [unfinished] Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withIncidents] Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withRootIncidents] Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentStatus] Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityAfter] Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityBefore] Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobAfter] Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobBefore] Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [startedBy] Only include process instances that were started by the given user.
         * @param {string} [superProcessInstanceId] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstanceId] Restrict query to one process instance that has a sub process instance with the given id.
         * @param {string} [superCaseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstanceId] Restrict query to one process instance that has a sub case instance with the given id.
         * @param {string} [caseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [tenantIdIn] Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [withoutTenantId] Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [executedActivityIdIn] Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [activeActivityIdIn] Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [active] Restrict to instances that are active.
         * @param {boolean} [suspended] Restrict to instances that are suspended.
         * @param {boolean} [completed] Restrict to instances that are completed.
         * @param {boolean} [externallyTerminated] Restrict to instances that are externallyTerminated.
         * @param {boolean} [internallyTerminated] Restrict to instances that are internallyTerminated.
         * @param {string} [variables] Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricProcessInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, processInstanceId?: string, processInstanceIds?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, processDefinitionKeyNotIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, rootProcessInstances?: boolean, finished?: boolean, unfinished?: boolean, withIncidents?: boolean, withRootIncidents?: boolean, incidentType?: string, incidentStatus?: string, incidentMessage?: string, incidentMessageLike?: string, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, executedActivityAfter?: Date, executedActivityBefore?: Date, executedJobAfter?: Date, executedJobBefore?: Date, startedBy?: string, superProcessInstanceId?: string, subProcessInstanceId?: string, superCaseInstanceId?: string, subCaseInstanceId?: string, caseInstanceId?: string, tenantIdIn?: string, withoutTenantId?: boolean, executedActivityIdIn?: string, activeActivityIdIn?: string, active?: boolean, suspended?: boolean, completed?: boolean, externallyTerminated?: boolean, internallyTerminated?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricProcessInstanceDto>>> {
            return HistoricProcessInstanceApiFp(configuration).getHistoricProcessInstances(sortBy, sortOrder, firstResult, maxResults, processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) method.
         * @summary Get List Count
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIds] Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionId] Filter by the process definition the instances run on.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processDefinitionName] Filter by the name of the process definition the instances run on.
         * @param {string} [processDefinitionNameLike] Filter by process definition names that the parameter is a substring of.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
         * @param {string} [processInstanceBusinessKey] Filter by process instance business key.
         * @param {string} [processInstanceBusinessKeyIn] Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [processInstanceBusinessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [finished] Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [unfinished] Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withIncidents] Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withRootIncidents] Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentStatus] Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityAfter] Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedActivityBefore] Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobAfter] Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [executedJobBefore] Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [startedBy] Only include process instances that were started by the given user.
         * @param {string} [superProcessInstanceId] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstanceId] Restrict query to one process instance that has a sub process instance with the given id.
         * @param {string} [superCaseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstanceId] Restrict query to one process instance that has a sub case instance with the given id.
         * @param {string} [caseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [tenantIdIn] Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [withoutTenantId] Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [executedActivityIdIn] Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {string} [activeActivityIdIn] Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
         * @param {boolean} [active] Restrict to instances that are active.
         * @param {boolean} [suspended] Restrict to instances that are suspended.
         * @param {boolean} [completed] Restrict to instances that are completed.
         * @param {boolean} [externallyTerminated] Restrict to instances that are externallyTerminated.
         * @param {boolean} [internallyTerminated] Restrict to instances that are internallyTerminated.
         * @param {string} [variables] Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricProcessInstancesCount(processInstanceId?: string, processInstanceIds?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, processDefinitionKeyNotIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, rootProcessInstances?: boolean, finished?: boolean, unfinished?: boolean, withIncidents?: boolean, withRootIncidents?: boolean, incidentType?: string, incidentStatus?: string, incidentMessage?: string, incidentMessageLike?: string, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, executedActivityAfter?: Date, executedActivityBefore?: Date, executedJobAfter?: Date, executedJobBefore?: Date, startedBy?: string, superProcessInstanceId?: string, subProcessInstanceId?: string, superCaseInstanceId?: string, subCaseInstanceId?: string, caseInstanceId?: string, tenantIdIn?: string, withoutTenantId?: boolean, executedActivityIdIn?: string, activeActivityIdIn?: string, active?: boolean, suspended?: boolean, completed?: boolean, externallyTerminated?: boolean, internallyTerminated?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricProcessInstanceApiFp(configuration).getHistoricProcessInstancesCount(processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.
         * @summary Get List (POST)
         * @param {HistoricProcessInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricProcessInstances(body?: HistoricProcessInstanceQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricProcessInstanceDto>>> {
            return HistoricProcessInstanceApiFp(configuration).queryHistoricProcessInstances(body, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/post-process-instance-query-count/) method.
         * @summary Get List Count (POST)
         * @param {HistoricProcessInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricProcessInstancesCount(body?: HistoricProcessInstanceQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricProcessInstanceApiFp(configuration).queryHistoricProcessInstancesCount(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the removal time to multiple historic process instances asynchronously (batch).  At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
         * @summary Set Removal Time Async (POST)
         * @param {SetRemovalTimeToHistoricProcessInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRemovalTimeAsync(body?: SetRemovalTimeToHistoricProcessInstancesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return HistoricProcessInstanceApiFp(configuration).setRemovalTimeAsync(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricProcessInstanceApi - object-oriented interface
 * @export
 * @class HistoricProcessInstanceApi
 * @extends {BaseAPI}
 */
export class HistoricProcessInstanceApi extends BaseAPI {
    /**
     * Deletes a process instance from the history by id.
     * @summary Delete
     * @param {string} id The id of the historic process instance to be deleted.
     * @param {boolean} [failIfNotExists] If set to &#x60;false&#x60;, the request will still be successful if the process id is not found.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async deleteHistoricProcessInstance(id: string, failIfNotExists?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return HistoricProcessInstanceApiFp(this.configuration).deleteHistoricProcessInstance(id, failIfNotExists, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple historic process instances asynchronously (batch). At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
     * @summary Delete Async (POST)
     * @param {DeleteHistoricProcessInstancesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async deleteHistoricProcessInstancesAsync(body?: DeleteHistoricProcessInstancesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return HistoricProcessInstanceApiFp(this.configuration).deleteHistoricProcessInstancesAsync(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes all variables of a process instance from the history by id.
     * @summary Delete Variable Instances
     * @param {string} id The id of the process instance for which all historic variables are to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async deleteHistoricVariableInstancesOfHistoricProcessInstance(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return HistoricProcessInstanceApiFp(this.configuration).deleteHistoricVariableInstancesOfHistoricProcessInstance(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.
     * @summary Get
     * @param {string} id The id of the historic process instance to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async getHistoricProcessInstance(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<HistoricProcessInstanceDto>> {
        return HistoricProcessInstanceApiFp(this.configuration).getHistoricProcessInstance(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
     * @summary Get Duration Report
     * @param {string} reportType **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.
     * @param {string} periodUnit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.
     * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
     * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
     * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async getHistoricProcessInstanceDurationReport(reportType: string, periodUnit: string, processDefinitionIdIn?: string, processDefinitionKeyIn?: string, startedBefore?: Date, startedAfter?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DurationReportResultDto>>> {
        return HistoricProcessInstanceApiFp(this.configuration).getHistoricProcessInstanceDurationReport(reportType, periodUnit, processDefinitionIdIn, processDefinitionKeyIn, startedBefore, startedAfter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query-count/) method.
     * @summary Get List
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processInstanceIds] Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
     * @param {string} [processDefinitionId] Filter by the process definition the instances run on.
     * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
     * @param {string} [processDefinitionKeyIn] Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
     * @param {string} [processDefinitionName] Filter by the name of the process definition the instances run on.
     * @param {string} [processDefinitionNameLike] Filter by process definition names that the parameter is a substring of.
     * @param {string} [processDefinitionKeyNotIn] Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
     * @param {string} [processInstanceBusinessKey] Filter by process instance business key.
     * @param {string} [processInstanceBusinessKeyIn] Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
     * @param {string} [processInstanceBusinessKeyLike] Filter by process instance business key that the parameter is a substring of.
     * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
     * @param {boolean} [finished] Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [unfinished] Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [withIncidents] Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [withRootIncidents] Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {string} [incidentStatus] Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
     * @param {string} [incidentMessage] Filter by the incident message. Exact match.
     * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
     * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [executedActivityAfter] Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [executedActivityBefore] Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [executedJobAfter] Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [executedJobBefore] Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [startedBy] Only include process instances that were started by the given user.
     * @param {string} [superProcessInstanceId] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {string} [subProcessInstanceId] Restrict query to one process instance that has a sub process instance with the given id.
     * @param {string} [superCaseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {string} [subCaseInstanceId] Restrict query to one process instance that has a sub case instance with the given id.
     * @param {string} [caseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {string} [tenantIdIn] Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
     * @param {boolean} [withoutTenantId] Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [executedActivityIdIn] Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
     * @param {string} [activeActivityIdIn] Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
     * @param {boolean} [active] Restrict to instances that are active.
     * @param {boolean} [suspended] Restrict to instances that are suspended.
     * @param {boolean} [completed] Restrict to instances that are completed.
     * @param {boolean} [externallyTerminated] Restrict to instances that are externallyTerminated.
     * @param {boolean} [internallyTerminated] Restrict to instances that are internallyTerminated.
     * @param {string} [variables] Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
     * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
     * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async getHistoricProcessInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, processInstanceId?: string, processInstanceIds?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, processDefinitionKeyNotIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, rootProcessInstances?: boolean, finished?: boolean, unfinished?: boolean, withIncidents?: boolean, withRootIncidents?: boolean, incidentType?: string, incidentStatus?: string, incidentMessage?: string, incidentMessageLike?: string, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, executedActivityAfter?: Date, executedActivityBefore?: Date, executedJobAfter?: Date, executedJobBefore?: Date, startedBy?: string, superProcessInstanceId?: string, subProcessInstanceId?: string, superCaseInstanceId?: string, subCaseInstanceId?: string, caseInstanceId?: string, tenantIdIn?: string, withoutTenantId?: boolean, executedActivityIdIn?: string, activeActivityIdIn?: string, active?: boolean, suspended?: boolean, completed?: boolean, externallyTerminated?: boolean, internallyTerminated?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricProcessInstanceDto>>> {
        return HistoricProcessInstanceApiFp(this.configuration).getHistoricProcessInstances(sortBy, sortOrder, firstResult, maxResults, processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) method.
     * @summary Get List Count
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processInstanceIds] Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
     * @param {string} [processDefinitionId] Filter by the process definition the instances run on.
     * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
     * @param {string} [processDefinitionKeyIn] Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
     * @param {string} [processDefinitionName] Filter by the name of the process definition the instances run on.
     * @param {string} [processDefinitionNameLike] Filter by process definition names that the parameter is a substring of.
     * @param {string} [processDefinitionKeyNotIn] Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
     * @param {string} [processInstanceBusinessKey] Filter by process instance business key.
     * @param {string} [processInstanceBusinessKeyIn] Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
     * @param {string} [processInstanceBusinessKeyLike] Filter by process instance business key that the parameter is a substring of.
     * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
     * @param {boolean} [finished] Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [unfinished] Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [withIncidents] Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [withRootIncidents] Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {string} [incidentStatus] Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
     * @param {string} [incidentMessage] Filter by the incident message. Exact match.
     * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
     * @param {Date} [startedBefore] Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedBefore] Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedAfter] Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [executedActivityAfter] Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [executedActivityBefore] Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [executedJobAfter] Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [executedJobBefore] Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [startedBy] Only include process instances that were started by the given user.
     * @param {string} [superProcessInstanceId] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {string} [subProcessInstanceId] Restrict query to one process instance that has a sub process instance with the given id.
     * @param {string} [superCaseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {string} [subCaseInstanceId] Restrict query to one process instance that has a sub case instance with the given id.
     * @param {string} [caseInstanceId] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {string} [tenantIdIn] Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
     * @param {boolean} [withoutTenantId] Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [executedActivityIdIn] Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
     * @param {string} [activeActivityIdIn] Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
     * @param {boolean} [active] Restrict to instances that are active.
     * @param {boolean} [suspended] Restrict to instances that are suspended.
     * @param {boolean} [completed] Restrict to instances that are completed.
     * @param {boolean} [externallyTerminated] Restrict to instances that are externallyTerminated.
     * @param {boolean} [internallyTerminated] Restrict to instances that are internallyTerminated.
     * @param {string} [variables] Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
     * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
     * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async getHistoricProcessInstancesCount(processInstanceId?: string, processInstanceIds?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionName?: string, processDefinitionNameLike?: string, processDefinitionKeyNotIn?: string, processInstanceBusinessKey?: string, processInstanceBusinessKeyIn?: string, processInstanceBusinessKeyLike?: string, rootProcessInstances?: boolean, finished?: boolean, unfinished?: boolean, withIncidents?: boolean, withRootIncidents?: boolean, incidentType?: string, incidentStatus?: string, incidentMessage?: string, incidentMessageLike?: string, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, executedActivityAfter?: Date, executedActivityBefore?: Date, executedJobAfter?: Date, executedJobBefore?: Date, startedBy?: string, superProcessInstanceId?: string, subProcessInstanceId?: string, superCaseInstanceId?: string, subCaseInstanceId?: string, caseInstanceId?: string, tenantIdIn?: string, withoutTenantId?: boolean, executedActivityIdIn?: string, activeActivityIdIn?: string, active?: boolean, suspended?: boolean, completed?: boolean, externallyTerminated?: boolean, internallyTerminated?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricProcessInstanceApiFp(this.configuration).getHistoricProcessInstancesCount(processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.
     * @summary Get List (POST)
     * @param {HistoricProcessInstanceQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async queryHistoricProcessInstances(body?: HistoricProcessInstanceQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricProcessInstanceDto>>> {
        return HistoricProcessInstanceApiFp(this.configuration).queryHistoricProcessInstances(body, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-instance/post-process-instance-query-count/) method.
     * @summary Get List Count (POST)
     * @param {HistoricProcessInstanceQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async queryHistoricProcessInstancesCount(body?: HistoricProcessInstanceQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricProcessInstanceApiFp(this.configuration).queryHistoricProcessInstancesCount(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the removal time to multiple historic process instances asynchronously (batch).  At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
     * @summary Set Removal Time Async (POST)
     * @param {SetRemovalTimeToHistoricProcessInstancesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessInstanceApi
     */
    public async setRemovalTimeAsync(body?: SetRemovalTimeToHistoricProcessInstancesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return HistoricProcessInstanceApiFp(this.configuration).setRemovalTimeAsync(body, options).then((request) => request(this.axios, this.basePath));
    }
}

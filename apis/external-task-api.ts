/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BatchDto } from '../models';
import { CompleteExternalTaskDto } from '../models';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { ExtendLockOnExternalTaskDto } from '../models';
import { ExternalTaskBpmnError } from '../models';
import { ExternalTaskDto } from '../models';
import { ExternalTaskFailureDto } from '../models';
import { ExternalTaskQueryDto } from '../models';
import { FetchExternalTasksDto } from '../models';
import { LockExternalTaskDto } from '../models';
import { LockedExternalTaskDto } from '../models';
import { PriorityDto } from '../models';
import { RetriesDto } from '../models';
import { SetRetriesForExternalTasksDto } from '../models';
/**
 * ExternalTaskApi - axios parameter creator
 * @export
 */
export const ExternalTaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Completes an external task by id and updates process variables.
         * @summary Complete
         * @param {string} id The id of the task to complete.
         * @param {CompleteExternalTaskDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeExternalTaskResource: async (id: string, body?: CompleteExternalTaskDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling completeExternalTaskResource.');
            }
            const localVarPath = `/external-task/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Extends the timeout of the lock by a given amount of time.
         * @summary Extend Lock
         * @param {string} id The id of the external task.
         * @param {ExtendLockOnExternalTaskDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendLock: async (id: string, body?: ExtendLockOnExternalTaskDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling extendLock.');
            }
            const localVarPath = `/external-task/{id}/extendLock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
         * @summary Fetch and Lock
         * @param {FetchExternalTasksDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAndLock: async (body?: FetchExternalTasksDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-task/fetchAndLock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
         * @summary Get
         * @param {string} id The id of the external task to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalTask: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getExternalTask.');
            }
            const localVarPath = `/external-task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the error details in the context of a running external task by id.
         * @summary Get Error Details
         * @param {string} id The id of the external task for which the error details should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalTaskErrorDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getExternalTaskErrorDetails.');
            }
            const localVarPath = `/external-task/{id}/errorDetails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query-count/) method.
         * @summary Get List
         * @param {string} [externalTaskId] Filter by an external task&#x27;s id.
         * @param {string} [externalTaskIdIn] Filter by the comma-separated list of external task ids.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {boolean} [locked] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [notLocked] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [noRetriesLeft] Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {Date} [lockExpirationAfter] Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [lockExpirationBefore] Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Filter by the id of the activity that an external task is created for.
         * @param {string} [activityIdIn] Filter by the comma-separated list of ids of the activities that an external task is created for.
         * @param {string} [executionId] Filter by the id of the execution that an external task belongs to.
         * @param {string} [processInstanceId] Filter by the id of the process instance that an external task belongs to.
         * @param {string} [processInstanceIdIn] Filter by a comma-separated list of process instance ids that an external task may belong to.
         * @param {string} [processDefinitionId] Filter by the id of the process definition that an external task belongs to.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
         * @param {boolean} [active] Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [suspended] Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {number} [priorityHigherThanOrEquals] Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityLowerThanOrEquals] Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalTasks: async (externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (externalTaskId !== undefined) {
                localVarQueryParameter['externalTaskId'] = externalTaskId;
            }

            if (externalTaskIdIn !== undefined) {
                localVarQueryParameter['externalTaskIdIn'] = externalTaskIdIn;
            }

            if (topicName !== undefined) {
                localVarQueryParameter['topicName'] = topicName;
            }

            if (workerId !== undefined) {
                localVarQueryParameter['workerId'] = workerId;
            }

            if (locked !== undefined) {
                localVarQueryParameter['locked'] = locked;
            }

            if (notLocked !== undefined) {
                localVarQueryParameter['notLocked'] = notLocked;
            }

            if (withRetriesLeft !== undefined) {
                localVarQueryParameter['withRetriesLeft'] = withRetriesLeft;
            }

            if (noRetriesLeft !== undefined) {
                localVarQueryParameter['noRetriesLeft'] = noRetriesLeft;
            }

            if (lockExpirationAfter !== undefined) {
                localVarQueryParameter['lockExpirationAfter'] = (lockExpirationAfter as any instanceof Date) ?
                    (lockExpirationAfter as any).toISOString() :
                    lockExpirationAfter;
            }

            if (lockExpirationBefore !== undefined) {
                localVarQueryParameter['lockExpirationBefore'] = (lockExpirationBefore as any instanceof Date) ?
                    (lockExpirationBefore as any).toISOString() :
                    lockExpirationBefore;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processInstanceIdIn !== undefined) {
                localVarQueryParameter['processInstanceIdIn'] = processInstanceIdIn;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (priorityHigherThanOrEquals !== undefined) {
                localVarQueryParameter['priorityHigherThanOrEquals'] = priorityHigherThanOrEquals;
            }

            if (priorityLowerThanOrEquals !== undefined) {
                localVarQueryParameter['priorityLowerThanOrEquals'] = priorityLowerThanOrEquals;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method.
         * @summary Get List Count
         * @param {string} [externalTaskId] Filter by an external task&#x27;s id.
         * @param {string} [externalTaskIdIn] Filter by the comma-separated list of external task ids.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {boolean} [locked] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [notLocked] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [noRetriesLeft] Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {Date} [lockExpirationAfter] Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [lockExpirationBefore] Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Filter by the id of the activity that an external task is created for.
         * @param {string} [activityIdIn] Filter by the comma-separated list of ids of the activities that an external task is created for.
         * @param {string} [executionId] Filter by the id of the execution that an external task belongs to.
         * @param {string} [processInstanceId] Filter by the id of the process instance that an external task belongs to.
         * @param {string} [processInstanceIdIn] Filter by a comma-separated list of process instance ids that an external task may belong to.
         * @param {string} [processDefinitionId] Filter by the id of the process definition that an external task belongs to.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
         * @param {boolean} [active] Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [suspended] Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {number} [priorityHigherThanOrEquals] Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityLowerThanOrEquals] Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalTasksCount: async (externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-task/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (externalTaskId !== undefined) {
                localVarQueryParameter['externalTaskId'] = externalTaskId;
            }

            if (externalTaskIdIn !== undefined) {
                localVarQueryParameter['externalTaskIdIn'] = externalTaskIdIn;
            }

            if (topicName !== undefined) {
                localVarQueryParameter['topicName'] = topicName;
            }

            if (workerId !== undefined) {
                localVarQueryParameter['workerId'] = workerId;
            }

            if (locked !== undefined) {
                localVarQueryParameter['locked'] = locked;
            }

            if (notLocked !== undefined) {
                localVarQueryParameter['notLocked'] = notLocked;
            }

            if (withRetriesLeft !== undefined) {
                localVarQueryParameter['withRetriesLeft'] = withRetriesLeft;
            }

            if (noRetriesLeft !== undefined) {
                localVarQueryParameter['noRetriesLeft'] = noRetriesLeft;
            }

            if (lockExpirationAfter !== undefined) {
                localVarQueryParameter['lockExpirationAfter'] = (lockExpirationAfter as any instanceof Date) ?
                    (lockExpirationAfter as any).toISOString() :
                    lockExpirationAfter;
            }

            if (lockExpirationBefore !== undefined) {
                localVarQueryParameter['lockExpirationBefore'] = (lockExpirationBefore as any instanceof Date) ?
                    (lockExpirationBefore as any).toISOString() :
                    lockExpirationBefore;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processInstanceIdIn !== undefined) {
                localVarQueryParameter['processInstanceIdIn'] = processInstanceIdIn;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (priorityHigherThanOrEquals !== undefined) {
                localVarQueryParameter['priorityHigherThanOrEquals'] = priorityHigherThanOrEquals;
            }

            if (priorityLowerThanOrEquals !== undefined) {
                localVarQueryParameter['priorityLowerThanOrEquals'] = priorityLowerThanOrEquals;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
         * @summary Get External Task Topic Names
         * @param {boolean} [withLockedTasks] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withUnlockedTasks] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNames: async (withLockedTasks?: boolean, withUnlockedTasks?: boolean, withRetriesLeft?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-task/topic-names`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withLockedTasks !== undefined) {
                localVarQueryParameter['withLockedTasks'] = withLockedTasks;
            }

            if (withUnlockedTasks !== undefined) {
                localVarQueryParameter['withUnlockedTasks'] = withUnlockedTasks;
            }

            if (withRetriesLeft !== undefined) {
                localVarQueryParameter['withRetriesLeft'] = withRetriesLeft;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
         * @summary Handle BPMN Error
         * @param {string} id The id of the external task in which context a BPMN error is reported.
         * @param {ExternalTaskBpmnError} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleExternalTaskBpmnError: async (id: string, body?: ExternalTaskBpmnError, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling handleExternalTaskBpmnError.');
            }
            const localVarPath = `/external-task/{id}/bpmnError`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
         * @summary Handle Failure
         * @param {string} id The id of the external task to report a failure for.
         * @param {ExternalTaskFailureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleFailure: async (id: string, body?: ExternalTaskFailureDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling handleFailure.');
            }
            const localVarPath = `/external-task/{id}/failure`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lock an external task by a given id for a specified worker and amount of time.
         * @param {string} id The id of the external task.
         * @param {LockExternalTaskDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lock: async (id: string, body?: LockExternalTaskDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling lock.');
            }
            const localVarPath = `/external-task/{id}/lock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
         * @summary Get List (POST)
         * @param {ExternalTaskQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryExternalTasks: async (body?: ExternalTaskQueryDto, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.18/reference/rest/external-task/post-query/) method.
         * @summary Get List Count (POST)
         * @param {ExternalTaskQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryExternalTasksCount: async (body?: ExternalTaskQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-task/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the priority of an existing external task by id. The default value of a priority is 0.
         * @summary Set Priority
         * @param {string} id The id of the external task to set the priority for.
         * @param {PriorityDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExternalTaskResourcePriority: async (id: string, body?: PriorityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setExternalTaskResourcePriority.');
            }
            const localVarPath = `/external-task/{id}/priority`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
         * @summary Set Retries
         * @param {string} id The id of the external task to set the number of retries for.
         * @param {RetriesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExternalTaskResourceRetries: async (id: string, body?: RetriesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setExternalTaskResourceRetries.');
            }
            const localVarPath = `/external-task/{id}/retries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
         * @summary Set Retries Sync
         * @param {SetRetriesForExternalTasksDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExternalTaskRetries: async (body?: SetRetriesForExternalTasksDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-task/retries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
         * @summary Set Retries Async
         * @param {SetRetriesForExternalTasksDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExternalTaskRetriesAsyncOperation: async (body?: SetRetriesForExternalTasksDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-task/retries-async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Unlocks an external task by id. Clears the task's lock expiration time and worker id.
         * @summary Unlock
         * @param {string} id The id of the external task to unlock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlock: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling unlock.');
            }
            const localVarPath = `/external-task/{id}/unlock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalTaskApi - functional programming interface
 * @export
 */
export const ExternalTaskApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Completes an external task by id and updates process variables.
         * @summary Complete
         * @param {string} id The id of the task to complete.
         * @param {CompleteExternalTaskDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeExternalTaskResource(id: string, body?: CompleteExternalTaskDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).completeExternalTaskResource(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Extends the timeout of the lock by a given amount of time.
         * @summary Extend Lock
         * @param {string} id The id of the external task.
         * @param {ExtendLockOnExternalTaskDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extendLock(id: string, body?: ExtendLockOnExternalTaskDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).extendLock(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
         * @summary Fetch and Lock
         * @param {FetchExternalTasksDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAndLock(body?: FetchExternalTasksDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<LockedExternalTaskDto>>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).fetchAndLock(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
         * @summary Get
         * @param {string} id The id of the external task to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalTask(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExternalTaskDto>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).getExternalTask(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the error details in the context of a running external task by id.
         * @summary Get Error Details
         * @param {string} id The id of the external task for which the error details should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalTaskErrorDetails(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).getExternalTaskErrorDetails(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query-count/) method.
         * @summary Get List
         * @param {string} [externalTaskId] Filter by an external task&#x27;s id.
         * @param {string} [externalTaskIdIn] Filter by the comma-separated list of external task ids.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {boolean} [locked] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [notLocked] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [noRetriesLeft] Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {Date} [lockExpirationAfter] Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [lockExpirationBefore] Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Filter by the id of the activity that an external task is created for.
         * @param {string} [activityIdIn] Filter by the comma-separated list of ids of the activities that an external task is created for.
         * @param {string} [executionId] Filter by the id of the execution that an external task belongs to.
         * @param {string} [processInstanceId] Filter by the id of the process instance that an external task belongs to.
         * @param {string} [processInstanceIdIn] Filter by a comma-separated list of process instance ids that an external task may belong to.
         * @param {string} [processDefinitionId] Filter by the id of the process definition that an external task belongs to.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
         * @param {boolean} [active] Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [suspended] Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {number} [priorityHigherThanOrEquals] Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityLowerThanOrEquals] Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalTasks(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ExternalTaskDto>>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).getExternalTasks(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, sortBy, sortOrder, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method.
         * @summary Get List Count
         * @param {string} [externalTaskId] Filter by an external task&#x27;s id.
         * @param {string} [externalTaskIdIn] Filter by the comma-separated list of external task ids.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {boolean} [locked] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [notLocked] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [noRetriesLeft] Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {Date} [lockExpirationAfter] Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [lockExpirationBefore] Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Filter by the id of the activity that an external task is created for.
         * @param {string} [activityIdIn] Filter by the comma-separated list of ids of the activities that an external task is created for.
         * @param {string} [executionId] Filter by the id of the execution that an external task belongs to.
         * @param {string} [processInstanceId] Filter by the id of the process instance that an external task belongs to.
         * @param {string} [processInstanceIdIn] Filter by a comma-separated list of process instance ids that an external task may belong to.
         * @param {string} [processDefinitionId] Filter by the id of the process definition that an external task belongs to.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
         * @param {boolean} [active] Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [suspended] Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {number} [priorityHigherThanOrEquals] Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityLowerThanOrEquals] Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalTasksCount(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).getExternalTasksCount(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
         * @summary Get External Task Topic Names
         * @param {boolean} [withLockedTasks] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withUnlockedTasks] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicNames(withLockedTasks?: boolean, withUnlockedTasks?: boolean, withRetriesLeft?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).getTopicNames(withLockedTasks, withUnlockedTasks, withRetriesLeft, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
         * @summary Handle BPMN Error
         * @param {string} id The id of the external task in which context a BPMN error is reported.
         * @param {ExternalTaskBpmnError} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleExternalTaskBpmnError(id: string, body?: ExternalTaskBpmnError, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).handleExternalTaskBpmnError(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
         * @summary Handle Failure
         * @param {string} id The id of the external task to report a failure for.
         * @param {ExternalTaskFailureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleFailure(id: string, body?: ExternalTaskFailureDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).handleFailure(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lock an external task by a given id for a specified worker and amount of time.
         * @param {string} id The id of the external task.
         * @param {LockExternalTaskDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lock(id: string, body?: LockExternalTaskDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).lock(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
         * @summary Get List (POST)
         * @param {ExternalTaskQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryExternalTasks(body?: ExternalTaskQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ExternalTaskDto>>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).queryExternalTasks(body, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.18/reference/rest/external-task/post-query/) method.
         * @summary Get List Count (POST)
         * @param {ExternalTaskQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryExternalTasksCount(body?: ExternalTaskQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).queryExternalTasksCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the priority of an existing external task by id. The default value of a priority is 0.
         * @summary Set Priority
         * @param {string} id The id of the external task to set the priority for.
         * @param {PriorityDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExternalTaskResourcePriority(id: string, body?: PriorityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).setExternalTaskResourcePriority(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
         * @summary Set Retries
         * @param {string} id The id of the external task to set the number of retries for.
         * @param {RetriesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExternalTaskResourceRetries(id: string, body?: RetriesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).setExternalTaskResourceRetries(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
         * @summary Set Retries Sync
         * @param {SetRetriesForExternalTasksDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExternalTaskRetries(body?: SetRetriesForExternalTasksDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).setExternalTaskRetries(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
         * @summary Set Retries Async
         * @param {SetRetriesForExternalTasksDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExternalTaskRetriesAsyncOperation(body?: SetRetriesForExternalTasksDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).setExternalTaskRetriesAsyncOperation(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Unlocks an external task by id. Clears the task's lock expiration time and worker id.
         * @summary Unlock
         * @param {string} id The id of the external task to unlock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlock(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalTaskApiAxiosParamCreator(configuration).unlock(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ExternalTaskApi - factory interface
 * @export
 */
export const ExternalTaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Completes an external task by id and updates process variables.
         * @summary Complete
         * @param {string} id The id of the task to complete.
         * @param {CompleteExternalTaskDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeExternalTaskResource(id: string, body?: CompleteExternalTaskDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalTaskApiFp(configuration).completeExternalTaskResource(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Extends the timeout of the lock by a given amount of time.
         * @summary Extend Lock
         * @param {string} id The id of the external task.
         * @param {ExtendLockOnExternalTaskDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extendLock(id: string, body?: ExtendLockOnExternalTaskDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalTaskApiFp(configuration).extendLock(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
         * @summary Fetch and Lock
         * @param {FetchExternalTasksDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAndLock(body?: FetchExternalTasksDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<LockedExternalTaskDto>>> {
            return ExternalTaskApiFp(configuration).fetchAndLock(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
         * @summary Get
         * @param {string} id The id of the external task to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalTask(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ExternalTaskDto>> {
            return ExternalTaskApiFp(configuration).getExternalTask(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the error details in the context of a running external task by id.
         * @summary Get Error Details
         * @param {string} id The id of the external task for which the error details should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalTaskErrorDetails(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ExternalTaskApiFp(configuration).getExternalTaskErrorDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query-count/) method.
         * @summary Get List
         * @param {string} [externalTaskId] Filter by an external task&#x27;s id.
         * @param {string} [externalTaskIdIn] Filter by the comma-separated list of external task ids.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {boolean} [locked] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [notLocked] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [noRetriesLeft] Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {Date} [lockExpirationAfter] Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [lockExpirationBefore] Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Filter by the id of the activity that an external task is created for.
         * @param {string} [activityIdIn] Filter by the comma-separated list of ids of the activities that an external task is created for.
         * @param {string} [executionId] Filter by the id of the execution that an external task belongs to.
         * @param {string} [processInstanceId] Filter by the id of the process instance that an external task belongs to.
         * @param {string} [processInstanceIdIn] Filter by a comma-separated list of process instance ids that an external task may belong to.
         * @param {string} [processDefinitionId] Filter by the id of the process definition that an external task belongs to.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
         * @param {boolean} [active] Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [suspended] Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {number} [priorityHigherThanOrEquals] Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityLowerThanOrEquals] Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalTasks(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ExternalTaskDto>>> {
            return ExternalTaskApiFp(configuration).getExternalTasks(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method.
         * @summary Get List Count
         * @param {string} [externalTaskId] Filter by an external task&#x27;s id.
         * @param {string} [externalTaskIdIn] Filter by the comma-separated list of external task ids.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {boolean} [locked] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [notLocked] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [noRetriesLeft] Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {Date} [lockExpirationAfter] Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [lockExpirationBefore] Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Filter by the id of the activity that an external task is created for.
         * @param {string} [activityIdIn] Filter by the comma-separated list of ids of the activities that an external task is created for.
         * @param {string} [executionId] Filter by the id of the execution that an external task belongs to.
         * @param {string} [processInstanceId] Filter by the id of the process instance that an external task belongs to.
         * @param {string} [processInstanceIdIn] Filter by a comma-separated list of process instance ids that an external task may belong to.
         * @param {string} [processDefinitionId] Filter by the id of the process definition that an external task belongs to.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
         * @param {boolean} [active] Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [suspended] Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {number} [priorityHigherThanOrEquals] Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityLowerThanOrEquals] Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalTasksCount(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return ExternalTaskApiFp(configuration).getExternalTasksCount(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
         * @summary Get External Task Topic Names
         * @param {boolean} [withLockedTasks] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withUnlockedTasks] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicNames(withLockedTasks?: boolean, withUnlockedTasks?: boolean, withRetriesLeft?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return ExternalTaskApiFp(configuration).getTopicNames(withLockedTasks, withUnlockedTasks, withRetriesLeft, options).then((request) => request(axios, basePath));
        },
        /**
         * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
         * @summary Handle BPMN Error
         * @param {string} id The id of the external task in which context a BPMN error is reported.
         * @param {ExternalTaskBpmnError} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleExternalTaskBpmnError(id: string, body?: ExternalTaskBpmnError, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalTaskApiFp(configuration).handleExternalTaskBpmnError(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
         * @summary Handle Failure
         * @param {string} id The id of the external task to report a failure for.
         * @param {ExternalTaskFailureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleFailure(id: string, body?: ExternalTaskFailureDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalTaskApiFp(configuration).handleFailure(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Lock an external task by a given id for a specified worker and amount of time.
         * @param {string} id The id of the external task.
         * @param {LockExternalTaskDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lock(id: string, body?: LockExternalTaskDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalTaskApiFp(configuration).lock(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
         * @summary Get List (POST)
         * @param {ExternalTaskQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryExternalTasks(body?: ExternalTaskQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ExternalTaskDto>>> {
            return ExternalTaskApiFp(configuration).queryExternalTasks(body, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.18/reference/rest/external-task/post-query/) method.
         * @summary Get List Count (POST)
         * @param {ExternalTaskQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryExternalTasksCount(body?: ExternalTaskQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return ExternalTaskApiFp(configuration).queryExternalTasksCount(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the priority of an existing external task by id. The default value of a priority is 0.
         * @summary Set Priority
         * @param {string} id The id of the external task to set the priority for.
         * @param {PriorityDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExternalTaskResourcePriority(id: string, body?: PriorityDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalTaskApiFp(configuration).setExternalTaskResourcePriority(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
         * @summary Set Retries
         * @param {string} id The id of the external task to set the number of retries for.
         * @param {RetriesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExternalTaskResourceRetries(id: string, body?: RetriesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalTaskApiFp(configuration).setExternalTaskResourceRetries(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
         * @summary Set Retries Sync
         * @param {SetRetriesForExternalTasksDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExternalTaskRetries(body?: SetRetriesForExternalTasksDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalTaskApiFp(configuration).setExternalTaskRetries(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
         * @summary Set Retries Async
         * @param {SetRetriesForExternalTasksDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExternalTaskRetriesAsyncOperation(body?: SetRetriesForExternalTasksDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return ExternalTaskApiFp(configuration).setExternalTaskRetriesAsyncOperation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Unlocks an external task by id. Clears the task's lock expiration time and worker id.
         * @summary Unlock
         * @param {string} id The id of the external task to unlock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlock(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalTaskApiFp(configuration).unlock(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExternalTaskApi - object-oriented interface
 * @export
 * @class ExternalTaskApi
 * @extends {BaseAPI}
 */
export class ExternalTaskApi extends BaseAPI {
    /**
     * Completes an external task by id and updates process variables.
     * @summary Complete
     * @param {string} id The id of the task to complete.
     * @param {CompleteExternalTaskDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async completeExternalTaskResource(id: string, body?: CompleteExternalTaskDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalTaskApiFp(this.configuration).completeExternalTaskResource(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Extends the timeout of the lock by a given amount of time.
     * @summary Extend Lock
     * @param {string} id The id of the external task.
     * @param {ExtendLockOnExternalTaskDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async extendLock(id: string, body?: ExtendLockOnExternalTaskDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalTaskApiFp(this.configuration).extendLock(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
     * @summary Fetch and Lock
     * @param {FetchExternalTasksDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async fetchAndLock(body?: FetchExternalTasksDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<LockedExternalTaskDto>>> {
        return ExternalTaskApiFp(this.configuration).fetchAndLock(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
     * @summary Get
     * @param {string} id The id of the external task to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async getExternalTask(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExternalTaskDto>> {
        return ExternalTaskApiFp(this.configuration).getExternalTask(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the error details in the context of a running external task by id.
     * @summary Get Error Details
     * @param {string} id The id of the external task for which the error details should be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async getExternalTaskErrorDetails(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ExternalTaskApiFp(this.configuration).getExternalTaskErrorDetails(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query-count/) method.
     * @summary Get List
     * @param {string} [externalTaskId] Filter by an external task&#x27;s id.
     * @param {string} [externalTaskIdIn] Filter by the comma-separated list of external task ids.
     * @param {string} [topicName] Filter by an external task topic.
     * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
     * @param {boolean} [locked] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [notLocked] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [noRetriesLeft] Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Date} [lockExpirationAfter] Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [lockExpirationBefore] Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [activityId] Filter by the id of the activity that an external task is created for.
     * @param {string} [activityIdIn] Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {string} [executionId] Filter by the id of the execution that an external task belongs to.
     * @param {string} [processInstanceId] Filter by the id of the process instance that an external task belongs to.
     * @param {string} [processInstanceIdIn] Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param {string} [processDefinitionId] Filter by the id of the process definition that an external task belongs to.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {boolean} [active] Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [suspended] Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {number} [priorityHigherThanOrEquals] Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {number} [priorityLowerThanOrEquals] Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async getExternalTasks(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ExternalTaskDto>>> {
        return ExternalTaskApiFp(this.configuration).getExternalTasks(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method.
     * @summary Get List Count
     * @param {string} [externalTaskId] Filter by an external task&#x27;s id.
     * @param {string} [externalTaskIdIn] Filter by the comma-separated list of external task ids.
     * @param {string} [topicName] Filter by an external task topic.
     * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
     * @param {boolean} [locked] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [notLocked] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [noRetriesLeft] Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Date} [lockExpirationAfter] Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [lockExpirationBefore] Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [activityId] Filter by the id of the activity that an external task is created for.
     * @param {string} [activityIdIn] Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {string} [executionId] Filter by the id of the execution that an external task belongs to.
     * @param {string} [processInstanceId] Filter by the id of the process instance that an external task belongs to.
     * @param {string} [processInstanceIdIn] Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param {string} [processDefinitionId] Filter by the id of the process definition that an external task belongs to.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {boolean} [active] Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [suspended] Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {number} [priorityHigherThanOrEquals] Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {number} [priorityLowerThanOrEquals] Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async getExternalTasksCount(externalTaskId?: string, externalTaskIdIn?: string, topicName?: string, workerId?: string, locked?: boolean, notLocked?: boolean, withRetriesLeft?: boolean, noRetriesLeft?: boolean, lockExpirationAfter?: Date, lockExpirationBefore?: Date, activityId?: string, activityIdIn?: string, executionId?: string, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, tenantIdIn?: string, active?: boolean, suspended?: boolean, priorityHigherThanOrEquals?: number, priorityLowerThanOrEquals?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return ExternalTaskApiFp(this.configuration).getExternalTasksCount(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
     * @summary Get External Task Topic Names
     * @param {boolean} [withLockedTasks] Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [withUnlockedTasks] Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {boolean} [withRetriesLeft] Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async getTopicNames(withLockedTasks?: boolean, withUnlockedTasks?: boolean, withRetriesLeft?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return ExternalTaskApiFp(this.configuration).getTopicNames(withLockedTasks, withUnlockedTasks, withRetriesLeft, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
     * @summary Handle BPMN Error
     * @param {string} id The id of the external task in which context a BPMN error is reported.
     * @param {ExternalTaskBpmnError} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async handleExternalTaskBpmnError(id: string, body?: ExternalTaskBpmnError, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalTaskApiFp(this.configuration).handleExternalTaskBpmnError(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
     * @summary Handle Failure
     * @param {string} id The id of the external task to report a failure for.
     * @param {ExternalTaskFailureDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async handleFailure(id: string, body?: ExternalTaskFailureDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalTaskApiFp(this.configuration).handleFailure(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lock an external task by a given id for a specified worker and amount of time.
     * @param {string} id The id of the external task.
     * @param {LockExternalTaskDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async lock(id: string, body?: LockExternalTaskDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalTaskApiFp(this.configuration).lock(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
     * @summary Get List (POST)
     * @param {ExternalTaskQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async queryExternalTasks(body?: ExternalTaskQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ExternalTaskDto>>> {
        return ExternalTaskApiFp(this.configuration).queryExternalTasks(body, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.18/reference/rest/external-task/post-query/) method.
     * @summary Get List Count (POST)
     * @param {ExternalTaskQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async queryExternalTasksCount(body?: ExternalTaskQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return ExternalTaskApiFp(this.configuration).queryExternalTasksCount(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the priority of an existing external task by id. The default value of a priority is 0.
     * @summary Set Priority
     * @param {string} id The id of the external task to set the priority for.
     * @param {PriorityDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async setExternalTaskResourcePriority(id: string, body?: PriorityDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalTaskApiFp(this.configuration).setExternalTaskResourcePriority(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
     * @summary Set Retries
     * @param {string} id The id of the external task to set the number of retries for.
     * @param {RetriesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async setExternalTaskResourceRetries(id: string, body?: RetriesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalTaskApiFp(this.configuration).setExternalTaskResourceRetries(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
     * @summary Set Retries Sync
     * @param {SetRetriesForExternalTasksDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async setExternalTaskRetries(body?: SetRetriesForExternalTasksDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalTaskApiFp(this.configuration).setExternalTaskRetries(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
     * @summary Set Retries Async
     * @param {SetRetriesForExternalTasksDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async setExternalTaskRetriesAsyncOperation(body?: SetRetriesForExternalTasksDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return ExternalTaskApiFp(this.configuration).setExternalTaskRetriesAsyncOperation(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Unlocks an external task by id. Clears the task's lock expiration time and worker id.
     * @summary Unlock
     * @param {string} id The id of the external task to unlock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalTaskApi
     */
    public async unlock(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalTaskApiFp(this.configuration).unlock(id, options).then((request) => request(this.axios, this.basePath));
    }
}

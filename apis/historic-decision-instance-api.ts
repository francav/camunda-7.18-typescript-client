/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BatchDto } from '../models';
import { CountResultDto } from '../models';
import { DeleteHistoricDecisionInstancesDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoricDecisionInstanceDto } from '../models';
import { SetRemovalTimeToHistoricDecisionInstancesDto } from '../models';
/**
 * HistoricDecisionInstanceApi - axios parameter creator
 * @export
 */
export const HistoricDecisionInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete multiple historic decision instances asynchronously (batch). At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery`  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
         * @summary Delete Async (POST)
         * @param {DeleteHistoricDecisionInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAsync: async (body?: DeleteHistoricDecisionInstancesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/decision-instance/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a historic decision instance by id, according to the  `HistoricDecisionInstance` interface in the engine.
         * @summary Get Historic Decision Instance
         * @param {string} id The id of the historic decision instance to be retrieved.
         * @param {boolean} [includeInputs] Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeOutputs] Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableBinaryFetching] Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableCustomObjectDeserialization] Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricDecisionInstance: async (id: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getHistoricDecisionInstance.');
            }
            const localVarPath = `/history/decision-instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeInputs !== undefined) {
                localVarQueryParameter['includeInputs'] = includeInputs;
            }

            if (includeOutputs !== undefined) {
                localVarQueryParameter['includeOutputs'] = includeOutputs;
            }

            if (disableBinaryFetching !== undefined) {
                localVarQueryParameter['disableBinaryFetching'] = disableBinaryFetching;
            }

            if (disableCustomObjectDeserialization !== undefined) {
                localVarQueryParameter['disableCustomObjectDeserialization'] = disableCustomObjectDeserialization;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
         * @summary Get Historic Decision Instances
         * @param {string} [decisionInstanceId] Filter by decision instance id.
         * @param {string} [decisionInstanceIdIn] Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
         * @param {string} [decisionDefinitionId] Filter by the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionIdIn] Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
         * @param {string} [decisionDefinitionKey] Filter by the key of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionKeyIn] Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
         * @param {string} [decisionDefinitionName] Filter by the name of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionNameLike] Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
         * @param {string} [processDefinitionId] Filter by the process definition the instances belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances belongs to.
         * @param {string} [processInstanceId] Filter by the process instance the instances belongs to.
         * @param {string} [caseDefinitionId] Filter by the case definition the instances belongs to.
         * @param {string} [caseDefinitionKey] Filter by the key of the case definition the instances belongs to.
         * @param {string} [caseInstanceId] Filter by the case instance the instances belongs to.
         * @param {string} [activityIdIn] Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
         * @param {string} [activityInstanceIdIn] Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [evaluatedBefore] Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [evaluatedAfter] Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [userId] Restrict to instances that were evaluated by the given user.
         * @param {string} [rootDecisionInstanceId] Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
         * @param {boolean} [rootDecisionInstancesOnly] Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the decision requirements definition the instances belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition the instances belongs to.
         * @param {boolean} [includeInputs] Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeOutputs] Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableBinaryFetching] Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableCustomObjectDeserialization] Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricDecisionInstances: async (decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/decision-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (decisionInstanceId !== undefined) {
                localVarQueryParameter['decisionInstanceId'] = decisionInstanceId;
            }

            if (decisionInstanceIdIn !== undefined) {
                localVarQueryParameter['decisionInstanceIdIn'] = decisionInstanceIdIn;
            }

            if (decisionDefinitionId !== undefined) {
                localVarQueryParameter['decisionDefinitionId'] = decisionDefinitionId;
            }

            if (decisionDefinitionIdIn !== undefined) {
                localVarQueryParameter['decisionDefinitionIdIn'] = decisionDefinitionIdIn;
            }

            if (decisionDefinitionKey !== undefined) {
                localVarQueryParameter['decisionDefinitionKey'] = decisionDefinitionKey;
            }

            if (decisionDefinitionKeyIn !== undefined) {
                localVarQueryParameter['decisionDefinitionKeyIn'] = decisionDefinitionKeyIn;
            }

            if (decisionDefinitionName !== undefined) {
                localVarQueryParameter['decisionDefinitionName'] = decisionDefinitionName;
            }

            if (decisionDefinitionNameLike !== undefined) {
                localVarQueryParameter['decisionDefinitionNameLike'] = decisionDefinitionNameLike;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (caseDefinitionId !== undefined) {
                localVarQueryParameter['caseDefinitionId'] = caseDefinitionId;
            }

            if (caseDefinitionKey !== undefined) {
                localVarQueryParameter['caseDefinitionKey'] = caseDefinitionKey;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (activityInstanceIdIn !== undefined) {
                localVarQueryParameter['activityInstanceIdIn'] = activityInstanceIdIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (evaluatedBefore !== undefined) {
                localVarQueryParameter['evaluatedBefore'] = (evaluatedBefore as any instanceof Date) ?
                    (evaluatedBefore as any).toISOString() :
                    evaluatedBefore;
            }

            if (evaluatedAfter !== undefined) {
                localVarQueryParameter['evaluatedAfter'] = (evaluatedAfter as any instanceof Date) ?
                    (evaluatedAfter as any).toISOString() :
                    evaluatedAfter;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (rootDecisionInstanceId !== undefined) {
                localVarQueryParameter['rootDecisionInstanceId'] = rootDecisionInstanceId;
            }

            if (rootDecisionInstancesOnly !== undefined) {
                localVarQueryParameter['rootDecisionInstancesOnly'] = rootDecisionInstancesOnly;
            }

            if (decisionRequirementsDefinitionId !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionId'] = decisionRequirementsDefinitionId;
            }

            if (decisionRequirementsDefinitionKey !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionKey'] = decisionRequirementsDefinitionKey;
            }

            if (includeInputs !== undefined) {
                localVarQueryParameter['includeInputs'] = includeInputs;
            }

            if (includeOutputs !== undefined) {
                localVarQueryParameter['includeOutputs'] = includeOutputs;
            }

            if (disableBinaryFetching !== undefined) {
                localVarQueryParameter['disableBinaryFetching'] = disableBinaryFetching;
            }

            if (disableCustomObjectDeserialization !== undefined) {
                localVarQueryParameter['disableCustomObjectDeserialization'] = disableCustomObjectDeserialization;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
         * @summary Get Historic Decision Instance Count
         * @param {string} [decisionInstanceId] Filter by decision instance id.
         * @param {string} [decisionInstanceIdIn] Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
         * @param {string} [decisionDefinitionId] Filter by the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionIdIn] Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
         * @param {string} [decisionDefinitionKey] Filter by the key of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionKeyIn] Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
         * @param {string} [decisionDefinitionName] Filter by the name of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionNameLike] Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
         * @param {string} [processDefinitionId] Filter by the process definition the instances belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances belongs to.
         * @param {string} [processInstanceId] Filter by the process instance the instances belongs to.
         * @param {string} [caseDefinitionId] Filter by the case definition the instances belongs to.
         * @param {string} [caseDefinitionKey] Filter by the key of the case definition the instances belongs to.
         * @param {string} [caseInstanceId] Filter by the case instance the instances belongs to.
         * @param {string} [activityIdIn] Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
         * @param {string} [activityInstanceIdIn] Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [evaluatedBefore] Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [evaluatedAfter] Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [userId] Restrict to instances that were evaluated by the given user.
         * @param {string} [rootDecisionInstanceId] Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
         * @param {boolean} [rootDecisionInstancesOnly] Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the decision requirements definition the instances belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition the instances belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricDecisionInstancesCount: async (decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/decision-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (decisionInstanceId !== undefined) {
                localVarQueryParameter['decisionInstanceId'] = decisionInstanceId;
            }

            if (decisionInstanceIdIn !== undefined) {
                localVarQueryParameter['decisionInstanceIdIn'] = decisionInstanceIdIn;
            }

            if (decisionDefinitionId !== undefined) {
                localVarQueryParameter['decisionDefinitionId'] = decisionDefinitionId;
            }

            if (decisionDefinitionIdIn !== undefined) {
                localVarQueryParameter['decisionDefinitionIdIn'] = decisionDefinitionIdIn;
            }

            if (decisionDefinitionKey !== undefined) {
                localVarQueryParameter['decisionDefinitionKey'] = decisionDefinitionKey;
            }

            if (decisionDefinitionKeyIn !== undefined) {
                localVarQueryParameter['decisionDefinitionKeyIn'] = decisionDefinitionKeyIn;
            }

            if (decisionDefinitionName !== undefined) {
                localVarQueryParameter['decisionDefinitionName'] = decisionDefinitionName;
            }

            if (decisionDefinitionNameLike !== undefined) {
                localVarQueryParameter['decisionDefinitionNameLike'] = decisionDefinitionNameLike;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (caseDefinitionId !== undefined) {
                localVarQueryParameter['caseDefinitionId'] = caseDefinitionId;
            }

            if (caseDefinitionKey !== undefined) {
                localVarQueryParameter['caseDefinitionKey'] = caseDefinitionKey;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (activityInstanceIdIn !== undefined) {
                localVarQueryParameter['activityInstanceIdIn'] = activityInstanceIdIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (evaluatedBefore !== undefined) {
                localVarQueryParameter['evaluatedBefore'] = (evaluatedBefore as any instanceof Date) ?
                    (evaluatedBefore as any).toISOString() :
                    evaluatedBefore;
            }

            if (evaluatedAfter !== undefined) {
                localVarQueryParameter['evaluatedAfter'] = (evaluatedAfter as any instanceof Date) ?
                    (evaluatedAfter as any).toISOString() :
                    evaluatedAfter;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (rootDecisionInstanceId !== undefined) {
                localVarQueryParameter['rootDecisionInstanceId'] = rootDecisionInstanceId;
            }

            if (rootDecisionInstancesOnly !== undefined) {
                localVarQueryParameter['rootDecisionInstancesOnly'] = rootDecisionInstancesOnly;
            }

            if (decisionRequirementsDefinitionId !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionId'] = decisionRequirementsDefinitionId;
            }

            if (decisionRequirementsDefinitionKey !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionKey'] = decisionRequirementsDefinitionKey;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the removal time to multiple historic decision instances asynchronously (batch).  At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
         * @summary Set Removal Time Async (POST)
         * @param {SetRemovalTimeToHistoricDecisionInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRemovalTimeAsyncHistoricDecisionInstance: async (body?: SetRemovalTimeToHistoricDecisionInstancesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/decision-instance/set-removal-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricDecisionInstanceApi - functional programming interface
 * @export
 */
export const HistoricDecisionInstanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete multiple historic decision instances asynchronously (batch). At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery`  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
         * @summary Delete Async (POST)
         * @param {DeleteHistoricDecisionInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAsync(body?: DeleteHistoricDecisionInstancesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await HistoricDecisionInstanceApiAxiosParamCreator(configuration).deleteAsync(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a historic decision instance by id, according to the  `HistoricDecisionInstance` interface in the engine.
         * @summary Get Historic Decision Instance
         * @param {string} id The id of the historic decision instance to be retrieved.
         * @param {boolean} [includeInputs] Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeOutputs] Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableBinaryFetching] Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableCustomObjectDeserialization] Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDecisionInstance(id: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HistoricDecisionInstanceDto>>> {
            const localVarAxiosArgs = await HistoricDecisionInstanceApiAxiosParamCreator(configuration).getHistoricDecisionInstance(id, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
         * @summary Get Historic Decision Instances
         * @param {string} [decisionInstanceId] Filter by decision instance id.
         * @param {string} [decisionInstanceIdIn] Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
         * @param {string} [decisionDefinitionId] Filter by the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionIdIn] Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
         * @param {string} [decisionDefinitionKey] Filter by the key of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionKeyIn] Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
         * @param {string} [decisionDefinitionName] Filter by the name of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionNameLike] Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
         * @param {string} [processDefinitionId] Filter by the process definition the instances belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances belongs to.
         * @param {string} [processInstanceId] Filter by the process instance the instances belongs to.
         * @param {string} [caseDefinitionId] Filter by the case definition the instances belongs to.
         * @param {string} [caseDefinitionKey] Filter by the key of the case definition the instances belongs to.
         * @param {string} [caseInstanceId] Filter by the case instance the instances belongs to.
         * @param {string} [activityIdIn] Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
         * @param {string} [activityInstanceIdIn] Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [evaluatedBefore] Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [evaluatedAfter] Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [userId] Restrict to instances that were evaluated by the given user.
         * @param {string} [rootDecisionInstanceId] Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
         * @param {boolean} [rootDecisionInstancesOnly] Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the decision requirements definition the instances belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition the instances belongs to.
         * @param {boolean} [includeInputs] Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeOutputs] Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableBinaryFetching] Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableCustomObjectDeserialization] Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDecisionInstances(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricDecisionInstanceDto>>>> {
            const localVarAxiosArgs = await HistoricDecisionInstanceApiAxiosParamCreator(configuration).getHistoricDecisionInstances(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization, sortBy, sortOrder, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
         * @summary Get Historic Decision Instance Count
         * @param {string} [decisionInstanceId] Filter by decision instance id.
         * @param {string} [decisionInstanceIdIn] Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
         * @param {string} [decisionDefinitionId] Filter by the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionIdIn] Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
         * @param {string} [decisionDefinitionKey] Filter by the key of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionKeyIn] Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
         * @param {string} [decisionDefinitionName] Filter by the name of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionNameLike] Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
         * @param {string} [processDefinitionId] Filter by the process definition the instances belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances belongs to.
         * @param {string} [processInstanceId] Filter by the process instance the instances belongs to.
         * @param {string} [caseDefinitionId] Filter by the case definition the instances belongs to.
         * @param {string} [caseDefinitionKey] Filter by the key of the case definition the instances belongs to.
         * @param {string} [caseInstanceId] Filter by the case instance the instances belongs to.
         * @param {string} [activityIdIn] Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
         * @param {string} [activityInstanceIdIn] Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [evaluatedBefore] Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [evaluatedAfter] Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [userId] Restrict to instances that were evaluated by the given user.
         * @param {string} [rootDecisionInstanceId] Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
         * @param {boolean} [rootDecisionInstancesOnly] Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the decision requirements definition the instances belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition the instances belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDecisionInstancesCount(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricDecisionInstanceApiAxiosParamCreator(configuration).getHistoricDecisionInstancesCount(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the removal time to multiple historic decision instances asynchronously (batch).  At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
         * @summary Set Removal Time Async (POST)
         * @param {SetRemovalTimeToHistoricDecisionInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRemovalTimeAsyncHistoricDecisionInstance(body?: SetRemovalTimeToHistoricDecisionInstancesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await HistoricDecisionInstanceApiAxiosParamCreator(configuration).setRemovalTimeAsyncHistoricDecisionInstance(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoricDecisionInstanceApi - factory interface
 * @export
 */
export const HistoricDecisionInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete multiple historic decision instances asynchronously (batch). At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery`  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
         * @summary Delete Async (POST)
         * @param {DeleteHistoricDecisionInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAsync(body?: DeleteHistoricDecisionInstancesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return HistoricDecisionInstanceApiFp(configuration).deleteAsync(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a historic decision instance by id, according to the  `HistoricDecisionInstance` interface in the engine.
         * @summary Get Historic Decision Instance
         * @param {string} id The id of the historic decision instance to be retrieved.
         * @param {boolean} [includeInputs] Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeOutputs] Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableBinaryFetching] Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableCustomObjectDeserialization] Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDecisionInstance(id: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<HistoricDecisionInstanceDto>> {
            return HistoricDecisionInstanceApiFp(configuration).getHistoricDecisionInstance(id, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
         * @summary Get Historic Decision Instances
         * @param {string} [decisionInstanceId] Filter by decision instance id.
         * @param {string} [decisionInstanceIdIn] Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
         * @param {string} [decisionDefinitionId] Filter by the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionIdIn] Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
         * @param {string} [decisionDefinitionKey] Filter by the key of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionKeyIn] Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
         * @param {string} [decisionDefinitionName] Filter by the name of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionNameLike] Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
         * @param {string} [processDefinitionId] Filter by the process definition the instances belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances belongs to.
         * @param {string} [processInstanceId] Filter by the process instance the instances belongs to.
         * @param {string} [caseDefinitionId] Filter by the case definition the instances belongs to.
         * @param {string} [caseDefinitionKey] Filter by the key of the case definition the instances belongs to.
         * @param {string} [caseInstanceId] Filter by the case instance the instances belongs to.
         * @param {string} [activityIdIn] Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
         * @param {string} [activityInstanceIdIn] Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [evaluatedBefore] Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [evaluatedAfter] Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [userId] Restrict to instances that were evaluated by the given user.
         * @param {string} [rootDecisionInstanceId] Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
         * @param {boolean} [rootDecisionInstancesOnly] Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the decision requirements definition the instances belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition the instances belongs to.
         * @param {boolean} [includeInputs] Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeOutputs] Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableBinaryFetching] Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [disableCustomObjectDeserialization] Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDecisionInstances(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricDecisionInstanceDto>>> {
            return HistoricDecisionInstanceApiFp(configuration).getHistoricDecisionInstances(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
         * @summary Get Historic Decision Instance Count
         * @param {string} [decisionInstanceId] Filter by decision instance id.
         * @param {string} [decisionInstanceIdIn] Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
         * @param {string} [decisionDefinitionId] Filter by the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionIdIn] Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
         * @param {string} [decisionDefinitionKey] Filter by the key of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionKeyIn] Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
         * @param {string} [decisionDefinitionName] Filter by the name of the decision definition the instances belongs to.
         * @param {string} [decisionDefinitionNameLike] Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
         * @param {string} [processDefinitionId] Filter by the process definition the instances belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances belongs to.
         * @param {string} [processInstanceId] Filter by the process instance the instances belongs to.
         * @param {string} [caseDefinitionId] Filter by the case definition the instances belongs to.
         * @param {string} [caseDefinitionKey] Filter by the key of the case definition the instances belongs to.
         * @param {string} [caseInstanceId] Filter by the case instance the instances belongs to.
         * @param {string} [activityIdIn] Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
         * @param {string} [activityInstanceIdIn] Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [evaluatedBefore] Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [evaluatedAfter] Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [userId] Restrict to instances that were evaluated by the given user.
         * @param {string} [rootDecisionInstanceId] Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
         * @param {boolean} [rootDecisionInstancesOnly] Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [decisionRequirementsDefinitionId] Filter by the decision requirements definition the instances belongs to.
         * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition the instances belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDecisionInstancesCount(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricDecisionInstanceApiFp(configuration).getHistoricDecisionInstancesCount(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the removal time to multiple historic decision instances asynchronously (batch).  At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
         * @summary Set Removal Time Async (POST)
         * @param {SetRemovalTimeToHistoricDecisionInstancesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRemovalTimeAsyncHistoricDecisionInstance(body?: SetRemovalTimeToHistoricDecisionInstancesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return HistoricDecisionInstanceApiFp(configuration).setRemovalTimeAsyncHistoricDecisionInstance(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricDecisionInstanceApi - object-oriented interface
 * @export
 * @class HistoricDecisionInstanceApi
 * @extends {BaseAPI}
 */
export class HistoricDecisionInstanceApi extends BaseAPI {
    /**
     * Delete multiple historic decision instances asynchronously (batch). At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery`  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
     * @summary Delete Async (POST)
     * @param {DeleteHistoricDecisionInstancesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDecisionInstanceApi
     */
    public async deleteAsync(body?: DeleteHistoricDecisionInstancesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return HistoricDecisionInstanceApiFp(this.configuration).deleteAsync(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a historic decision instance by id, according to the  `HistoricDecisionInstance` interface in the engine.
     * @summary Get Historic Decision Instance
     * @param {string} id The id of the historic decision instance to be retrieved.
     * @param {boolean} [includeInputs] Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeOutputs] Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [disableBinaryFetching] Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [disableCustomObjectDeserialization] Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDecisionInstanceApi
     */
    public async getHistoricDecisionInstance(id: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<HistoricDecisionInstanceDto>> {
        return HistoricDecisionInstanceApiFp(this.configuration).getHistoricDecisionInstance(id, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
     * @summary Get Historic Decision Instances
     * @param {string} [decisionInstanceId] Filter by decision instance id.
     * @param {string} [decisionInstanceIdIn] Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
     * @param {string} [decisionDefinitionId] Filter by the decision definition the instances belongs to.
     * @param {string} [decisionDefinitionIdIn] Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
     * @param {string} [decisionDefinitionKey] Filter by the key of the decision definition the instances belongs to.
     * @param {string} [decisionDefinitionKeyIn] Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
     * @param {string} [decisionDefinitionName] Filter by the name of the decision definition the instances belongs to.
     * @param {string} [decisionDefinitionNameLike] Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
     * @param {string} [processDefinitionId] Filter by the process definition the instances belongs to.
     * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances belongs to.
     * @param {string} [processInstanceId] Filter by the process instance the instances belongs to.
     * @param {string} [caseDefinitionId] Filter by the case definition the instances belongs to.
     * @param {string} [caseDefinitionKey] Filter by the key of the case definition the instances belongs to.
     * @param {string} [caseInstanceId] Filter by the case instance the instances belongs to.
     * @param {string} [activityIdIn] Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
     * @param {string} [activityInstanceIdIn] Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Date} [evaluatedBefore] Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [evaluatedAfter] Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [userId] Restrict to instances that were evaluated by the given user.
     * @param {string} [rootDecisionInstanceId] Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
     * @param {boolean} [rootDecisionInstancesOnly] Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [decisionRequirementsDefinitionId] Filter by the decision requirements definition the instances belongs to.
     * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition the instances belongs to.
     * @param {boolean} [includeInputs] Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeOutputs] Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [disableBinaryFetching] Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [disableCustomObjectDeserialization] Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDecisionInstanceApi
     */
    public async getHistoricDecisionInstances(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, includeInputs?: boolean, includeOutputs?: boolean, disableBinaryFetching?: boolean, disableCustomObjectDeserialization?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricDecisionInstanceDto>>> {
        return HistoricDecisionInstanceApiFp(this.configuration).getHistoricDecisionInstances(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
     * @summary Get Historic Decision Instance Count
     * @param {string} [decisionInstanceId] Filter by decision instance id.
     * @param {string} [decisionInstanceIdIn] Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
     * @param {string} [decisionDefinitionId] Filter by the decision definition the instances belongs to.
     * @param {string} [decisionDefinitionIdIn] Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
     * @param {string} [decisionDefinitionKey] Filter by the key of the decision definition the instances belongs to.
     * @param {string} [decisionDefinitionKeyIn] Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
     * @param {string} [decisionDefinitionName] Filter by the name of the decision definition the instances belongs to.
     * @param {string} [decisionDefinitionNameLike] Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
     * @param {string} [processDefinitionId] Filter by the process definition the instances belongs to.
     * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances belongs to.
     * @param {string} [processInstanceId] Filter by the process instance the instances belongs to.
     * @param {string} [caseDefinitionId] Filter by the case definition the instances belongs to.
     * @param {string} [caseDefinitionKey] Filter by the key of the case definition the instances belongs to.
     * @param {string} [caseInstanceId] Filter by the case instance the instances belongs to.
     * @param {string} [activityIdIn] Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
     * @param {string} [activityInstanceIdIn] Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Date} [evaluatedBefore] Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [evaluatedAfter] Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [userId] Restrict to instances that were evaluated by the given user.
     * @param {string} [rootDecisionInstanceId] Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
     * @param {boolean} [rootDecisionInstancesOnly] Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [decisionRequirementsDefinitionId] Filter by the decision requirements definition the instances belongs to.
     * @param {string} [decisionRequirementsDefinitionKey] Filter by the key of the decision requirements definition the instances belongs to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDecisionInstanceApi
     */
    public async getHistoricDecisionInstancesCount(decisionInstanceId?: string, decisionInstanceIdIn?: string, decisionDefinitionId?: string, decisionDefinitionIdIn?: string, decisionDefinitionKey?: string, decisionDefinitionKeyIn?: string, decisionDefinitionName?: string, decisionDefinitionNameLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processInstanceId?: string, caseDefinitionId?: string, caseDefinitionKey?: string, caseInstanceId?: string, activityIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, evaluatedBefore?: Date, evaluatedAfter?: Date, userId?: string, rootDecisionInstanceId?: string, rootDecisionInstancesOnly?: boolean, decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricDecisionInstanceApiFp(this.configuration).getHistoricDecisionInstancesCount(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the removal time to multiple historic decision instances asynchronously (batch).  At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery` has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
     * @summary Set Removal Time Async (POST)
     * @param {SetRemovalTimeToHistoricDecisionInstancesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDecisionInstanceApi
     */
    public async setRemovalTimeAsyncHistoricDecisionInstance(body?: SetRemovalTimeToHistoricDecisionInstancesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return HistoricDecisionInstanceApiFp(this.configuration).setRemovalTimeAsyncHistoricDecisionInstance(body, options).then((request) => request(this.axios, this.basePath));
    }
}

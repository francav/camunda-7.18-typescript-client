/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AttachmentDto } from '../models';
import { AuthorizationExceptionDto } from '../models';
import { ExceptionDto } from '../models';
/**
 * TaskAttachmentApi - axios parameter creator
 * @export
 */
export const TaskAttachmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an attachment for a task.
         * @summary Create
         * @param {string} id The id of the task to add the attachment to.
         * @param {string} [attachmentName] 
         * @param {string} [attachmentDescription] 
         * @param {string} [attachmentType] 
         * @param {string} [url] 
         * @param {Blob} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttachmentForm: async (id: string, attachmentName?: string, attachmentDescription?: string, attachmentType?: string, url?: string, content?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addAttachmentForm.');
            }
            const localVarPath = `/task/{id}/attachment/create`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (attachmentName !== undefined) { 
                localVarFormParams.append('attachment-name', attachmentName as any);
            }

            if (attachmentDescription !== undefined) { 
                localVarFormParams.append('attachment-description', attachmentDescription as any);
            }

            if (attachmentType !== undefined) { 
                localVarFormParams.append('attachment-type', attachmentType as any);
            }

            if (url !== undefined) { 
                localVarFormParams.append('url', url as any);
            }

            if (content !== undefined) { 
                localVarFormParams.append('content', content as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes an attachment from a task by id.
         * @summary Delete
         * @param {string} id The id of the task.
         * @param {string} attachmentId The id of the attachment to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachment: async (id: string, attachmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAttachment.');
            }
            // verify required parameter 'attachmentId' is not null or undefined
            if (attachmentId === null || attachmentId === undefined) {
                throw new RequiredError('attachmentId','Required parameter attachmentId was null or undefined when calling deleteAttachment.');
            }
            const localVarPath = `/task/{id}/attachment/{attachmentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"attachmentId"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a task attachment by task id and attachment id.
         * @summary Get
         * @param {string} id The id of the task.
         * @param {string} attachmentId The id of the attachment to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment: async (id: string, attachmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAttachment.');
            }
            // verify required parameter 'attachmentId' is not null or undefined
            if (attachmentId === null || attachmentId === undefined) {
                throw new RequiredError('attachmentId','Required parameter attachmentId was null or undefined when calling getAttachment.');
            }
            const localVarPath = `/task/{id}/attachment/{attachmentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"attachmentId"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the binary content of a task attachment by task id and attachment id.
         * @summary Get (Binary)
         * @param {string} id The id of the task.
         * @param {string} attachmentId The id of the attachment to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentData: async (id: string, attachmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAttachmentData.');
            }
            // verify required parameter 'attachmentId' is not null or undefined
            if (attachmentId === null || attachmentId === undefined) {
                throw new RequiredError('attachmentId','Required parameter attachmentId was null or undefined when calling getAttachmentData.');
            }
            const localVarPath = `/task/{id}/attachment/{attachmentId}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"attachmentId"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the attachments for a task.
         * @summary Get List
         * @param {string} id The id of the task to retrieve the attachments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachments: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAttachments.');
            }
            const localVarPath = `/task/{id}/attachment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskAttachmentApi - functional programming interface
 * @export
 */
export const TaskAttachmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an attachment for a task.
         * @summary Create
         * @param {string} id The id of the task to add the attachment to.
         * @param {string} [attachmentName] 
         * @param {string} [attachmentDescription] 
         * @param {string} [attachmentType] 
         * @param {string} [url] 
         * @param {Blob} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAttachmentForm(id: string, attachmentName?: string, attachmentDescription?: string, attachmentType?: string, url?: string, content?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AttachmentDto>>> {
            const localVarAxiosArgs = await TaskAttachmentApiAxiosParamCreator(configuration).addAttachmentForm(id, attachmentName, attachmentDescription, attachmentType, url, content, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Removes an attachment from a task by id.
         * @summary Delete
         * @param {string} id The id of the task.
         * @param {string} attachmentId The id of the attachment to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttachment(id: string, attachmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TaskAttachmentApiAxiosParamCreator(configuration).deleteAttachment(id, attachmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a task attachment by task id and attachment id.
         * @summary Get
         * @param {string} id The id of the task.
         * @param {string} attachmentId The id of the attachment to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachment(id: string, attachmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AttachmentDto>>> {
            const localVarAxiosArgs = await TaskAttachmentApiAxiosParamCreator(configuration).getAttachment(id, attachmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the binary content of a task attachment by task id and attachment id.
         * @summary Get (Binary)
         * @param {string} id The id of the task.
         * @param {string} attachmentId The id of the attachment to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachmentData(id: string, attachmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await TaskAttachmentApiAxiosParamCreator(configuration).getAttachmentData(id, attachmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the attachments for a task.
         * @summary Get List
         * @param {string} id The id of the task to retrieve the attachments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachments(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<AttachmentDto>>>> {
            const localVarAxiosArgs = await TaskAttachmentApiAxiosParamCreator(configuration).getAttachments(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TaskAttachmentApi - factory interface
 * @export
 */
export const TaskAttachmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates an attachment for a task.
         * @summary Create
         * @param {string} id The id of the task to add the attachment to.
         * @param {string} [attachmentName] 
         * @param {string} [attachmentDescription] 
         * @param {string} [attachmentType] 
         * @param {string} [url] 
         * @param {Blob} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAttachmentForm(id: string, attachmentName?: string, attachmentDescription?: string, attachmentType?: string, url?: string, content?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<AttachmentDto>> {
            return TaskAttachmentApiFp(configuration).addAttachmentForm(id, attachmentName, attachmentDescription, attachmentType, url, content, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes an attachment from a task by id.
         * @summary Delete
         * @param {string} id The id of the task.
         * @param {string} attachmentId The id of the attachment to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttachment(id: string, attachmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TaskAttachmentApiFp(configuration).deleteAttachment(id, attachmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a task attachment by task id and attachment id.
         * @summary Get
         * @param {string} id The id of the task.
         * @param {string} attachmentId The id of the attachment to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachment(id: string, attachmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AttachmentDto>> {
            return TaskAttachmentApiFp(configuration).getAttachment(id, attachmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the binary content of a task attachment by task id and attachment id.
         * @summary Get (Binary)
         * @param {string} id The id of the task.
         * @param {string} attachmentId The id of the attachment to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachmentData(id: string, attachmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return TaskAttachmentApiFp(configuration).getAttachmentData(id, attachmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the attachments for a task.
         * @summary Get List
         * @param {string} id The id of the task to retrieve the attachments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachments(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AttachmentDto>>> {
            return TaskAttachmentApiFp(configuration).getAttachments(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskAttachmentApi - object-oriented interface
 * @export
 * @class TaskAttachmentApi
 * @extends {BaseAPI}
 */
export class TaskAttachmentApi extends BaseAPI {
    /**
     * Creates an attachment for a task.
     * @summary Create
     * @param {string} id The id of the task to add the attachment to.
     * @param {string} [attachmentName] 
     * @param {string} [attachmentDescription] 
     * @param {string} [attachmentType] 
     * @param {string} [url] 
     * @param {Blob} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskAttachmentApi
     */
    public async addAttachmentForm(id: string, attachmentName?: string, attachmentDescription?: string, attachmentType?: string, url?: string, content?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<AttachmentDto>> {
        return TaskAttachmentApiFp(this.configuration).addAttachmentForm(id, attachmentName, attachmentDescription, attachmentType, url, content, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes an attachment from a task by id.
     * @summary Delete
     * @param {string} id The id of the task.
     * @param {string} attachmentId The id of the attachment to be removed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskAttachmentApi
     */
    public async deleteAttachment(id: string, attachmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TaskAttachmentApiFp(this.configuration).deleteAttachment(id, attachmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a task attachment by task id and attachment id.
     * @summary Get
     * @param {string} id The id of the task.
     * @param {string} attachmentId The id of the attachment to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskAttachmentApi
     */
    public async getAttachment(id: string, attachmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AttachmentDto>> {
        return TaskAttachmentApiFp(this.configuration).getAttachment(id, attachmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the binary content of a task attachment by task id and attachment id.
     * @summary Get (Binary)
     * @param {string} id The id of the task.
     * @param {string} attachmentId The id of the attachment to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskAttachmentApi
     */
    public async getAttachmentData(id: string, attachmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return TaskAttachmentApiFp(this.configuration).getAttachmentData(id, attachmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the attachments for a task.
     * @summary Get List
     * @param {string} id The id of the task to retrieve the attachments for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskAttachmentApi
     */
    public async getAttachments(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<AttachmentDto>>> {
        return TaskAttachmentApiFp(this.configuration).getAttachments(id, options).then((request) => request(this.axios, this.basePath));
    }
}

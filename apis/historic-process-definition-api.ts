/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CleanableHistoricProcessInstanceReportResultDto } from '../models';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoricActivityStatisticsDto } from '../models';
/**
 * HistoricProcessDefinitionApi - axios parameter creator
 * @export
 */
export const HistoricProcessDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a report about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup))  so that you can tune the history time to live. These reports include the count of the finished historic process instances, cleanable process instances and basic process definition data - id, key, name and version. The size of the result set can be retrieved by using the [Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/) method.
         * @summary Get Cleanable Process Instance Report
         * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
         * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
         * @param {boolean} [withoutTenantId] Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [compact] Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCleanableHistoricProcessInstanceReport: async (processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/process-definition/cleanable-process-instance-report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (processDefinitionIdIn !== undefined) {
                localVarQueryParameter['processDefinitionIdIn'] = processDefinitionIdIn;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (compact !== undefined) {
                localVarQueryParameter['compact'] = compact;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of report results about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Process Instance Report](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report/) method.
         * @summary Get Cleanable Process Instance Report Count
         * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
         * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
         * @param {boolean} [withoutTenantId] Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [compact] Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCleanableHistoricProcessInstanceReportCount: async (processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/process-definition/cleanable-process-instance-report/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (processDefinitionIdIn !== undefined) {
                localVarQueryParameter['processDefinitionIdIn'] = processDefinitionIdIn;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (compact !== undefined) {
                localVarQueryParameter['compact'] = compact;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves historic statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token). **Note:** This only includes historic data.
         * @summary Get Historic Activity Statistics
         * @param {string} id The id of the process definition.
         * @param {boolean} [canceled] Whether to include the number of canceled activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {boolean} [finished] Whether to include the number of finished activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {boolean} [completeScope] Whether to include the number of activity instances which completed a scope in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {boolean} [incidents] Whether to include the number of incidents. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {Date} [startedBefore] Restrict to process instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to process instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to process instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to process instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [processInstanceIdIn] Restrict to process instances with the given IDs. The IDs must be provided as a comma- separated list.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricActivityStatistics: async (id: string, canceled?: boolean, finished?: boolean, completeScope?: boolean, incidents?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, processInstanceIdIn?: string, sortBy?: string, sortOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getHistoricActivityStatistics.');
            }
            const localVarPath = `/history/process-definition/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (canceled !== undefined) {
                localVarQueryParameter['canceled'] = canceled;
            }

            if (finished !== undefined) {
                localVarQueryParameter['finished'] = finished;
            }

            if (completeScope !== undefined) {
                localVarQueryParameter['completeScope'] = completeScope;
            }

            if (incidents !== undefined) {
                localVarQueryParameter['incidents'] = incidents;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            if (finishedBefore !== undefined) {
                localVarQueryParameter['finishedBefore'] = (finishedBefore as any instanceof Date) ?
                    (finishedBefore as any).toISOString() :
                    finishedBefore;
            }

            if (finishedAfter !== undefined) {
                localVarQueryParameter['finishedAfter'] = (finishedAfter as any instanceof Date) ?
                    (finishedAfter as any).toISOString() :
                    finishedAfter;
            }

            if (processInstanceIdIn !== undefined) {
                localVarQueryParameter['processInstanceIdIn'] = processInstanceIdIn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricProcessDefinitionApi - functional programming interface
 * @export
 */
export const HistoricProcessDefinitionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves a report about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup))  so that you can tune the history time to live. These reports include the count of the finished historic process instances, cleanable process instances and basic process definition data - id, key, name and version. The size of the result set can be retrieved by using the [Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/) method.
         * @summary Get Cleanable Process Instance Report
         * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
         * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
         * @param {boolean} [withoutTenantId] Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [compact] Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCleanableHistoricProcessInstanceReport(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CleanableHistoricProcessInstanceReportResultDto>>>> {
            const localVarAxiosArgs = await HistoricProcessDefinitionApiAxiosParamCreator(configuration).getCleanableHistoricProcessInstanceReport(processDefinitionIdIn, processDefinitionKeyIn, tenantIdIn, withoutTenantId, compact, sortBy, sortOrder, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of report results about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Process Instance Report](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report/) method.
         * @summary Get Cleanable Process Instance Report Count
         * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
         * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
         * @param {boolean} [withoutTenantId] Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [compact] Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricProcessDefinitionApiAxiosParamCreator(configuration).getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn, processDefinitionKeyIn, tenantIdIn, withoutTenantId, compact, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves historic statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token). **Note:** This only includes historic data.
         * @summary Get Historic Activity Statistics
         * @param {string} id The id of the process definition.
         * @param {boolean} [canceled] Whether to include the number of canceled activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {boolean} [finished] Whether to include the number of finished activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {boolean} [completeScope] Whether to include the number of activity instances which completed a scope in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {boolean} [incidents] Whether to include the number of incidents. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {Date} [startedBefore] Restrict to process instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to process instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to process instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to process instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [processInstanceIdIn] Restrict to process instances with the given IDs. The IDs must be provided as a comma- separated list.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricActivityStatistics(id: string, canceled?: boolean, finished?: boolean, completeScope?: boolean, incidents?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, processInstanceIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricActivityStatisticsDto>>>> {
            const localVarAxiosArgs = await HistoricProcessDefinitionApiAxiosParamCreator(configuration).getHistoricActivityStatistics(id, canceled, finished, completeScope, incidents, startedBefore, startedAfter, finishedBefore, finishedAfter, processInstanceIdIn, sortBy, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoricProcessDefinitionApi - factory interface
 * @export
 */
export const HistoricProcessDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves a report about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup))  so that you can tune the history time to live. These reports include the count of the finished historic process instances, cleanable process instances and basic process definition data - id, key, name and version. The size of the result set can be retrieved by using the [Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/) method.
         * @summary Get Cleanable Process Instance Report
         * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
         * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
         * @param {boolean} [withoutTenantId] Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [compact] Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCleanableHistoricProcessInstanceReport(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CleanableHistoricProcessInstanceReportResultDto>>> {
            return HistoricProcessDefinitionApiFp(configuration).getCleanableHistoricProcessInstanceReport(processDefinitionIdIn, processDefinitionKeyIn, tenantIdIn, withoutTenantId, compact, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of report results about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Process Instance Report](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report/) method.
         * @summary Get Cleanable Process Instance Report Count
         * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
         * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
         * @param {boolean} [withoutTenantId] Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [compact] Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricProcessDefinitionApiFp(configuration).getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn, processDefinitionKeyIn, tenantIdIn, withoutTenantId, compact, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves historic statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token). **Note:** This only includes historic data.
         * @summary Get Historic Activity Statistics
         * @param {string} id The id of the process definition.
         * @param {boolean} [canceled] Whether to include the number of canceled activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {boolean} [finished] Whether to include the number of finished activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {boolean} [completeScope] Whether to include the number of activity instances which completed a scope in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {boolean} [incidents] Whether to include the number of incidents. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
         * @param {Date} [startedBefore] Restrict to process instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Restrict to process instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedBefore] Restrict to process instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [finishedAfter] Restrict to process instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [processInstanceIdIn] Restrict to process instances with the given IDs. The IDs must be provided as a comma- separated list.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricActivityStatistics(id: string, canceled?: boolean, finished?: boolean, completeScope?: boolean, incidents?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, processInstanceIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricActivityStatisticsDto>>> {
            return HistoricProcessDefinitionApiFp(configuration).getHistoricActivityStatistics(id, canceled, finished, completeScope, incidents, startedBefore, startedAfter, finishedBefore, finishedAfter, processInstanceIdIn, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricProcessDefinitionApi - object-oriented interface
 * @export
 * @class HistoricProcessDefinitionApi
 * @extends {BaseAPI}
 */
export class HistoricProcessDefinitionApi extends BaseAPI {
    /**
     * Retrieves a report about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup))  so that you can tune the history time to live. These reports include the count of the finished historic process instances, cleanable process instances and basic process definition data - id, key, name and version. The size of the result set can be retrieved by using the [Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/) method.
     * @summary Get Cleanable Process Instance Report
     * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
     * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
     * @param {boolean} [withoutTenantId] Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [compact] Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessDefinitionApi
     */
    public async getCleanableHistoricProcessInstanceReport(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CleanableHistoricProcessInstanceReportResultDto>>> {
        return HistoricProcessDefinitionApiFp(this.configuration).getCleanableHistoricProcessInstanceReport(processDefinitionIdIn, processDefinitionKeyIn, tenantIdIn, withoutTenantId, compact, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of report results about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Process Instance Report](https://docs.camunda.org/manual/7.18/reference/rest/history/process-definition/get-cleanable-process-instance-report/) method.
     * @summary Get Cleanable Process Instance Report Count
     * @param {string} [processDefinitionIdIn] Filter by process definition ids. Must be a comma-separated list of process definition ids.
     * @param {string} [processDefinitionKeyIn] Filter by process definition keys. Must be a comma-separated list of process definition keys.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
     * @param {boolean} [withoutTenantId] Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [compact] Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessDefinitionApi
     */
    public async getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn?: string, processDefinitionKeyIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, compact?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricProcessDefinitionApiFp(this.configuration).getCleanableHistoricProcessInstanceReportCount(processDefinitionIdIn, processDefinitionKeyIn, tenantIdIn, withoutTenantId, compact, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves historic statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token). **Note:** This only includes historic data.
     * @summary Get Historic Activity Statistics
     * @param {string} id The id of the process definition.
     * @param {boolean} [canceled] Whether to include the number of canceled activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param {boolean} [finished] Whether to include the number of finished activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param {boolean} [completeScope] Whether to include the number of activity instances which completed a scope in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param {boolean} [incidents] Whether to include the number of incidents. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param {Date} [startedBefore] Restrict to process instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Restrict to process instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedBefore] Restrict to process instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [finishedAfter] Restrict to process instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [processInstanceIdIn] Restrict to process instances with the given IDs. The IDs must be provided as a comma- separated list.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricProcessDefinitionApi
     */
    public async getHistoricActivityStatistics(id: string, canceled?: boolean, finished?: boolean, completeScope?: boolean, incidents?: boolean, startedBefore?: Date, startedAfter?: Date, finishedBefore?: Date, finishedAfter?: Date, processInstanceIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricActivityStatisticsDto>>> {
        return HistoricProcessDefinitionApiFp(this.configuration).getHistoricActivityStatistics(id, canceled, finished, completeScope, incidents, startedBefore, startedAfter, finishedBefore, finishedAfter, processInstanceIdIn, sortBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
}

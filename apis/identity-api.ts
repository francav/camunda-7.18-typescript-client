/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AuthenticationResult } from '../models';
import { BasicUserCredentialsDto } from '../models';
import { CheckPasswordPolicyResultDto } from '../models';
import { ExceptionDto } from '../models';
import { IdentityServiceGroupInfoDto } from '../models';
import { PasswordPolicyDto } from '../models';
import { PasswordPolicyRequestDto } from '../models';
/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A password policy consists of a list of rules that new passwords must follow to be policy compliant. A password can be checked for compliancy via this end point. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
         * @summary Validate Password
         * @param {PasswordPolicyRequestDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPassword: async (body?: PasswordPolicyRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/password-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the groups of a user by id and includes all users that share a group with the given user.
         * @summary Get a User's Groups
         * @param {string} userId The id of the user to get the groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupInfo: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getGroupInfo.');
            }
            const localVarPath = `/identity/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * A password policy consists of a list of rules that new passwords must follow to be policy compliant. This end point returns a JSON representation of the list of policy rules. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
         * @summary Get Password Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordPolicy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/password-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies that user credentials are valid.
         * @summary Verify User
         * @param {BasicUserCredentialsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUser: async (body?: BasicUserCredentialsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * A password policy consists of a list of rules that new passwords must follow to be policy compliant. A password can be checked for compliancy via this end point. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
         * @summary Validate Password
         * @param {PasswordPolicyRequestDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPassword(body?: PasswordPolicyRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CheckPasswordPolicyResultDto>>> {
            const localVarAxiosArgs = await IdentityApiAxiosParamCreator(configuration).checkPassword(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the groups of a user by id and includes all users that share a group with the given user.
         * @summary Get a User's Groups
         * @param {string} userId The id of the user to get the groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupInfo(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IdentityServiceGroupInfoDto>>> {
            const localVarAxiosArgs = await IdentityApiAxiosParamCreator(configuration).getGroupInfo(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * A password policy consists of a list of rules that new passwords must follow to be policy compliant. This end point returns a JSON representation of the list of policy rules. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
         * @summary Get Password Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPasswordPolicy(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PasswordPolicyDto>>> {
            const localVarAxiosArgs = await IdentityApiAxiosParamCreator(configuration).getPasswordPolicy(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Verifies that user credentials are valid.
         * @summary Verify User
         * @param {BasicUserCredentialsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyUser(body?: BasicUserCredentialsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuthenticationResult>>> {
            const localVarAxiosArgs = await IdentityApiAxiosParamCreator(configuration).verifyUser(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * A password policy consists of a list of rules that new passwords must follow to be policy compliant. A password can be checked for compliancy via this end point. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
         * @summary Validate Password
         * @param {PasswordPolicyRequestDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPassword(body?: PasswordPolicyRequestDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CheckPasswordPolicyResultDto>> {
            return IdentityApiFp(configuration).checkPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the groups of a user by id and includes all users that share a group with the given user.
         * @summary Get a User's Groups
         * @param {string} userId The id of the user to get the groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupInfo(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<IdentityServiceGroupInfoDto>> {
            return IdentityApiFp(configuration).getGroupInfo(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * A password policy consists of a list of rules that new passwords must follow to be policy compliant. This end point returns a JSON representation of the list of policy rules. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
         * @summary Get Password Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPasswordPolicy(options?: AxiosRequestConfig): Promise<AxiosResponse<PasswordPolicyDto>> {
            return IdentityApiFp(configuration).getPasswordPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies that user credentials are valid.
         * @summary Verify User
         * @param {BasicUserCredentialsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyUser(body?: BasicUserCredentialsDto, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthenticationResult>> {
            return IdentityApiFp(configuration).verifyUser(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
    /**
     * A password policy consists of a list of rules that new passwords must follow to be policy compliant. A password can be checked for compliancy via this end point. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
     * @summary Validate Password
     * @param {PasswordPolicyRequestDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public async checkPassword(body?: PasswordPolicyRequestDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CheckPasswordPolicyResultDto>> {
        return IdentityApiFp(this.configuration).checkPassword(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the groups of a user by id and includes all users that share a group with the given user.
     * @summary Get a User's Groups
     * @param {string} userId The id of the user to get the groups for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public async getGroupInfo(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<IdentityServiceGroupInfoDto>> {
        return IdentityApiFp(this.configuration).getGroupInfo(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * A password policy consists of a list of rules that new passwords must follow to be policy compliant. This end point returns a JSON representation of the list of policy rules. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
     * @summary Get Password Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public async getPasswordPolicy(options?: AxiosRequestConfig) : Promise<AxiosResponse<PasswordPolicyDto>> {
        return IdentityApiFp(this.configuration).getPasswordPolicy(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Verifies that user credentials are valid.
     * @summary Verify User
     * @param {BasicUserCredentialsDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public async verifyUser(body?: BasicUserCredentialsDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuthenticationResult>> {
        return IdentityApiFp(this.configuration).verifyUser(body, options).then((request) => request(this.axios, this.basePath));
    }
}

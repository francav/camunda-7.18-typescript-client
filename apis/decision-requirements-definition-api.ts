/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { DecisionRequirementsDefinitionDto } from '../models';
import { DecisionRequirementsDefinitionXmlDto } from '../models';
import { ExceptionDto } from '../models';
/**
 * DecisionRequirementsDefinitionApi - axios parameter creator
 * @export
 */
export const DecisionRequirementsDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.
         * @summary Get Decision Requirements Definition by ID
         * @param {string} id The id of the decision requirements definition to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDecisionRequirementsDefinitionById.');
            }
            const localVarPath = `/decision-requirements-definition/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
         * @summary Get Decision Requirements Definition by Key
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionByKey: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionByKey.');
            }
            const localVarPath = `/decision-requirements-definition/key/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
         * @summary Get Decision Requirements Definition by Key and Tenant ID
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionByKeyAndTenantId: async (key: string, tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionByKeyAndTenantId.');
            }
            // verify required parameter 'tenantId' is not null or undefined
            if (tenantId === null || tenantId === undefined) {
                throw new RequiredError('tenantId','Required parameter tenantId was null or undefined when calling getDecisionRequirementsDefinitionByKeyAndTenantId.');
            }
            const localVarPath = `/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"tenant-id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the diagram of a decision requirements definition.
         * @summary Get Decision Requirements Diagram by ID
         * @param {string} id The id of the decision requirements definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionDiagramById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDecisionRequirementsDefinitionDiagramById.');
            }
            const localVarPath = `/decision-requirements-definition/{id}/diagram`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
         * @summary Get Decision Requirements Diagram by Key
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionDiagramByKey: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionDiagramByKey.');
            }
            const localVarPath = `/decision-requirements-definition/key/{key}/diagram`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
         * @summary Get Decision Requirements Diagram by Key and Tenant ID
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionDiagramByKeyAndTenantId: async (key: string, tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionDiagramByKeyAndTenantId.');
            }
            // verify required parameter 'tenantId' is not null or undefined
            if (tenantId === null || tenantId === undefined) {
                throw new RequiredError('tenantId','Required parameter tenantId was null or undefined when calling getDecisionRequirementsDefinitionDiagramByKeyAndTenantId.');
            }
            const localVarPath = `/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"tenant-id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the DMN XML of a decision requirements definition.
         * @summary Get DMN XML by ID
         * @param {string} id The id of the decision requirements definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionDmnXmlById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDecisionRequirementsDefinitionDmnXmlById.');
            }
            const localVarPath = `/decision-requirements-definition/{id}/xml`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
         * @summary Get DMN XML by Key
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionDmnXmlByKey: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionDmnXmlByKey.');
            }
            const localVarPath = `/decision-requirements-definition/key/{key}/xml`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
         * @summary Get DMN XML by Key and Tenant ID
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId: async (key: string, tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId.');
            }
            // verify required parameter 'tenantId' is not null or undefined
            if (tenantId === null || tenantId === undefined) {
                throw new RequiredError('tenantId','Required parameter tenantId was null or undefined when calling getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId.');
            }
            const localVarPath = `/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"tenant-id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query-count/) method.
         * @summary Get Decision Requirements Definitions
         * @param {string} [decisionRequirementsDefinitionId] Filter by decision requirements definition id.
         * @param {string} [decisionRequirementsDefinitionIdIn] Filter by decision requirements definition ids.
         * @param {string} [name] Filter by decision requirements definition name.
         * @param {string} [nameLike] Filter by decision requirements definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the id of the deployment a decision requirement definition belongs to.
         * @param {string} [key] Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
         * @param {string} [keyLike] Filter by decision requirements definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision requirements definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision requirements definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision requirements definition version.
         * @param {boolean} [latestVersion] Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision requirements definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision requirements definition resources that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionRequirementsDefinitionsWithoutTenantId] Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitions: async (decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/decision-requirements-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (decisionRequirementsDefinitionId !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionId'] = decisionRequirementsDefinitionId;
            }

            if (decisionRequirementsDefinitionIdIn !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionIdIn'] = decisionRequirementsDefinitionIdIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (deploymentId !== undefined) {
                localVarQueryParameter['deploymentId'] = deploymentId;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (keyLike !== undefined) {
                localVarQueryParameter['keyLike'] = keyLike;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (categoryLike !== undefined) {
                localVarQueryParameter['categoryLike'] = categoryLike;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (latestVersion !== undefined) {
                localVarQueryParameter['latestVersion'] = latestVersion;
            }

            if (resourceName !== undefined) {
                localVarQueryParameter['resourceName'] = resourceName;
            }

            if (resourceNameLike !== undefined) {
                localVarQueryParameter['resourceNameLike'] = resourceNameLike;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (includeDecisionRequirementsDefinitionsWithoutTenantId !== undefined) {
                localVarQueryParameter['includeDecisionRequirementsDefinitionsWithoutTenantId'] = includeDecisionRequirementsDefinitionsWithoutTenantId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query/) method.
         * @summary Get Decision Requirements Definition Count
         * @param {string} [decisionRequirementsDefinitionId] Filter by decision requirements definition id.
         * @param {string} [decisionRequirementsDefinitionIdIn] Filter by decision requirements definition ids.
         * @param {string} [name] Filter by decision requirements definition name.
         * @param {string} [nameLike] Filter by decision requirements definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the id of the deployment a decision requirement definition belongs to.
         * @param {string} [key] Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
         * @param {string} [keyLike] Filter by decision requirements definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision requirements definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision requirements definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision requirements definition version.
         * @param {boolean} [latestVersion] Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision requirements definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision requirements definition resources that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionRequirementsDefinitionsWithoutTenantId] Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionRequirementsDefinitionsCount: async (decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/decision-requirements-definition/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (decisionRequirementsDefinitionId !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionId'] = decisionRequirementsDefinitionId;
            }

            if (decisionRequirementsDefinitionIdIn !== undefined) {
                localVarQueryParameter['decisionRequirementsDefinitionIdIn'] = decisionRequirementsDefinitionIdIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (deploymentId !== undefined) {
                localVarQueryParameter['deploymentId'] = deploymentId;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (keyLike !== undefined) {
                localVarQueryParameter['keyLike'] = keyLike;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (categoryLike !== undefined) {
                localVarQueryParameter['categoryLike'] = categoryLike;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (latestVersion !== undefined) {
                localVarQueryParameter['latestVersion'] = latestVersion;
            }

            if (resourceName !== undefined) {
                localVarQueryParameter['resourceName'] = resourceName;
            }

            if (resourceNameLike !== undefined) {
                localVarQueryParameter['resourceNameLike'] = resourceNameLike;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (includeDecisionRequirementsDefinitionsWithoutTenantId !== undefined) {
                localVarQueryParameter['includeDecisionRequirementsDefinitionsWithoutTenantId'] = includeDecisionRequirementsDefinitionsWithoutTenantId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DecisionRequirementsDefinitionApi - functional programming interface
 * @export
 */
export const DecisionRequirementsDefinitionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.
         * @summary Get Decision Requirements Definition by ID
         * @param {string} id The id of the decision requirements definition to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionRequirementsDefinitionDto>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
         * @summary Get Decision Requirements Definition by Key
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionByKey(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionRequirementsDefinitionDto>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionByKey(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
         * @summary Get Decision Requirements Definition by Key and Tenant ID
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionRequirementsDefinitionDto>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionByKeyAndTenantId(key, tenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the diagram of a decision requirements definition.
         * @summary Get Decision Requirements Diagram by ID
         * @param {string} id The id of the decision requirements definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDiagramById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionDiagramById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
         * @summary Get Decision Requirements Diagram by Key
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDiagramByKey(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionDiagramByKey(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
         * @summary Get Decision Requirements Diagram by Key and Tenant ID
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key, tenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the DMN XML of a decision requirements definition.
         * @summary Get DMN XML by ID
         * @param {string} id The id of the decision requirements definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDmnXmlById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionRequirementsDefinitionXmlDto>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionDmnXmlById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
         * @summary Get DMN XML by Key
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDmnXmlByKey(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionRequirementsDefinitionXmlDto>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionDmnXmlByKey(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
         * @summary Get DMN XML by Key and Tenant ID
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DecisionRequirementsDefinitionXmlDto>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key, tenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query-count/) method.
         * @summary Get Decision Requirements Definitions
         * @param {string} [decisionRequirementsDefinitionId] Filter by decision requirements definition id.
         * @param {string} [decisionRequirementsDefinitionIdIn] Filter by decision requirements definition ids.
         * @param {string} [name] Filter by decision requirements definition name.
         * @param {string} [nameLike] Filter by decision requirements definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the id of the deployment a decision requirement definition belongs to.
         * @param {string} [key] Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
         * @param {string} [keyLike] Filter by decision requirements definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision requirements definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision requirements definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision requirements definition version.
         * @param {boolean} [latestVersion] Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision requirements definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision requirements definition resources that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionRequirementsDefinitionsWithoutTenantId] Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DecisionRequirementsDefinitionDto>>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query/) method.
         * @summary Get Decision Requirements Definition Count
         * @param {string} [decisionRequirementsDefinitionId] Filter by decision requirements definition id.
         * @param {string} [decisionRequirementsDefinitionIdIn] Filter by decision requirements definition ids.
         * @param {string} [name] Filter by decision requirements definition name.
         * @param {string} [nameLike] Filter by decision requirements definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the id of the deployment a decision requirement definition belongs to.
         * @param {string} [key] Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
         * @param {string} [keyLike] Filter by decision requirements definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision requirements definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision requirements definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision requirements definition version.
         * @param {boolean} [latestVersion] Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision requirements definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision requirements definition resources that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionRequirementsDefinitionsWithoutTenantId] Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await DecisionRequirementsDefinitionApiAxiosParamCreator(configuration).getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DecisionRequirementsDefinitionApi - factory interface
 * @export
 */
export const DecisionRequirementsDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.
         * @summary Get Decision Requirements Definition by ID
         * @param {string} id The id of the decision requirements definition to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionById(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionRequirementsDefinitionDto>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
         * @summary Get Decision Requirements Definition by Key
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionByKey(key: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionRequirementsDefinitionDto>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionByKey(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
         * @summary Get Decision Requirements Definition by Key and Tenant ID
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionRequirementsDefinitionDto>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionByKeyAndTenantId(key, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the diagram of a decision requirements definition.
         * @summary Get Decision Requirements Diagram by ID
         * @param {string} id The id of the decision requirements definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDiagramById(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionDiagramById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
         * @summary Get Decision Requirements Diagram by Key
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDiagramByKey(key: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionDiagramByKey(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
         * @summary Get Decision Requirements Diagram by Key and Tenant ID
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the DMN XML of a decision requirements definition.
         * @summary Get DMN XML by ID
         * @param {string} id The id of the decision requirements definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDmnXmlById(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionRequirementsDefinitionXmlDto>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionDmnXmlById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
         * @summary Get DMN XML by Key
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDmnXmlByKey(key: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionRequirementsDefinitionXmlDto>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionDmnXmlByKey(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
         * @summary Get DMN XML by Key and Tenant ID
         * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
         * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DecisionRequirementsDefinitionXmlDto>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key, tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query-count/) method.
         * @summary Get Decision Requirements Definitions
         * @param {string} [decisionRequirementsDefinitionId] Filter by decision requirements definition id.
         * @param {string} [decisionRequirementsDefinitionIdIn] Filter by decision requirements definition ids.
         * @param {string} [name] Filter by decision requirements definition name.
         * @param {string} [nameLike] Filter by decision requirements definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the id of the deployment a decision requirement definition belongs to.
         * @param {string} [key] Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
         * @param {string} [keyLike] Filter by decision requirements definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision requirements definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision requirements definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision requirements definition version.
         * @param {boolean} [latestVersion] Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision requirements definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision requirements definition resources that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionRequirementsDefinitionsWithoutTenantId] Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DecisionRequirementsDefinitionDto>>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query/) method.
         * @summary Get Decision Requirements Definition Count
         * @param {string} [decisionRequirementsDefinitionId] Filter by decision requirements definition id.
         * @param {string} [decisionRequirementsDefinitionIdIn] Filter by decision requirements definition ids.
         * @param {string} [name] Filter by decision requirements definition name.
         * @param {string} [nameLike] Filter by decision requirements definition names that the parameter is a substring of.
         * @param {string} [deploymentId] Filter by the id of the deployment a decision requirement definition belongs to.
         * @param {string} [key] Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
         * @param {string} [keyLike] Filter by decision requirements definition keys that the parameter is a substring of.
         * @param {string} [category] Filter by decision requirements definition category. Exact match.
         * @param {string} [categoryLike] Filter by decision requirements definition categories that the parameter is a substring of.
         * @param {number} [version] Filter by decision requirements definition version.
         * @param {boolean} [latestVersion] Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [resourceName] Filter by the name of the decision requirements definition resource. Exact match.
         * @param {string} [resourceNameLike] Filter by names of those decision requirements definition resources that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDecisionRequirementsDefinitionsWithoutTenantId] Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return DecisionRequirementsDefinitionApiFp(configuration).getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DecisionRequirementsDefinitionApi - object-oriented interface
 * @export
 * @class DecisionRequirementsDefinitionApi
 * @extends {BaseAPI}
 */
export class DecisionRequirementsDefinitionApi extends BaseAPI {
    /**
     * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.
     * @summary Get Decision Requirements Definition by ID
     * @param {string} id The id of the decision requirements definition to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionById(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionRequirementsDefinitionDto>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
     * @summary Get Decision Requirements Definition by Key
     * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionByKey(key: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionRequirementsDefinitionDto>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionByKey(key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition` interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
     * @summary Get Decision Requirements Definition by Key and Tenant ID
     * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionRequirementsDefinitionDto>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionByKeyAndTenantId(key, tenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the diagram of a decision requirements definition.
     * @summary Get Decision Requirements Diagram by ID
     * @param {string} id The id of the decision requirements definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionDiagramById(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionDiagramById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
     * @summary Get Decision Requirements Diagram by Key
     * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionDiagramByKey(key: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionDiagramByKey(key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
     * @summary Get Decision Requirements Diagram by Key and Tenant ID
     * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key, tenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the DMN XML of a decision requirements definition.
     * @summary Get DMN XML by ID
     * @param {string} id The id of the decision requirements definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionDmnXmlById(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionRequirementsDefinitionXmlDto>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionDmnXmlById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
     * @summary Get DMN XML by Key
     * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionDmnXmlByKey(key: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionRequirementsDefinitionXmlDto>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionDmnXmlByKey(key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
     * @summary Get DMN XML by Key and Tenant ID
     * @param {string} key The key of the decision requirements definition (the latest version thereof) to be retrieved.
     * @param {string} tenantId The id of the tenant to which the decision requirements definition belongs to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key: string, tenantId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DecisionRequirementsDefinitionXmlDto>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key, tenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query-count/) method.
     * @summary Get Decision Requirements Definitions
     * @param {string} [decisionRequirementsDefinitionId] Filter by decision requirements definition id.
     * @param {string} [decisionRequirementsDefinitionIdIn] Filter by decision requirements definition ids.
     * @param {string} [name] Filter by decision requirements definition name.
     * @param {string} [nameLike] Filter by decision requirements definition names that the parameter is a substring of.
     * @param {string} [deploymentId] Filter by the id of the deployment a decision requirement definition belongs to.
     * @param {string} [key] Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
     * @param {string} [keyLike] Filter by decision requirements definition keys that the parameter is a substring of.
     * @param {string} [category] Filter by decision requirements definition category. Exact match.
     * @param {string} [categoryLike] Filter by decision requirements definition categories that the parameter is a substring of.
     * @param {number} [version] Filter by decision requirements definition version.
     * @param {boolean} [latestVersion] Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [resourceName] Filter by the name of the decision requirements definition resource. Exact match.
     * @param {string} [resourceNameLike] Filter by names of those decision requirements definition resources that the parameter is a substring of.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeDecisionRequirementsDefinitionsWithoutTenantId] Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DecisionRequirementsDefinitionDto>>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitions(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query/) method.
     * @summary Get Decision Requirements Definition Count
     * @param {string} [decisionRequirementsDefinitionId] Filter by decision requirements definition id.
     * @param {string} [decisionRequirementsDefinitionIdIn] Filter by decision requirements definition ids.
     * @param {string} [name] Filter by decision requirements definition name.
     * @param {string} [nameLike] Filter by decision requirements definition names that the parameter is a substring of.
     * @param {string} [deploymentId] Filter by the id of the deployment a decision requirement definition belongs to.
     * @param {string} [key] Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match.
     * @param {string} [keyLike] Filter by decision requirements definition keys that the parameter is a substring of.
     * @param {string} [category] Filter by decision requirements definition category. Exact match.
     * @param {string} [categoryLike] Filter by decision requirements definition categories that the parameter is a substring of.
     * @param {number} [version] Filter by decision requirements definition version.
     * @param {boolean} [latestVersion] Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [resourceName] Filter by the name of the decision requirements definition resource. Exact match.
     * @param {string} [resourceNameLike] Filter by names of those decision requirements definition resources that the parameter is a substring of.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeDecisionRequirementsDefinitionsWithoutTenantId] Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionRequirementsDefinitionApi
     */
    public async getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId?: string, decisionRequirementsDefinitionIdIn?: string, name?: string, nameLike?: string, deploymentId?: string, key?: string, keyLike?: string, category?: string, categoryLike?: string, version?: number, latestVersion?: boolean, resourceName?: string, resourceNameLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return DecisionRequirementsDefinitionApiFp(this.configuration).getDecisionRequirementsDefinitionsCount(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId, options).then((request) => request(this.axios, this.basePath));
    }
}

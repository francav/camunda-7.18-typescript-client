/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BatchDto } from '../models';
import { BatchStatisticsDto } from '../models';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { SuspensionStateDto } from '../models';
/**
 * BatchApi - axios parameter creator
 * @export
 */
export const BatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.
         * @summary Delete
         * @param {string} id The id of the batch to be deleted.
         * @param {boolean} [cascade] &#x60;true&#x60;, if the historic batch and historic job logs for this batch should also be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch: async (id: string, cascade?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteBatch.');
            }
            const localVarPath = `/batch/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cascade !== undefined) {
                localVarQueryParameter['cascade'] = cascade;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a batch by id, according to the Batch interface in the engine.
         * @summary Get
         * @param {string} id The id of the batch to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatch: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getBatch.');
            }
            const localVarPath = `/batch/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the  [Get Batch Statistics Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query-count/) method.
         * @summary Get Statistics
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchStatistics: async (sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batch/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (batchId !== undefined) {
                localVarQueryParameter['batchId'] = batchId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            if (withFailures !== undefined) {
                localVarQueryParameter['withFailures'] = withFailures;
            }

            if (withoutFailures !== undefined) {
                localVarQueryParameter['withoutFailures'] = withoutFailures;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests the number of batch statistics that fulfill the query criteria. Takes the same filtering parameters as the [Get Batch Statistics](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query/) method.
         * @summary Get Statistics Count
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchStatisticsCount: async (batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batch/statistics/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (batchId !== undefined) {
                localVarQueryParameter['batchId'] = batchId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            if (withFailures !== undefined) {
                localVarQueryParameter['withFailures'] = withFailures;
            }

            if (withoutFailures !== undefined) {
                localVarQueryParameter['withoutFailures'] = withoutFailures;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the [Get Batch Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatches: async (sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (batchId !== undefined) {
                localVarQueryParameter['batchId'] = batchId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            if (withFailures !== undefined) {
                localVarQueryParameter['withFailures'] = withFailures;
            }

            if (withoutFailures !== undefined) {
                localVarQueryParameter['withoutFailures'] = withoutFailures;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the [Get Batches](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query/) method.
         * @summary Get List Count
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchesCount: async (batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batch/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (batchId !== undefined) {
                localVarQueryParameter['batchId'] = batchId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = (startedBefore as any instanceof Date) ?
                    (startedBefore as any).toISOString() :
                    startedBefore;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = (startedAfter as any instanceof Date) ?
                    (startedAfter as any).toISOString() :
                    startedAfter;
            }

            if (withFailures !== undefined) {
                localVarQueryParameter['withFailures'] = withFailures;
            }

            if (withoutFailures !== undefined) {
                localVarQueryParameter['withoutFailures'] = withoutFailures;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates or suspends a batch by id.
         * @summary Activate/Suspend
         * @param {string} id The id of the batch to activate or suspend.
         * @param {SuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBatchSuspensionState: async (id: string, body?: SuspensionStateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateBatchSuspensionState.');
            }
            const localVarPath = `/batch/{id}/suspended`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchApi - functional programming interface
 * @export
 */
export const BatchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.
         * @summary Delete
         * @param {string} id The id of the batch to be deleted.
         * @param {boolean} [cascade] &#x60;true&#x60;, if the historic batch and historic job logs for this batch should also be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBatch(id: string, cascade?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BatchApiAxiosParamCreator(configuration).deleteBatch(id, cascade, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a batch by id, according to the Batch interface in the engine.
         * @summary Get
         * @param {string} id The id of the batch to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatch(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await BatchApiAxiosParamCreator(configuration).getBatch(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the  [Get Batch Statistics Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query-count/) method.
         * @summary Get Statistics
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchStatistics(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<BatchStatisticsDto>>>> {
            const localVarAxiosArgs = await BatchApiAxiosParamCreator(configuration).getBatchStatistics(sortBy, sortOrder, firstResult, maxResults, batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requests the number of batch statistics that fulfill the query criteria. Takes the same filtering parameters as the [Get Batch Statistics](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query/) method.
         * @summary Get Statistics Count
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchStatisticsCount(batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await BatchApiAxiosParamCreator(configuration).getBatchStatisticsCount(batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the [Get Batch Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatches(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<BatchDto>>>> {
            const localVarAxiosArgs = await BatchApiAxiosParamCreator(configuration).getBatches(sortBy, sortOrder, firstResult, maxResults, batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the [Get Batches](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query/) method.
         * @summary Get List Count
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchesCount(batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await BatchApiAxiosParamCreator(configuration).getBatchesCount(batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Activates or suspends a batch by id.
         * @summary Activate/Suspend
         * @param {string} id The id of the batch to activate or suspend.
         * @param {SuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBatchSuspensionState(id: string, body?: SuspensionStateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BatchApiAxiosParamCreator(configuration).updateBatchSuspensionState(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BatchApi - factory interface
 * @export
 */
export const BatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.
         * @summary Delete
         * @param {string} id The id of the batch to be deleted.
         * @param {boolean} [cascade] &#x60;true&#x60;, if the historic batch and historic job logs for this batch should also be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBatch(id: string, cascade?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BatchApiFp(configuration).deleteBatch(id, cascade, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a batch by id, according to the Batch interface in the engine.
         * @summary Get
         * @param {string} id The id of the batch to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatch(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return BatchApiFp(configuration).getBatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the  [Get Batch Statistics Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query-count/) method.
         * @summary Get Statistics
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchStatistics(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<BatchStatisticsDto>>> {
            return BatchApiFp(configuration).getBatchStatistics(sortBy, sortOrder, firstResult, maxResults, batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests the number of batch statistics that fulfill the query criteria. Takes the same filtering parameters as the [Get Batch Statistics](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query/) method.
         * @summary Get Statistics Count
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchStatisticsCount(batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return BatchApiFp(configuration).getBatchStatisticsCount(batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the [Get Batch Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query-count/) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatches(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<BatchDto>>> {
            return BatchApiFp(configuration).getBatches(sortBy, sortOrder, firstResult, maxResults, batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the [Get Batches](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query/) method.
         * @summary Get List Count
         * @param {string} [batchId] Filter by batch id.
         * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
         * @param {string} [createdBy] Only include batches that were started by this user id.
         * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
         * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchesCount(batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return BatchApiFp(configuration).getBatchesCount(batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates or suspends a batch by id.
         * @summary Activate/Suspend
         * @param {string} id The id of the batch to activate or suspend.
         * @param {SuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBatchSuspensionState(id: string, body?: SuspensionStateDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BatchApiFp(configuration).updateBatchSuspensionState(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BatchApi - object-oriented interface
 * @export
 * @class BatchApi
 * @extends {BaseAPI}
 */
export class BatchApi extends BaseAPI {
    /**
     * Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.
     * @summary Delete
     * @param {string} id The id of the batch to be deleted.
     * @param {boolean} [cascade] &#x60;true&#x60;, if the historic batch and historic job logs for this batch should also be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public async deleteBatch(id: string, cascade?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return BatchApiFp(this.configuration).deleteBatch(id, cascade, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a batch by id, according to the Batch interface in the engine.
     * @summary Get
     * @param {string} id The id of the batch to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public async getBatch(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return BatchApiFp(this.configuration).getBatch(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the  [Get Batch Statistics Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query-count/) method.
     * @summary Get Statistics
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {string} [batchId] Filter by batch id.
     * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
     * @param {string} [createdBy] Only include batches that were started by this user id.
     * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
     * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public async getBatchStatistics(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<BatchStatisticsDto>>> {
        return BatchApiFp(this.configuration).getBatchStatistics(sortBy, sortOrder, firstResult, maxResults, batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requests the number of batch statistics that fulfill the query criteria. Takes the same filtering parameters as the [Get Batch Statistics](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-statistics-query/) method.
     * @summary Get Statistics Count
     * @param {string} [batchId] Filter by batch id.
     * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
     * @param {string} [createdBy] Only include batches that were started by this user id.
     * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
     * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public async getBatchStatisticsCount(batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return BatchApiFp(this.configuration).getBatchStatisticsCount(batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the [Get Batch Count](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query-count/) method.
     * @summary Get List
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {string} [batchId] Filter by batch id.
     * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
     * @param {string} [createdBy] Only include batches that were started by this user id.
     * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
     * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public async getBatches(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<BatchDto>>> {
        return BatchApiFp(this.configuration).getBatches(sortBy, sortOrder, firstResult, maxResults, batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the [Get Batches](https://docs.camunda.org/manual/7.18/reference/rest/batch/get-query/) method.
     * @summary Get List Count
     * @param {string} [batchId] Filter by batch id.
     * @param {string} [type] Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [suspended] A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
     * @param {string} [createdBy] Only include batches that were started by this user id.
     * @param {Date} [startedBefore] Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [startedAfter] Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {boolean} [withFailures] Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
     * @param {boolean} [withoutFailures] Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public async getBatchesCount(batchId?: string, type?: string, tenantIdIn?: string, withoutTenantId?: boolean, suspended?: boolean, createdBy?: string, startedBefore?: Date, startedAfter?: Date, withFailures?: boolean, withoutFailures?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return BatchApiFp(this.configuration).getBatchesCount(batchId, type, tenantIdIn, withoutTenantId, suspended, createdBy, startedBefore, startedAfter, withFailures, withoutFailures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activates or suspends a batch by id.
     * @summary Activate/Suspend
     * @param {string} id The id of the batch to activate or suspend.
     * @param {SuspensionStateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public async updateBatchSuspensionState(id: string, body?: SuspensionStateDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return BatchApiFp(this.configuration).updateBatchSuspensionState(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}

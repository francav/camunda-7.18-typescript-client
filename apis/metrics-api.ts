/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExceptionDto } from '../models';
import { MetricsIntervalResultDto } from '../models';
import { MetricsResultDto } from '../models';
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes all task worker metrics prior to the given date or all if no date is provided.
         * @summary Delete Task Worker Metrics
         * @param {Date} [date] The date prior to which all task worker metrics should be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskMetrics: async (date?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics/task-worker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the `sum` (count) for a given metric.
         * @summary Get Sum
         * @param {string} metricsName The name of the metric.
         * @param {Date} [startDate] The start date (inclusive).
         * @param {Date} [endDate] The end date (exclusive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics: async (metricsName: string, startDate?: Date, endDate?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricsName' is not null or undefined
            if (metricsName === null || metricsName === undefined) {
                throw new RequiredError('metricsName','Required parameter metricsName was null or undefined when calling getMetrics.');
            }
            const localVarPath = `/metrics/{metrics-name}/sum`
                .replace(`{${"metrics-name"}}`, encodeURIComponent(String(metricsName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of metrics, aggregated for a given interval.
         * @summary Get Metrics in Interval
         * @param {string} [name] The name of the metric.
         * @param {string} [reporter] The name of the reporter (host), on which the metrics was logged. This will have value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.18/reference/deployment-descriptors/tags/process-engine/#hostname).
         * @param {Date} [startDate] The start date (inclusive).
         * @param {Date} [endDate] The end date (exclusive).
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [interval] The interval for which the metrics should be aggregated. Time unit is seconds. Default: The interval is set to 15 minutes (900 seconds).
         * @param {string} [aggregateByReporter] Aggregate metrics by reporter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interval: async (name?: string, reporter?: string, startDate?: Date, endDate?: Date, firstResult?: number, maxResults?: number, interval?: string, aggregateByReporter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (reporter !== undefined) {
                localVarQueryParameter['reporter'] = reporter;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (aggregateByReporter !== undefined) {
                localVarQueryParameter['aggregateByReporter'] = aggregateByReporter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes all task worker metrics prior to the given date or all if no date is provided.
         * @summary Delete Task Worker Metrics
         * @param {Date} [date] The date prior to which all task worker metrics should be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskMetrics(date?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MetricsApiAxiosParamCreator(configuration).deleteTaskMetrics(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the `sum` (count) for a given metric.
         * @summary Get Sum
         * @param {string} metricsName The name of the metric.
         * @param {Date} [startDate] The start date (inclusive).
         * @param {Date} [endDate] The end date (exclusive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetrics(metricsName: string, startDate?: Date, endDate?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MetricsResultDto>>> {
            const localVarAxiosArgs = await MetricsApiAxiosParamCreator(configuration).getMetrics(metricsName, startDate, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of metrics, aggregated for a given interval.
         * @summary Get Metrics in Interval
         * @param {string} [name] The name of the metric.
         * @param {string} [reporter] The name of the reporter (host), on which the metrics was logged. This will have value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.18/reference/deployment-descriptors/tags/process-engine/#hostname).
         * @param {Date} [startDate] The start date (inclusive).
         * @param {Date} [endDate] The end date (exclusive).
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [interval] The interval for which the metrics should be aggregated. Time unit is seconds. Default: The interval is set to 15 minutes (900 seconds).
         * @param {string} [aggregateByReporter] Aggregate metrics by reporter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async interval(name?: string, reporter?: string, startDate?: Date, endDate?: Date, firstResult?: number, maxResults?: number, interval?: string, aggregateByReporter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MetricsIntervalResultDto>>>> {
            const localVarAxiosArgs = await MetricsApiAxiosParamCreator(configuration).interval(name, reporter, startDate, endDate, firstResult, maxResults, interval, aggregateByReporter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes all task worker metrics prior to the given date or all if no date is provided.
         * @summary Delete Task Worker Metrics
         * @param {Date} [date] The date prior to which all task worker metrics should be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskMetrics(date?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MetricsApiFp(configuration).deleteTaskMetrics(date, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the `sum` (count) for a given metric.
         * @summary Get Sum
         * @param {string} metricsName The name of the metric.
         * @param {Date} [startDate] The start date (inclusive).
         * @param {Date} [endDate] The end date (exclusive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetrics(metricsName: string, startDate?: Date, endDate?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<MetricsResultDto>> {
            return MetricsApiFp(configuration).getMetrics(metricsName, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of metrics, aggregated for a given interval.
         * @summary Get Metrics in Interval
         * @param {string} [name] The name of the metric.
         * @param {string} [reporter] The name of the reporter (host), on which the metrics was logged. This will have value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.18/reference/deployment-descriptors/tags/process-engine/#hostname).
         * @param {Date} [startDate] The start date (inclusive).
         * @param {Date} [endDate] The end date (exclusive).
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [interval] The interval for which the metrics should be aggregated. Time unit is seconds. Default: The interval is set to 15 minutes (900 seconds).
         * @param {string} [aggregateByReporter] Aggregate metrics by reporter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async interval(name?: string, reporter?: string, startDate?: Date, endDate?: Date, firstResult?: number, maxResults?: number, interval?: string, aggregateByReporter?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MetricsIntervalResultDto>>> {
            return MetricsApiFp(configuration).interval(name, reporter, startDate, endDate, firstResult, maxResults, interval, aggregateByReporter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     * Deletes all task worker metrics prior to the given date or all if no date is provided.
     * @summary Delete Task Worker Metrics
     * @param {Date} [date] The date prior to which all task worker metrics should be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public async deleteTaskMetrics(date?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MetricsApiFp(this.configuration).deleteTaskMetrics(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the `sum` (count) for a given metric.
     * @summary Get Sum
     * @param {string} metricsName The name of the metric.
     * @param {Date} [startDate] The start date (inclusive).
     * @param {Date} [endDate] The end date (exclusive).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public async getMetrics(metricsName: string, startDate?: Date, endDate?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<MetricsResultDto>> {
        return MetricsApiFp(this.configuration).getMetrics(metricsName, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of metrics, aggregated for a given interval.
     * @summary Get Metrics in Interval
     * @param {string} [name] The name of the metric.
     * @param {string} [reporter] The name of the reporter (host), on which the metrics was logged. This will have value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.18/reference/deployment-descriptors/tags/process-engine/#hostname).
     * @param {Date} [startDate] The start date (inclusive).
     * @param {Date} [endDate] The end date (exclusive).
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {string} [interval] The interval for which the metrics should be aggregated. Time unit is seconds. Default: The interval is set to 15 minutes (900 seconds).
     * @param {string} [aggregateByReporter] Aggregate metrics by reporter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public async interval(name?: string, reporter?: string, startDate?: Date, endDate?: Date, firstResult?: number, maxResults?: number, interval?: string, aggregateByReporter?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MetricsIntervalResultDto>>> {
        return MetricsApiFp(this.configuration).interval(name, reporter, startDate, endDate, firstResult, maxResults, interval, aggregateByReporter, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AuthorizationExceptionDto } from '../models';
import { CommentDto } from '../models';
import { ExceptionDto } from '../models';
/**
 * TaskCommentApi - axios parameter creator
 * @export
 */
export const TaskCommentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a comment for a task by id.
         * @summary Create
         * @param {string} id The id of the task to add the comment to.
         * @param {CommentDto} [body] **Note:** Only the &#x60;message&#x60; and &#x60;processInstanceId&#x60; properties will be used. Every other property passed to this endpoint will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (id: string, body?: CommentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createComment.');
            }
            const localVarPath = `/task/{id}/comment/create`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a task comment by task id and comment id.
         * @summary Get
         * @param {string} id The id of the task.
         * @param {string} commentId The id of the comment to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment: async (id: string, commentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getComment.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling getComment.');
            }
            const localVarPath = `/task/{id}/comment/{commentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the comments for a task by id.
         * @summary Get List
         * @param {string} id The id of the task to retrieve the comments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getComments.');
            }
            const localVarPath = `/task/{id}/comment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskCommentApi - functional programming interface
 * @export
 */
export const TaskCommentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a comment for a task by id.
         * @summary Create
         * @param {string} id The id of the task to add the comment to.
         * @param {CommentDto} [body] **Note:** Only the &#x60;message&#x60; and &#x60;processInstanceId&#x60; properties will be used. Every other property passed to this endpoint will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(id: string, body?: CommentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CommentDto>>> {
            const localVarAxiosArgs = await TaskCommentApiAxiosParamCreator(configuration).createComment(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a task comment by task id and comment id.
         * @summary Get
         * @param {string} id The id of the task.
         * @param {string} commentId The id of the comment to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComment(id: string, commentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CommentDto>>> {
            const localVarAxiosArgs = await TaskCommentApiAxiosParamCreator(configuration).getComment(id, commentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the comments for a task by id.
         * @summary Get List
         * @param {string} id The id of the task to retrieve the comments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComments(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CommentDto>>>> {
            const localVarAxiosArgs = await TaskCommentApiAxiosParamCreator(configuration).getComments(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TaskCommentApi - factory interface
 * @export
 */
export const TaskCommentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a comment for a task by id.
         * @summary Create
         * @param {string} id The id of the task to add the comment to.
         * @param {CommentDto} [body] **Note:** Only the &#x60;message&#x60; and &#x60;processInstanceId&#x60; properties will be used. Every other property passed to this endpoint will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(id: string, body?: CommentDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CommentDto>> {
            return TaskCommentApiFp(configuration).createComment(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a task comment by task id and comment id.
         * @summary Get
         * @param {string} id The id of the task.
         * @param {string} commentId The id of the comment to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComment(id: string, commentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CommentDto>> {
            return TaskCommentApiFp(configuration).getComment(id, commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the comments for a task by id.
         * @summary Get List
         * @param {string} id The id of the task to retrieve the comments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComments(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CommentDto>>> {
            return TaskCommentApiFp(configuration).getComments(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskCommentApi - object-oriented interface
 * @export
 * @class TaskCommentApi
 * @extends {BaseAPI}
 */
export class TaskCommentApi extends BaseAPI {
    /**
     * Creates a comment for a task by id.
     * @summary Create
     * @param {string} id The id of the task to add the comment to.
     * @param {CommentDto} [body] **Note:** Only the &#x60;message&#x60; and &#x60;processInstanceId&#x60; properties will be used. Every other property passed to this endpoint will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskCommentApi
     */
    public async createComment(id: string, body?: CommentDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CommentDto>> {
        return TaskCommentApiFp(this.configuration).createComment(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a task comment by task id and comment id.
     * @summary Get
     * @param {string} id The id of the task.
     * @param {string} commentId The id of the comment to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskCommentApi
     */
    public async getComment(id: string, commentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CommentDto>> {
        return TaskCommentApiFp(this.configuration).getComment(id, commentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the comments for a task by id.
     * @summary Get List
     * @param {string} id The id of the task to retrieve the comments for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskCommentApi
     */
    public async getComments(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CommentDto>>> {
        return TaskCommentApiFp(this.configuration).getComments(id, options).then((request) => request(this.axios, this.basePath));
    }
}

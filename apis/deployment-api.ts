/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { DeploymentDto } from '../models';
import { DeploymentResourceDto } from '../models';
import { DeploymentWithDefinitionsDto } from '../models';
import { ExceptionDto } from '../models';
import { ParseExceptionDto } from '../models';
import { RedeploymentDto } from '../models';
/**
 * DeploymentApi - axios parameter creator
 * @export
 */
export const DeploymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
         * @summary Create
         * @param {string} [tenantId] 
         * @param {string} [deploymentSource] 
         * @param {boolean} [deployChangedOnly] 
         * @param {boolean} [enableDuplicateFiltering] 
         * @param {string} [deploymentName] 
         * @param {Date} [deploymentActivationTime] 
         * @param {Blob} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeploymentForm: async (tenantId?: string, deploymentSource?: string, deployChangedOnly?: boolean, enableDuplicateFiltering?: boolean, deploymentName?: string, deploymentActivationTime?: Date, data?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deployment/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (tenantId !== undefined) { 
                localVarFormParams.append('tenant-id', tenantId as any);
            }

            if (deploymentSource !== undefined) { 
                localVarFormParams.append('deployment-source', deploymentSource as any);
            }

            if (deployChangedOnly !== undefined) { 
                localVarFormParams.append('deploy-changed-only', deployChangedOnly as any);
            }

            if (enableDuplicateFiltering !== undefined) { 
                localVarFormParams.append('enable-duplicate-filtering', enableDuplicateFiltering as any);
            }

            if (deploymentName !== undefined) { 
                localVarFormParams.append('deployment-name', deploymentName as any);
            }

            if (deploymentActivationTime !== undefined) { 
                localVarFormParams.append('deployment-activation-time', deploymentActivationTime as any);
            }

            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a deployment by id.
         * @summary Delete
         * @param {string} id The id of the deployment to be deleted.
         * @param {boolean} [cascade] &#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted.
         * @param {boolean} [skipCustomListeners] &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event.
         * @param {boolean} [skipIoMappings] &#x60;true&#x60;, if all input/output mappings should not be invoked.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployment: async (id: string, cascade?: boolean, skipCustomListeners?: boolean, skipIoMappings?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDeployment.');
            }
            const localVarPath = `/deployment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cascade !== undefined) {
                localVarQueryParameter['cascade'] = cascade;
            }

            if (skipCustomListeners !== undefined) {
                localVarQueryParameter['skipCustomListeners'] = skipCustomListeners;
            }

            if (skipIoMappings !== undefined) {
                localVarQueryParameter['skipIoMappings'] = skipIoMappings;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a deployment by id, according to the `Deployment` interface of the engine.
         * @summary Get
         * @param {string} id The id of the deployment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDeployment.');
            }
            const localVarPath = `/deployment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a deployment resource by resource id for the given deployment.
         * @summary Get Resource
         * @param {string} id The id of the deployment
         * @param {string} resourceId The id of the deployment resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentResource: async (id: string, resourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDeploymentResource.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling getDeploymentResource.');
            }
            const localVarPath = `/deployment/{id}/resources/{resourceId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the binary content of a deployment resource for the given deployment by id.
         * @summary Get Resource (Binary)
         * @param {string} id The id of the deployment.
         * @param {string} resourceId The id of the deployment resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentResourceData: async (id: string, resourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDeploymentResourceData.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling getDeploymentResourceData.');
            }
            const localVarPath = `/deployment/{id}/resources/{resourceId}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all deployment resources of a given deployment.
         * @summary Get Resources
         * @param {string} id The id of the deployment to retrieve the deployment resources for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentResources: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDeploymentResources.');
            }
            const localVarPath = `/deployment/{id}/resources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.18/reference/rest/deployment/get-query-count/) method.
         * @summary Get List
         * @param {string} [id] Filter by deployment id
         * @param {string} [name] Filter by the deployment name. Exact match.
         * @param {string} [nameLike] Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [source] Filter by the deployment source.
         * @param {boolean} [withoutSource] Filter by the deployment source whereby source is equal to &#x60;null&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDeploymentsWithoutTenantId] Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [after] Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [before] Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployments: async (id?: string, name?: string, nameLike?: string, source?: string, withoutSource?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDeploymentsWithoutTenantId?: boolean, after?: Date, before?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deployment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (withoutSource !== undefined) {
                localVarQueryParameter['withoutSource'] = withoutSource;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (includeDeploymentsWithoutTenantId !== undefined) {
                localVarQueryParameter['includeDeploymentsWithoutTenantId'] = includeDeploymentsWithoutTenantId;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.18/reference/rest/deployment/get-query/) method.
         * @summary Get List Count
         * @param {string} [id] Filter by deployment id
         * @param {string} [name] Filter by the deployment name. Exact match.
         * @param {string} [nameLike] Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [source] Filter by the deployment source.
         * @param {boolean} [withoutSource] Filter by the deployment source whereby source is equal to &#x60;null&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDeploymentsWithoutTenantId] Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [after] Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [before] Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentsCount: async (id?: string, name?: string, nameLike?: string, source?: string, withoutSource?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDeploymentsWithoutTenantId?: boolean, after?: Date, before?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deployment/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (withoutSource !== undefined) {
                localVarQueryParameter['withoutSource'] = withoutSource;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (includeDeploymentsWithoutTenantId !== undefined) {
                localVarQueryParameter['includeDeploymentsWithoutTenantId'] = includeDeploymentsWithoutTenantId;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries the registered deployment IDs for the current application.
         * @summary Get Registered Deployments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredDeployments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deployment/registered`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.18/user-guide/process-engine/securing-custom-code/) in the user guide for details.
         * @summary Redeploy
         * @param {string} id The id of the deployment to re-deploy.
         * @param {RedeploymentDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeploy: async (id: string, body?: RedeploymentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling redeploy.');
            }
            const localVarPath = `/deployment/{id}/redeploy`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeploymentApi - functional programming interface
 * @export
 */
export const DeploymentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
         * @summary Create
         * @param {string} [tenantId] 
         * @param {string} [deploymentSource] 
         * @param {boolean} [deployChangedOnly] 
         * @param {boolean} [enableDuplicateFiltering] 
         * @param {string} [deploymentName] 
         * @param {Date} [deploymentActivationTime] 
         * @param {Blob} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeploymentForm(tenantId?: string, deploymentSource?: string, deployChangedOnly?: boolean, enableDuplicateFiltering?: boolean, deploymentName?: string, deploymentActivationTime?: Date, data?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeploymentWithDefinitionsDto>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).createDeploymentForm(tenantId, deploymentSource, deployChangedOnly, enableDuplicateFiltering, deploymentName, deploymentActivationTime, data, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a deployment by id.
         * @summary Delete
         * @param {string} id The id of the deployment to be deleted.
         * @param {boolean} [cascade] &#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted.
         * @param {boolean} [skipCustomListeners] &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event.
         * @param {boolean} [skipIoMappings] &#x60;true&#x60;, if all input/output mappings should not be invoked.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeployment(id: string, cascade?: boolean, skipCustomListeners?: boolean, skipIoMappings?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).deleteDeployment(id, cascade, skipCustomListeners, skipIoMappings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a deployment by id, according to the `Deployment` interface of the engine.
         * @summary Get
         * @param {string} id The id of the deployment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeployment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeploymentDto>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).getDeployment(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a deployment resource by resource id for the given deployment.
         * @summary Get Resource
         * @param {string} id The id of the deployment
         * @param {string} resourceId The id of the deployment resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentResource(id: string, resourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeploymentResourceDto>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).getDeploymentResource(id, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the binary content of a deployment resource for the given deployment by id.
         * @summary Get Resource (Binary)
         * @param {string} id The id of the deployment.
         * @param {string} resourceId The id of the deployment resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentResourceData(id: string, resourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).getDeploymentResourceData(id, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all deployment resources of a given deployment.
         * @summary Get Resources
         * @param {string} id The id of the deployment to retrieve the deployment resources for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentResources(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DeploymentResourceDto>>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).getDeploymentResources(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.18/reference/rest/deployment/get-query-count/) method.
         * @summary Get List
         * @param {string} [id] Filter by deployment id
         * @param {string} [name] Filter by the deployment name. Exact match.
         * @param {string} [nameLike] Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [source] Filter by the deployment source.
         * @param {boolean} [withoutSource] Filter by the deployment source whereby source is equal to &#x60;null&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDeploymentsWithoutTenantId] Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [after] Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [before] Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeployments(id?: string, name?: string, nameLike?: string, source?: string, withoutSource?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDeploymentsWithoutTenantId?: boolean, after?: Date, before?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DeploymentDto>>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).getDeployments(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, sortBy, sortOrder, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.18/reference/rest/deployment/get-query/) method.
         * @summary Get List Count
         * @param {string} [id] Filter by deployment id
         * @param {string} [name] Filter by the deployment name. Exact match.
         * @param {string} [nameLike] Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [source] Filter by the deployment source.
         * @param {boolean} [withoutSource] Filter by the deployment source whereby source is equal to &#x60;null&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDeploymentsWithoutTenantId] Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [after] Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [before] Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentsCount(id?: string, name?: string, nameLike?: string, source?: string, withoutSource?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDeploymentsWithoutTenantId?: boolean, after?: Date, before?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).getDeploymentsCount(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries the registered deployment IDs for the current application.
         * @summary Get Registered Deployments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegisteredDeployments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).getRegisteredDeployments(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.18/user-guide/process-engine/securing-custom-code/) in the user guide for details.
         * @summary Redeploy
         * @param {string} id The id of the deployment to re-deploy.
         * @param {RedeploymentDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeploy(id: string, body?: RedeploymentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeploymentWithDefinitionsDto>>> {
            const localVarAxiosArgs = await DeploymentApiAxiosParamCreator(configuration).redeploy(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeploymentApi - factory interface
 * @export
 */
export const DeploymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
         * @summary Create
         * @param {string} [tenantId] 
         * @param {string} [deploymentSource] 
         * @param {boolean} [deployChangedOnly] 
         * @param {boolean} [enableDuplicateFiltering] 
         * @param {string} [deploymentName] 
         * @param {Date} [deploymentActivationTime] 
         * @param {Blob} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeploymentForm(tenantId?: string, deploymentSource?: string, deployChangedOnly?: boolean, enableDuplicateFiltering?: boolean, deploymentName?: string, deploymentActivationTime?: Date, data?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<DeploymentWithDefinitionsDto>> {
            return DeploymentApiFp(configuration).createDeploymentForm(tenantId, deploymentSource, deployChangedOnly, enableDuplicateFiltering, deploymentName, deploymentActivationTime, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a deployment by id.
         * @summary Delete
         * @param {string} id The id of the deployment to be deleted.
         * @param {boolean} [cascade] &#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted.
         * @param {boolean} [skipCustomListeners] &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event.
         * @param {boolean} [skipIoMappings] &#x60;true&#x60;, if all input/output mappings should not be invoked.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeployment(id: string, cascade?: boolean, skipCustomListeners?: boolean, skipIoMappings?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DeploymentApiFp(configuration).deleteDeployment(id, cascade, skipCustomListeners, skipIoMappings, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a deployment by id, according to the `Deployment` interface of the engine.
         * @summary Get
         * @param {string} id The id of the deployment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeployment(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DeploymentDto>> {
            return DeploymentApiFp(configuration).getDeployment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a deployment resource by resource id for the given deployment.
         * @summary Get Resource
         * @param {string} id The id of the deployment
         * @param {string} resourceId The id of the deployment resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentResource(id: string, resourceId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DeploymentResourceDto>> {
            return DeploymentApiFp(configuration).getDeploymentResource(id, resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the binary content of a deployment resource for the given deployment by id.
         * @summary Get Resource (Binary)
         * @param {string} id The id of the deployment.
         * @param {string} resourceId The id of the deployment resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentResourceData(id: string, resourceId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return DeploymentApiFp(configuration).getDeploymentResourceData(id, resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all deployment resources of a given deployment.
         * @summary Get Resources
         * @param {string} id The id of the deployment to retrieve the deployment resources for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentResources(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DeploymentResourceDto>>> {
            return DeploymentApiFp(configuration).getDeploymentResources(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.18/reference/rest/deployment/get-query-count/) method.
         * @summary Get List
         * @param {string} [id] Filter by deployment id
         * @param {string} [name] Filter by the deployment name. Exact match.
         * @param {string} [nameLike] Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [source] Filter by the deployment source.
         * @param {boolean} [withoutSource] Filter by the deployment source whereby source is equal to &#x60;null&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDeploymentsWithoutTenantId] Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [after] Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [before] Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeployments(id?: string, name?: string, nameLike?: string, source?: string, withoutSource?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDeploymentsWithoutTenantId?: boolean, after?: Date, before?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DeploymentDto>>> {
            return DeploymentApiFp(configuration).getDeployments(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.18/reference/rest/deployment/get-query/) method.
         * @summary Get List Count
         * @param {string} [id] Filter by deployment id
         * @param {string} [name] Filter by the deployment name. Exact match.
         * @param {string} [nameLike] Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [source] Filter by the deployment source.
         * @param {boolean} [withoutSource] Filter by the deployment source whereby source is equal to &#x60;null&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeDeploymentsWithoutTenantId] Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [after] Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [before] Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentsCount(id?: string, name?: string, nameLike?: string, source?: string, withoutSource?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDeploymentsWithoutTenantId?: boolean, after?: Date, before?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return DeploymentApiFp(configuration).getDeploymentsCount(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries the registered deployment IDs for the current application.
         * @summary Get Registered Deployments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegisteredDeployments(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return DeploymentApiFp(configuration).getRegisteredDeployments(options).then((request) => request(axios, basePath));
        },
        /**
         * Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.18/user-guide/process-engine/securing-custom-code/) in the user guide for details.
         * @summary Redeploy
         * @param {string} id The id of the deployment to re-deploy.
         * @param {RedeploymentDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeploy(id: string, body?: RedeploymentDto, options?: AxiosRequestConfig): Promise<AxiosResponse<DeploymentWithDefinitionsDto>> {
            return DeploymentApiFp(configuration).redeploy(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeploymentApi - object-oriented interface
 * @export
 * @class DeploymentApi
 * @extends {BaseAPI}
 */
export class DeploymentApi extends BaseAPI {
    /**
     * Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
     * @summary Create
     * @param {string} [tenantId] 
     * @param {string} [deploymentSource] 
     * @param {boolean} [deployChangedOnly] 
     * @param {boolean} [enableDuplicateFiltering] 
     * @param {string} [deploymentName] 
     * @param {Date} [deploymentActivationTime] 
     * @param {Blob} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async createDeploymentForm(tenantId?: string, deploymentSource?: string, deployChangedOnly?: boolean, enableDuplicateFiltering?: boolean, deploymentName?: string, deploymentActivationTime?: Date, data?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeploymentWithDefinitionsDto>> {
        return DeploymentApiFp(this.configuration).createDeploymentForm(tenantId, deploymentSource, deployChangedOnly, enableDuplicateFiltering, deploymentName, deploymentActivationTime, data, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a deployment by id.
     * @summary Delete
     * @param {string} id The id of the deployment to be deleted.
     * @param {boolean} [cascade] &#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted.
     * @param {boolean} [skipCustomListeners] &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event.
     * @param {boolean} [skipIoMappings] &#x60;true&#x60;, if all input/output mappings should not be invoked.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async deleteDeployment(id: string, cascade?: boolean, skipCustomListeners?: boolean, skipIoMappings?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DeploymentApiFp(this.configuration).deleteDeployment(id, cascade, skipCustomListeners, skipIoMappings, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a deployment by id, according to the `Deployment` interface of the engine.
     * @summary Get
     * @param {string} id The id of the deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async getDeployment(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeploymentDto>> {
        return DeploymentApiFp(this.configuration).getDeployment(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a deployment resource by resource id for the given deployment.
     * @summary Get Resource
     * @param {string} id The id of the deployment
     * @param {string} resourceId The id of the deployment resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async getDeploymentResource(id: string, resourceId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeploymentResourceDto>> {
        return DeploymentApiFp(this.configuration).getDeploymentResource(id, resourceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the binary content of a deployment resource for the given deployment by id.
     * @summary Get Resource (Binary)
     * @param {string} id The id of the deployment.
     * @param {string} resourceId The id of the deployment resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async getDeploymentResourceData(id: string, resourceId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return DeploymentApiFp(this.configuration).getDeploymentResourceData(id, resourceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves all deployment resources of a given deployment.
     * @summary Get Resources
     * @param {string} id The id of the deployment to retrieve the deployment resources for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async getDeploymentResources(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DeploymentResourceDto>>> {
        return DeploymentApiFp(this.configuration).getDeploymentResources(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.18/reference/rest/deployment/get-query-count/) method.
     * @summary Get List
     * @param {string} [id] Filter by deployment id
     * @param {string} [name] Filter by the deployment name. Exact match.
     * @param {string} [nameLike] Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
     * @param {string} [source] Filter by the deployment source.
     * @param {boolean} [withoutSource] Filter by the deployment source whereby source is equal to &#x60;null&#x60;.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeDeploymentsWithoutTenantId] Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Date} [after] Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [before] Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async getDeployments(id?: string, name?: string, nameLike?: string, source?: string, withoutSource?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDeploymentsWithoutTenantId?: boolean, after?: Date, before?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DeploymentDto>>> {
        return DeploymentApiFp(this.configuration).getDeployments(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.18/reference/rest/deployment/get-query/) method.
     * @summary Get List Count
     * @param {string} [id] Filter by deployment id
     * @param {string} [name] Filter by the deployment name. Exact match.
     * @param {string} [nameLike] Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
     * @param {string} [source] Filter by the deployment source.
     * @param {boolean} [withoutSource] Filter by the deployment source whereby source is equal to &#x60;null&#x60;.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeDeploymentsWithoutTenantId] Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Date} [after] Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [before] Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async getDeploymentsCount(id?: string, name?: string, nameLike?: string, source?: string, withoutSource?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeDeploymentsWithoutTenantId?: boolean, after?: Date, before?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return DeploymentApiFp(this.configuration).getDeploymentsCount(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries the registered deployment IDs for the current application.
     * @summary Get Registered Deployments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async getRegisteredDeployments(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return DeploymentApiFp(this.configuration).getRegisteredDeployments(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.18/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     * @summary Redeploy
     * @param {string} id The id of the deployment to re-deploy.
     * @param {RedeploymentDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public async redeploy(id: string, body?: RedeploymentDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeploymentWithDefinitionsDto>> {
        return DeploymentApiFp(this.configuration).redeploy(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}

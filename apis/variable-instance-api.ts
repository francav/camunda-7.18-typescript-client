/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { VariableInstanceDto } from '../models';
import { VariableInstanceQueryDto } from '../models';
/**
 * VariableInstanceApi - axios parameter creator
 * @export
 */
export const VariableInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a variable by id.
         * @summary Get Variable Instance
         * @param {string} id The id of the variable instance.
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableInstance: async (id: string, deserializeValue?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getVariableInstance.');
            }
            const localVarPath = `/variable-instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deserializeValue !== undefined) {
                localVarQueryParameter['deserializeValue'] = deserializeValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the content of a variable by id. Applicable for byte array and file variables.
         * @summary Get Variable Instance (Binary)
         * @param {string} id The id of the variable instance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableInstanceBinary: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getVariableInstanceBinary.');
            }
            const localVarPath = `/variable-instance/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
         * @summary Get Variable Instances
         * @param {string} [variableName] Filter by variable instance name.
         * @param {string} [variableNameLike] Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [processInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [executionIdIn] Only include variable instances which belong to one of the passed and comma-separated execution ids.
         * @param {string} [caseInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated case instance ids.
         * @param {string} [caseExecutionIdIn] Only include variable instances which belong to one of the passed and comma-separated case execution ids.
         * @param {string} [taskIdIn] Only include variable instances which belong to one of the passed and comma-separated task ids.
         * @param {string} [batchIdIn] Only include variable instances which belong to one of the passed and comma-separated batch ids.
         * @param {string} [activityInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include variable instances which belong to one of the passed and comma-separated tenant ids.
         * @param {string} [variableValues] Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableScopeIdIn] Only include variable instances which belong to one of passed scope ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableInstances: async (variableName?: string, variableNameLike?: string, processInstanceIdIn?: string, executionIdIn?: string, caseInstanceIdIn?: string, caseExecutionIdIn?: string, taskIdIn?: string, batchIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, variableValues?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableScopeIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/variable-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableName !== undefined) {
                localVarQueryParameter['variableName'] = variableName;
            }

            if (variableNameLike !== undefined) {
                localVarQueryParameter['variableNameLike'] = variableNameLike;
            }

            if (processInstanceIdIn !== undefined) {
                localVarQueryParameter['processInstanceIdIn'] = processInstanceIdIn;
            }

            if (executionIdIn !== undefined) {
                localVarQueryParameter['executionIdIn'] = executionIdIn;
            }

            if (caseInstanceIdIn !== undefined) {
                localVarQueryParameter['caseInstanceIdIn'] = caseInstanceIdIn;
            }

            if (caseExecutionIdIn !== undefined) {
                localVarQueryParameter['caseExecutionIdIn'] = caseExecutionIdIn;
            }

            if (taskIdIn !== undefined) {
                localVarQueryParameter['taskIdIn'] = taskIdIn;
            }

            if (batchIdIn !== undefined) {
                localVarQueryParameter['batchIdIn'] = batchIdIn;
            }

            if (activityInstanceIdIn !== undefined) {
                localVarQueryParameter['activityInstanceIdIn'] = activityInstanceIdIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (variableValues !== undefined) {
                localVarQueryParameter['variableValues'] = variableValues;
            }

            if (variableNamesIgnoreCase !== undefined) {
                localVarQueryParameter['variableNamesIgnoreCase'] = variableNamesIgnoreCase;
            }

            if (variableValuesIgnoreCase !== undefined) {
                localVarQueryParameter['variableValuesIgnoreCase'] = variableValuesIgnoreCase;
            }

            if (variableScopeIdIn !== undefined) {
                localVarQueryParameter['variableScopeIdIn'] = variableScopeIdIn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (deserializeValues !== undefined) {
                localVarQueryParameter['deserializeValues'] = deserializeValues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query/) method.
         * @summary Get Variable Instance Count
         * @param {string} [variableName] Filter by variable instance name.
         * @param {string} [variableNameLike] Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [processInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [executionIdIn] Only include variable instances which belong to one of the passed and comma-separated execution ids.
         * @param {string} [caseInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated case instance ids.
         * @param {string} [caseExecutionIdIn] Only include variable instances which belong to one of the passed and comma-separated case execution ids.
         * @param {string} [taskIdIn] Only include variable instances which belong to one of the passed and comma-separated task ids.
         * @param {string} [batchIdIn] Only include variable instances which belong to one of the passed and comma-separated batch ids.
         * @param {string} [activityInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include variable instances which belong to one of the passed and comma-separated tenant ids.
         * @param {string} [variableValues] Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableScopeIdIn] Only include variable instances which belong to one of passed scope ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableInstancesCount: async (variableName?: string, variableNameLike?: string, processInstanceIdIn?: string, executionIdIn?: string, caseInstanceIdIn?: string, caseExecutionIdIn?: string, taskIdIn?: string, batchIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, variableValues?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableScopeIdIn?: string, sortBy?: string, sortOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/variable-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableName !== undefined) {
                localVarQueryParameter['variableName'] = variableName;
            }

            if (variableNameLike !== undefined) {
                localVarQueryParameter['variableNameLike'] = variableNameLike;
            }

            if (processInstanceIdIn !== undefined) {
                localVarQueryParameter['processInstanceIdIn'] = processInstanceIdIn;
            }

            if (executionIdIn !== undefined) {
                localVarQueryParameter['executionIdIn'] = executionIdIn;
            }

            if (caseInstanceIdIn !== undefined) {
                localVarQueryParameter['caseInstanceIdIn'] = caseInstanceIdIn;
            }

            if (caseExecutionIdIn !== undefined) {
                localVarQueryParameter['caseExecutionIdIn'] = caseExecutionIdIn;
            }

            if (taskIdIn !== undefined) {
                localVarQueryParameter['taskIdIn'] = taskIdIn;
            }

            if (batchIdIn !== undefined) {
                localVarQueryParameter['batchIdIn'] = batchIdIn;
            }

            if (activityInstanceIdIn !== undefined) {
                localVarQueryParameter['activityInstanceIdIn'] = activityInstanceIdIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (variableValues !== undefined) {
                localVarQueryParameter['variableValues'] = variableValues;
            }

            if (variableNamesIgnoreCase !== undefined) {
                localVarQueryParameter['variableNamesIgnoreCase'] = variableNamesIgnoreCase;
            }

            if (variableValuesIgnoreCase !== undefined) {
                localVarQueryParameter['variableValuesIgnoreCase'] = variableValuesIgnoreCase;
            }

            if (variableScopeIdIn !== undefined) {
                localVarQueryParameter['variableScopeIdIn'] = variableScopeIdIn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types `String`, `Number` or `Boolean`.
         * @summary Get Variable Instances (POST)
         * @param {VariableInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVariableInstances: async (body?: VariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/variable-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (deserializeValues !== undefined) {
                localVarQueryParameter['deserializeValues'] = deserializeValues;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
         * @summary Get Variable Instance Count (POST)
         * @param {VariableInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryVariableInstancesCount: async (body?: VariableInstanceQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/variable-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VariableInstanceApi - functional programming interface
 * @export
 */
export const VariableInstanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves a variable by id.
         * @summary Get Variable Instance
         * @param {string} id The id of the variable instance.
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableInstance(id: string, deserializeValue?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VariableInstanceDto>>> {
            const localVarAxiosArgs = await VariableInstanceApiAxiosParamCreator(configuration).getVariableInstance(id, deserializeValue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the content of a variable by id. Applicable for byte array and file variables.
         * @summary Get Variable Instance (Binary)
         * @param {string} id The id of the variable instance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableInstanceBinary(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await VariableInstanceApiAxiosParamCreator(configuration).getVariableInstanceBinary(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
         * @summary Get Variable Instances
         * @param {string} [variableName] Filter by variable instance name.
         * @param {string} [variableNameLike] Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [processInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [executionIdIn] Only include variable instances which belong to one of the passed and comma-separated execution ids.
         * @param {string} [caseInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated case instance ids.
         * @param {string} [caseExecutionIdIn] Only include variable instances which belong to one of the passed and comma-separated case execution ids.
         * @param {string} [taskIdIn] Only include variable instances which belong to one of the passed and comma-separated task ids.
         * @param {string} [batchIdIn] Only include variable instances which belong to one of the passed and comma-separated batch ids.
         * @param {string} [activityInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include variable instances which belong to one of the passed and comma-separated tenant ids.
         * @param {string} [variableValues] Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableScopeIdIn] Only include variable instances which belong to one of passed scope ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableInstances(variableName?: string, variableNameLike?: string, processInstanceIdIn?: string, executionIdIn?: string, caseInstanceIdIn?: string, caseExecutionIdIn?: string, taskIdIn?: string, batchIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, variableValues?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableScopeIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<VariableInstanceDto>>>> {
            const localVarAxiosArgs = await VariableInstanceApiAxiosParamCreator(configuration).getVariableInstances(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query/) method.
         * @summary Get Variable Instance Count
         * @param {string} [variableName] Filter by variable instance name.
         * @param {string} [variableNameLike] Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [processInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [executionIdIn] Only include variable instances which belong to one of the passed and comma-separated execution ids.
         * @param {string} [caseInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated case instance ids.
         * @param {string} [caseExecutionIdIn] Only include variable instances which belong to one of the passed and comma-separated case execution ids.
         * @param {string} [taskIdIn] Only include variable instances which belong to one of the passed and comma-separated task ids.
         * @param {string} [batchIdIn] Only include variable instances which belong to one of the passed and comma-separated batch ids.
         * @param {string} [activityInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include variable instances which belong to one of the passed and comma-separated tenant ids.
         * @param {string} [variableValues] Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableScopeIdIn] Only include variable instances which belong to one of passed scope ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableInstancesCount(variableName?: string, variableNameLike?: string, processInstanceIdIn?: string, executionIdIn?: string, caseInstanceIdIn?: string, caseExecutionIdIn?: string, taskIdIn?: string, batchIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, variableValues?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableScopeIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await VariableInstanceApiAxiosParamCreator(configuration).getVariableInstancesCount(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types `String`, `Number` or `Boolean`.
         * @summary Get Variable Instances (POST)
         * @param {VariableInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryVariableInstances(body?: VariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<VariableInstanceDto>>>> {
            const localVarAxiosArgs = await VariableInstanceApiAxiosParamCreator(configuration).queryVariableInstances(body, firstResult, maxResults, deserializeValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
         * @summary Get Variable Instance Count (POST)
         * @param {VariableInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryVariableInstancesCount(body?: VariableInstanceQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await VariableInstanceApiAxiosParamCreator(configuration).queryVariableInstancesCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VariableInstanceApi - factory interface
 * @export
 */
export const VariableInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves a variable by id.
         * @summary Get Variable Instance
         * @param {string} id The id of the variable instance.
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableInstance(id: string, deserializeValue?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<VariableInstanceDto>> {
            return VariableInstanceApiFp(configuration).getVariableInstance(id, deserializeValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the content of a variable by id. Applicable for byte array and file variables.
         * @summary Get Variable Instance (Binary)
         * @param {string} id The id of the variable instance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableInstanceBinary(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return VariableInstanceApiFp(configuration).getVariableInstanceBinary(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
         * @summary Get Variable Instances
         * @param {string} [variableName] Filter by variable instance name.
         * @param {string} [variableNameLike] Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [processInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [executionIdIn] Only include variable instances which belong to one of the passed and comma-separated execution ids.
         * @param {string} [caseInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated case instance ids.
         * @param {string} [caseExecutionIdIn] Only include variable instances which belong to one of the passed and comma-separated case execution ids.
         * @param {string} [taskIdIn] Only include variable instances which belong to one of the passed and comma-separated task ids.
         * @param {string} [batchIdIn] Only include variable instances which belong to one of the passed and comma-separated batch ids.
         * @param {string} [activityInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include variable instances which belong to one of the passed and comma-separated tenant ids.
         * @param {string} [variableValues] Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableScopeIdIn] Only include variable instances which belong to one of passed scope ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableInstances(variableName?: string, variableNameLike?: string, processInstanceIdIn?: string, executionIdIn?: string, caseInstanceIdIn?: string, caseExecutionIdIn?: string, taskIdIn?: string, batchIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, variableValues?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableScopeIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<VariableInstanceDto>>> {
            return VariableInstanceApiFp(configuration).getVariableInstances(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query/) method.
         * @summary Get Variable Instance Count
         * @param {string} [variableName] Filter by variable instance name.
         * @param {string} [variableNameLike] Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
         * @param {string} [processInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [executionIdIn] Only include variable instances which belong to one of the passed and comma-separated execution ids.
         * @param {string} [caseInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated case instance ids.
         * @param {string} [caseExecutionIdIn] Only include variable instances which belong to one of the passed and comma-separated case execution ids.
         * @param {string} [taskIdIn] Only include variable instances which belong to one of the passed and comma-separated task ids.
         * @param {string} [batchIdIn] Only include variable instances which belong to one of the passed and comma-separated batch ids.
         * @param {string} [activityInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include variable instances which belong to one of the passed and comma-separated tenant ids.
         * @param {string} [variableValues] Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableScopeIdIn] Only include variable instances which belong to one of passed scope ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableInstancesCount(variableName?: string, variableNameLike?: string, processInstanceIdIn?: string, executionIdIn?: string, caseInstanceIdIn?: string, caseExecutionIdIn?: string, taskIdIn?: string, batchIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, variableValues?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableScopeIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return VariableInstanceApiFp(configuration).getVariableInstancesCount(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types `String`, `Number` or `Boolean`.
         * @summary Get Variable Instances (POST)
         * @param {VariableInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryVariableInstances(body?: VariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<VariableInstanceDto>>> {
            return VariableInstanceApiFp(configuration).queryVariableInstances(body, firstResult, maxResults, deserializeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
         * @summary Get Variable Instance Count (POST)
         * @param {VariableInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryVariableInstancesCount(body?: VariableInstanceQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return VariableInstanceApiFp(configuration).queryVariableInstancesCount(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VariableInstanceApi - object-oriented interface
 * @export
 * @class VariableInstanceApi
 * @extends {BaseAPI}
 */
export class VariableInstanceApi extends BaseAPI {
    /**
     * Retrieves a variable by id.
     * @summary Get Variable Instance
     * @param {string} id The id of the variable instance.
     * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariableInstanceApi
     */
    public async getVariableInstance(id: string, deserializeValue?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<VariableInstanceDto>> {
        return VariableInstanceApiFp(this.configuration).getVariableInstance(id, deserializeValue, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the content of a variable by id. Applicable for byte array and file variables.
     * @summary Get Variable Instance (Binary)
     * @param {string} id The id of the variable instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariableInstanceApi
     */
    public async getVariableInstanceBinary(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return VariableInstanceApiFp(this.configuration).getVariableInstanceBinary(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
     * @summary Get Variable Instances
     * @param {string} [variableName] Filter by variable instance name.
     * @param {string} [variableNameLike] Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
     * @param {string} [processInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated process instance ids.
     * @param {string} [executionIdIn] Only include variable instances which belong to one of the passed and comma-separated execution ids.
     * @param {string} [caseInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated case instance ids.
     * @param {string} [caseExecutionIdIn] Only include variable instances which belong to one of the passed and comma-separated case execution ids.
     * @param {string} [taskIdIn] Only include variable instances which belong to one of the passed and comma-separated task ids.
     * @param {string} [batchIdIn] Only include variable instances which belong to one of the passed and comma-separated batch ids.
     * @param {string} [activityInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
     * @param {string} [tenantIdIn] Only include variable instances which belong to one of the passed and comma-separated tenant ids.
     * @param {string} [variableValues] Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param {string} [variableScopeIdIn] Only include variable instances which belong to one of passed scope ids.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariableInstanceApi
     */
    public async getVariableInstances(variableName?: string, variableNameLike?: string, processInstanceIdIn?: string, executionIdIn?: string, caseInstanceIdIn?: string, caseExecutionIdIn?: string, taskIdIn?: string, batchIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, variableValues?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableScopeIdIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<VariableInstanceDto>>> {
        return VariableInstanceApiFp(this.configuration).getVariableInstances(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query/) method.
     * @summary Get Variable Instance Count
     * @param {string} [variableName] Filter by variable instance name.
     * @param {string} [variableNameLike] Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
     * @param {string} [processInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated process instance ids.
     * @param {string} [executionIdIn] Only include variable instances which belong to one of the passed and comma-separated execution ids.
     * @param {string} [caseInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated case instance ids.
     * @param {string} [caseExecutionIdIn] Only include variable instances which belong to one of the passed and comma-separated case execution ids.
     * @param {string} [taskIdIn] Only include variable instances which belong to one of the passed and comma-separated task ids.
     * @param {string} [batchIdIn] Only include variable instances which belong to one of the passed and comma-separated batch ids.
     * @param {string} [activityInstanceIdIn] Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
     * @param {string} [tenantIdIn] Only include variable instances which belong to one of the passed and comma-separated tenant ids.
     * @param {string} [variableValues] Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {boolean} [variableNamesIgnoreCase] Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param {boolean} [variableValuesIgnoreCase] Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param {string} [variableScopeIdIn] Only include variable instances which belong to one of passed scope ids.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariableInstanceApi
     */
    public async getVariableInstancesCount(variableName?: string, variableNameLike?: string, processInstanceIdIn?: string, executionIdIn?: string, caseInstanceIdIn?: string, caseExecutionIdIn?: string, taskIdIn?: string, batchIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, variableValues?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableScopeIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return VariableInstanceApiFp(this.configuration).getVariableInstancesCount(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types `String`, `Number` or `Boolean`.
     * @summary Get Variable Instances (POST)
     * @param {VariableInstanceQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariableInstanceApi
     */
    public async queryVariableInstances(body?: VariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<VariableInstanceDto>>> {
        return VariableInstanceApiFp(this.configuration).queryVariableInstances(body, firstResult, maxResults, deserializeValues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
     * @summary Get Variable Instance Count (POST)
     * @param {VariableInstanceQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariableInstanceApi
     */
    public async queryVariableInstancesCount(body?: VariableInstanceQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return VariableInstanceApiFp(this.configuration).queryVariableInstancesCount(body, options).then((request) => request(this.axios, this.basePath));
    }
}

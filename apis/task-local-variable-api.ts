/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExceptionDto } from '../models';
import { PatchVariablesDto } from '../models';
import { VariableValueDto } from '../models';
/**
 * TaskLocalVariableApi - axios parameter creator
 * @export
 */
export const TaskLocalVariableApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes a local variable from a task by id.
         * @summary Delete Local Task Variable
         * @param {string} id The id of the task to delete the variable from.
         * @param {string} varName The name of the variable to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskLocalVariable: async (id: string, varName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTaskLocalVariable.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling deleteTaskLocalVariable.');
            }
            const localVarPath = `/task/{id}/localVariables/{varName}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a variable from the context of a given task by id.
         * @summary Get Local Task Variable
         * @param {string} id The id of the task to retrieve the variable from.
         * @param {string} varName The name of the variable to get
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskLocalVariable: async (id: string, varName: string, deserializeValue?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTaskLocalVariable.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling getTaskLocalVariable.');
            }
            const localVarPath = `/task/{id}/localVariables/{varName}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deserializeValue !== undefined) {
                localVarQueryParameter['deserializeValue'] = deserializeValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
         * @summary Get Local Task Variable (Binary)
         * @param {string} id The id of the task to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskLocalVariableBinary: async (id: string, varName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTaskLocalVariableBinary.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling getTaskLocalVariableBinary.');
            }
            const localVarPath = `/task/{id}/localVariables/{varName}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all variables of a given task by id.
         * @summary Get Local Task Variables
         * @param {string} id The id of the task to retrieve the variables from.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskLocalVariables: async (id: string, deserializeValues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTaskLocalVariables.');
            }
            const localVarPath = `/task/{id}/localVariables`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deserializeValues !== undefined) {
                localVarQueryParameter['deserializeValues'] = deserializeValues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
         * @summary Update/Delete Local Task Variables
         * @param {string} id The id of the task to set variables for.
         * @param {PatchVariablesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTaskLocalVariables: async (id: string, body?: PatchVariablesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling modifyTaskLocalVariables.');
            }
            const localVarPath = `/task/{id}/localVariables`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets a variable in the context of a given task.
         * @summary Update Local Task Variable
         * @param {string} id The id of the task to set the variable for.
         * @param {string} varName The name of the variable to set.
         * @param {VariableValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTaskLocalVariable: async (id: string, varName: string, body?: VariableValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putTaskLocalVariable.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling putTaskLocalVariable.');
            }
            const localVarPath = `/task/{id}/localVariables/{varName}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the serialized value for a binary variable or the binary value for a file variable.
         * @summary Update Local Task Variable (Binary)
         * @param {string} id The id of the task to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {Blob} [data] 
         * @param {string} [valueType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBinaryTaskLocalVariableForm: async (id: string, varName: string, data?: Blob, valueType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setBinaryTaskLocalVariableForm.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling setBinaryTaskLocalVariableForm.');
            }
            const localVarPath = `/task/{id}/localVariables/{varName}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }

            if (valueType !== undefined) { 
                localVarFormParams.append('valueType', valueType as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskLocalVariableApi - functional programming interface
 * @export
 */
export const TaskLocalVariableApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes a local variable from a task by id.
         * @summary Delete Local Task Variable
         * @param {string} id The id of the task to delete the variable from.
         * @param {string} varName The name of the variable to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskLocalVariable(id: string, varName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TaskLocalVariableApiAxiosParamCreator(configuration).deleteTaskLocalVariable(id, varName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a variable from the context of a given task by id.
         * @summary Get Local Task Variable
         * @param {string} id The id of the task to retrieve the variable from.
         * @param {string} varName The name of the variable to get
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskLocalVariable(id: string, varName: string, deserializeValue?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VariableValueDto>>> {
            const localVarAxiosArgs = await TaskLocalVariableApiAxiosParamCreator(configuration).getTaskLocalVariable(id, varName, deserializeValue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
         * @summary Get Local Task Variable (Binary)
         * @param {string} id The id of the task to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskLocalVariableBinary(id: string, varName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await TaskLocalVariableApiAxiosParamCreator(configuration).getTaskLocalVariableBinary(id, varName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all variables of a given task by id.
         * @summary Get Local Task Variables
         * @param {string} id The id of the task to retrieve the variables from.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskLocalVariables(id: string, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<{ [key: string]: VariableValueDto; }>>> {
            const localVarAxiosArgs = await TaskLocalVariableApiAxiosParamCreator(configuration).getTaskLocalVariables(id, deserializeValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
         * @summary Update/Delete Local Task Variables
         * @param {string} id The id of the task to set variables for.
         * @param {PatchVariablesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyTaskLocalVariables(id: string, body?: PatchVariablesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TaskLocalVariableApiAxiosParamCreator(configuration).modifyTaskLocalVariables(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets a variable in the context of a given task.
         * @summary Update Local Task Variable
         * @param {string} id The id of the task to set the variable for.
         * @param {string} varName The name of the variable to set.
         * @param {VariableValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTaskLocalVariable(id: string, varName: string, body?: VariableValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TaskLocalVariableApiAxiosParamCreator(configuration).putTaskLocalVariable(id, varName, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the serialized value for a binary variable or the binary value for a file variable.
         * @summary Update Local Task Variable (Binary)
         * @param {string} id The id of the task to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {Blob} [data] 
         * @param {string} [valueType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBinaryTaskLocalVariableForm(id: string, varName: string, data?: Blob, valueType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TaskLocalVariableApiAxiosParamCreator(configuration).setBinaryTaskLocalVariableForm(id, varName, data, valueType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TaskLocalVariableApi - factory interface
 * @export
 */
export const TaskLocalVariableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes a local variable from a task by id.
         * @summary Delete Local Task Variable
         * @param {string} id The id of the task to delete the variable from.
         * @param {string} varName The name of the variable to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskLocalVariable(id: string, varName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TaskLocalVariableApiFp(configuration).deleteTaskLocalVariable(id, varName, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a variable from the context of a given task by id.
         * @summary Get Local Task Variable
         * @param {string} id The id of the task to retrieve the variable from.
         * @param {string} varName The name of the variable to get
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskLocalVariable(id: string, varName: string, deserializeValue?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<VariableValueDto>> {
            return TaskLocalVariableApiFp(configuration).getTaskLocalVariable(id, varName, deserializeValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
         * @summary Get Local Task Variable (Binary)
         * @param {string} id The id of the task to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskLocalVariableBinary(id: string, varName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return TaskLocalVariableApiFp(configuration).getTaskLocalVariableBinary(id, varName, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all variables of a given task by id.
         * @summary Get Local Task Variables
         * @param {string} id The id of the task to retrieve the variables from.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskLocalVariables(id: string, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<{ [key: string]: VariableValueDto; }>> {
            return TaskLocalVariableApiFp(configuration).getTaskLocalVariables(id, deserializeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
         * @summary Update/Delete Local Task Variables
         * @param {string} id The id of the task to set variables for.
         * @param {PatchVariablesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyTaskLocalVariables(id: string, body?: PatchVariablesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TaskLocalVariableApiFp(configuration).modifyTaskLocalVariables(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets a variable in the context of a given task.
         * @summary Update Local Task Variable
         * @param {string} id The id of the task to set the variable for.
         * @param {string} varName The name of the variable to set.
         * @param {VariableValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTaskLocalVariable(id: string, varName: string, body?: VariableValueDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TaskLocalVariableApiFp(configuration).putTaskLocalVariable(id, varName, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the serialized value for a binary variable or the binary value for a file variable.
         * @summary Update Local Task Variable (Binary)
         * @param {string} id The id of the task to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {Blob} [data] 
         * @param {string} [valueType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBinaryTaskLocalVariableForm(id: string, varName: string, data?: Blob, valueType?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TaskLocalVariableApiFp(configuration).setBinaryTaskLocalVariableForm(id, varName, data, valueType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskLocalVariableApi - object-oriented interface
 * @export
 * @class TaskLocalVariableApi
 * @extends {BaseAPI}
 */
export class TaskLocalVariableApi extends BaseAPI {
    /**
     * Removes a local variable from a task by id.
     * @summary Delete Local Task Variable
     * @param {string} id The id of the task to delete the variable from.
     * @param {string} varName The name of the variable to be removed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskLocalVariableApi
     */
    public async deleteTaskLocalVariable(id: string, varName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TaskLocalVariableApiFp(this.configuration).deleteTaskLocalVariable(id, varName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a variable from the context of a given task by id.
     * @summary Get Local Task Variable
     * @param {string} id The id of the task to retrieve the variable from.
     * @param {string} varName The name of the variable to get
     * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskLocalVariableApi
     */
    public async getTaskLocalVariable(id: string, varName: string, deserializeValue?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<VariableValueDto>> {
        return TaskLocalVariableApiFp(this.configuration).getTaskLocalVariable(id, varName, deserializeValue, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
     * @summary Get Local Task Variable (Binary)
     * @param {string} id The id of the task to retrieve the variable for.
     * @param {string} varName The name of the variable to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskLocalVariableApi
     */
    public async getTaskLocalVariableBinary(id: string, varName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return TaskLocalVariableApiFp(this.configuration).getTaskLocalVariableBinary(id, varName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves all variables of a given task by id.
     * @summary Get Local Task Variables
     * @param {string} id The id of the task to retrieve the variables from.
     * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskLocalVariableApi
     */
    public async getTaskLocalVariables(id: string, deserializeValues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<{ [key: string]: VariableValueDto; }>> {
        return TaskLocalVariableApiFp(this.configuration).getTaskLocalVariables(id, deserializeValues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
     * @summary Update/Delete Local Task Variables
     * @param {string} id The id of the task to set variables for.
     * @param {PatchVariablesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskLocalVariableApi
     */
    public async modifyTaskLocalVariables(id: string, body?: PatchVariablesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TaskLocalVariableApiFp(this.configuration).modifyTaskLocalVariables(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets a variable in the context of a given task.
     * @summary Update Local Task Variable
     * @param {string} id The id of the task to set the variable for.
     * @param {string} varName The name of the variable to set.
     * @param {VariableValueDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskLocalVariableApi
     */
    public async putTaskLocalVariable(id: string, varName: string, body?: VariableValueDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TaskLocalVariableApiFp(this.configuration).putTaskLocalVariable(id, varName, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @summary Update Local Task Variable (Binary)
     * @param {string} id The id of the task to retrieve the variable for.
     * @param {string} varName The name of the variable to retrieve.
     * @param {Blob} [data] 
     * @param {string} [valueType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskLocalVariableApi
     */
    public async setBinaryTaskLocalVariableForm(id: string, varName: string, data?: Blob, valueType?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TaskLocalVariableApiFp(this.configuration).setBinaryTaskLocalVariableForm(id, varName, data, valueType, options).then((request) => request(this.axios, this.basePath));
    }
}

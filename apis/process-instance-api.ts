/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ActivityInstanceDto } from '../models';
import { AuthorizationExceptionDto } from '../models';
import { BatchDto } from '../models';
import { CommentDto } from '../models';
import { CorrelationMessageAsyncDto } from '../models';
import { CountResultDto } from '../models';
import { DeleteProcessInstancesDto } from '../models';
import { ExceptionDto } from '../models';
import { PatchVariablesDto } from '../models';
import { ProcessInstanceDto } from '../models';
import { ProcessInstanceModificationDto } from '../models';
import { ProcessInstanceQueryDto } from '../models';
import { ProcessInstanceSuspensionStateAsyncDto } from '../models';
import { ProcessInstanceSuspensionStateDto } from '../models';
import { SetJobRetriesByProcessDto } from '../models';
import { SetVariablesAsyncDto } from '../models';
import { SuspensionStateDto } from '../models';
import { VariableValueDto } from '../models';
/**
 * ProcessInstanceApi - axios parameter creator
 * @export
 */
export const ProcessInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Correlates a message asynchronously to executions that are waiting for this message.  Messages will not be correlated to process definition-level start message events to start process instances.
         * @summary Correlate Message Async (POST)
         * @param {CorrelationMessageAsyncDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        correlateMessageAsyncOperation: async (body?: CorrelationMessageAsyncDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/message-async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
         * @summary Delete Async Historic Query Based (POST)
         * @param {DeleteProcessInstancesDto} [body] **Unallowed property**: &#x60;processInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAsyncHistoricQueryBased: async (body?: DeleteProcessInstancesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/delete-historic-query-based`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a running process instance by id.
         * @summary Delete
         * @param {string} id The id of the process instance to be deleted.
         * @param {boolean} [skipCustomListeners] If set to true, the custom listeners will be skipped.
         * @param {boolean} [skipIoMappings] If set to true, the input/output mappings will be skipped.
         * @param {boolean} [skipSubprocesses] If set to true, subprocesses related to deleted processes will be skipped.
         * @param {boolean} [failIfNotExists] If set to false, the request will still be successful if the process id is not found.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessInstance: async (id: string, skipCustomListeners?: boolean, skipIoMappings?: boolean, skipSubprocesses?: boolean, failIfNotExists?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProcessInstance.');
            }
            const localVarPath = `/process-instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skipCustomListeners !== undefined) {
                localVarQueryParameter['skipCustomListeners'] = skipCustomListeners;
            }

            if (skipIoMappings !== undefined) {
                localVarQueryParameter['skipIoMappings'] = skipIoMappings;
            }

            if (skipSubprocesses !== undefined) {
                localVarQueryParameter['skipSubprocesses'] = skipSubprocesses;
            }

            if (failIfNotExists !== undefined) {
                localVarQueryParameter['failIfNotExists'] = failIfNotExists;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a variable of a process instance by id.
         * @summary Delete Process Variable
         * @param {string} id The id of the process instance to delete the variable from.
         * @param {string} varName The name of the variable to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessInstanceVariable: async (id: string, varName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProcessInstanceVariable.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling deleteProcessInstanceVariable.');
            }
            const localVarPath = `/process-instance/{id}/variables/{varName}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes multiple process instances asynchronously (batch).
         * @summary Delete Async (POST)
         * @param {DeleteProcessInstancesDto} [body] **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessInstancesAsyncOperation: async (body?: DeleteProcessInstancesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an Activity Instance (Tree) for a given process instance by id.
         * @summary Get Activity Instance
         * @param {string} id The id of the process instance for which the activity instance should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityInstanceTree: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getActivityInstanceTree.');
            }
            const localVarPath = `/process-instance/{id}/activity-instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
         * @summary Get Process Instance
         * @param {string} id The id of the process instance to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstance: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProcessInstance.');
            }
            const localVarPath = `/process-instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the comments for a process instance by id.
         * @summary Get Process Instance Comments
         * @param {string} id The id of the process instance to retrieve the comments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstanceComments: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProcessInstanceComments.');
            }
            const localVarPath = `/process-instance/{id}/comment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a variable of a given process instance by id.
         * @summary Get Process Variable
         * @param {string} id The id of the process instance to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstanceVariable: async (id: string, varName: string, deserializeValue?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProcessInstanceVariable.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling getProcessInstanceVariable.');
            }
            const localVarPath = `/process-instance/{id}/variables/{varName}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deserializeValue !== undefined) {
                localVarQueryParameter['deserializeValue'] = deserializeValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name. Applicable for byte array or file Process Variables.
         * @summary Get Process Variable (Binary)
         * @param {string} id The id of the process instance to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstanceVariableBinary: async (id: string, varName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProcessInstanceVariableBinary.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling getProcessInstanceVariableBinary.');
            }
            const localVarPath = `/process-instance/{id}/variables/{varName}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all variables of a given process instance by id.
         * @summary Get Process Variables
         * @param {string} id The id of the process instance to retrieve the variables from.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstanceVariables: async (id: string, deserializeValues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProcessInstanceVariables.');
            }
            const localVarPath = `/process-instance/{id}/variables`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deserializeValues !== undefined) {
                localVarQueryParameter['deserializeValues'] = deserializeValues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [processInstanceIds] Filter by a comma-separated list of process instance ids.
         * @param {string} [businessKey] Filter by process instance business key.
         * @param {string} [businessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [processDefinitionId] Filter by the deployment the id belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {string} [superProcessInstance] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstance] Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
         * @param {string} [superCaseInstance] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstance] Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
         * @param {boolean} [active] Only include active process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [suspended] Only include suspended process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [withIncident] Filter by presence of incidents. Selects only process instances that have an incident.
         * @param {string} [incidentId] Filter by the incident id.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include process instances which belong to no tenant.
         * @param {boolean} [processDefinitionWithoutTenantId] Only include process instances which process definition has no tenant id.
         * @param {string} [activityIdIn] Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [leafProcessInstances] Restrict the query to all process instances that are leaf instances. (i.e. don&#x27;t have any sub instances).
         * @param {string} [variables] Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstances: async (sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, processInstanceIds?: string, businessKey?: string, businessKeyLike?: string, caseInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionKeyNotIn?: string, deploymentId?: string, superProcessInstance?: string, subProcessInstance?: string, superCaseInstance?: string, subCaseInstance?: string, active?: boolean, suspended?: boolean, withIncident?: boolean, incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, processDefinitionWithoutTenantId?: boolean, activityIdIn?: string, rootProcessInstances?: boolean, leafProcessInstances?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (processInstanceIds !== undefined) {
                localVarQueryParameter['processInstanceIds'] = processInstanceIds;
            }

            if (businessKey !== undefined) {
                localVarQueryParameter['businessKey'] = businessKey;
            }

            if (businessKeyLike !== undefined) {
                localVarQueryParameter['businessKeyLike'] = businessKeyLike;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (processDefinitionKeyNotIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyNotIn'] = processDefinitionKeyNotIn;
            }

            if (deploymentId !== undefined) {
                localVarQueryParameter['deploymentId'] = deploymentId;
            }

            if (superProcessInstance !== undefined) {
                localVarQueryParameter['superProcessInstance'] = superProcessInstance;
            }

            if (subProcessInstance !== undefined) {
                localVarQueryParameter['subProcessInstance'] = subProcessInstance;
            }

            if (superCaseInstance !== undefined) {
                localVarQueryParameter['superCaseInstance'] = superCaseInstance;
            }

            if (subCaseInstance !== undefined) {
                localVarQueryParameter['subCaseInstance'] = subCaseInstance;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (withIncident !== undefined) {
                localVarQueryParameter['withIncident'] = withIncident;
            }

            if (incidentId !== undefined) {
                localVarQueryParameter['incidentId'] = incidentId;
            }

            if (incidentType !== undefined) {
                localVarQueryParameter['incidentType'] = incidentType;
            }

            if (incidentMessage !== undefined) {
                localVarQueryParameter['incidentMessage'] = incidentMessage;
            }

            if (incidentMessageLike !== undefined) {
                localVarQueryParameter['incidentMessageLike'] = incidentMessageLike;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (processDefinitionWithoutTenantId !== undefined) {
                localVarQueryParameter['processDefinitionWithoutTenantId'] = processDefinitionWithoutTenantId;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (rootProcessInstances !== undefined) {
                localVarQueryParameter['rootProcessInstances'] = rootProcessInstances;
            }

            if (leafProcessInstances !== undefined) {
                localVarQueryParameter['leafProcessInstances'] = leafProcessInstances;
            }

            if (variables !== undefined) {
                localVarQueryParameter['variables'] = variables;
            }

            if (variableNamesIgnoreCase !== undefined) {
                localVarQueryParameter['variableNamesIgnoreCase'] = variableNamesIgnoreCase;
            }

            if (variableValuesIgnoreCase !== undefined) {
                localVarQueryParameter['variableValuesIgnoreCase'] = variableValuesIgnoreCase;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of process instances that fulfill given parameters.
         * @summary Get List Count
         * @param {string} [processInstanceIds] Filter by a comma-separated list of process instance ids.
         * @param {string} [businessKey] Filter by process instance business key.
         * @param {string} [businessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [processDefinitionId] Filter by the deployment the id belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {string} [superProcessInstance] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstance] Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
         * @param {string} [superCaseInstance] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstance] Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
         * @param {boolean} [active] Only include active process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [suspended] Only include suspended process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [withIncident] Filter by presence of incidents. Selects only process instances that have an incident.
         * @param {string} [incidentId] Filter by the incident id.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include process instances which belong to no tenant.
         * @param {boolean} [processDefinitionWithoutTenantId] Only include process instances which process definition has no tenant id.
         * @param {string} [activityIdIn] Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [leafProcessInstances] Restrict the query to all process instances that are leaf instances. (i.e. don&#x27;t have any sub instances).
         * @param {string} [variables] Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstancesCount: async (processInstanceIds?: string, businessKey?: string, businessKeyLike?: string, caseInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionKeyNotIn?: string, deploymentId?: string, superProcessInstance?: string, subProcessInstance?: string, superCaseInstance?: string, subCaseInstance?: string, active?: boolean, suspended?: boolean, withIncident?: boolean, incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, processDefinitionWithoutTenantId?: boolean, activityIdIn?: string, rootProcessInstances?: boolean, leafProcessInstances?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (processInstanceIds !== undefined) {
                localVarQueryParameter['processInstanceIds'] = processInstanceIds;
            }

            if (businessKey !== undefined) {
                localVarQueryParameter['businessKey'] = businessKey;
            }

            if (businessKeyLike !== undefined) {
                localVarQueryParameter['businessKeyLike'] = businessKeyLike;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (processDefinitionKeyNotIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyNotIn'] = processDefinitionKeyNotIn;
            }

            if (deploymentId !== undefined) {
                localVarQueryParameter['deploymentId'] = deploymentId;
            }

            if (superProcessInstance !== undefined) {
                localVarQueryParameter['superProcessInstance'] = superProcessInstance;
            }

            if (subProcessInstance !== undefined) {
                localVarQueryParameter['subProcessInstance'] = subProcessInstance;
            }

            if (superCaseInstance !== undefined) {
                localVarQueryParameter['superCaseInstance'] = superCaseInstance;
            }

            if (subCaseInstance !== undefined) {
                localVarQueryParameter['subCaseInstance'] = subCaseInstance;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (withIncident !== undefined) {
                localVarQueryParameter['withIncident'] = withIncident;
            }

            if (incidentId !== undefined) {
                localVarQueryParameter['incidentId'] = incidentId;
            }

            if (incidentType !== undefined) {
                localVarQueryParameter['incidentType'] = incidentType;
            }

            if (incidentMessage !== undefined) {
                localVarQueryParameter['incidentMessage'] = incidentMessage;
            }

            if (incidentMessageLike !== undefined) {
                localVarQueryParameter['incidentMessageLike'] = incidentMessageLike;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (processDefinitionWithoutTenantId !== undefined) {
                localVarQueryParameter['processDefinitionWithoutTenantId'] = processDefinitionWithoutTenantId;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (rootProcessInstances !== undefined) {
                localVarQueryParameter['rootProcessInstances'] = rootProcessInstances;
            }

            if (leafProcessInstances !== undefined) {
                localVarQueryParameter['leafProcessInstances'] = leafProcessInstances;
            }

            if (variables !== undefined) {
                localVarQueryParameter['variables'] = variables;
            }

            if (variableNamesIgnoreCase !== undefined) {
                localVarQueryParameter['variableNamesIgnoreCase'] = variableNamesIgnoreCase;
            }

            if (variableValuesIgnoreCase !== undefined) {
                localVarQueryParameter['variableValuesIgnoreCase'] = variableValuesIgnoreCase;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits a list of modification instructions to change a process instance's execution state. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed immediately and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
         * @summary Modify Process Instance Execution State
         * @param {string} id The id of the process instance to modify.
         * @param {ProcessInstanceModificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProcessInstance: async (id: string, body?: ProcessInstanceModificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling modifyProcessInstance.');
            }
            const localVarPath = `/process-instance/{id}/modification`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits a list of modification instructions to change a process instance's execution state async. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed asynchronous and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-modification/).
         * @summary Modify Process Instance Execution State Async
         * @param {string} id The id of the process instance to modify.
         * @param {ProcessInstanceModificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProcessInstanceAsyncOperation: async (id: string, body?: ProcessInstanceModificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling modifyProcessInstanceAsyncOperation.');
            }
            const localVarPath = `/process-instance/{id}/modification-async`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
         * @summary Update/Delete Process Variables
         * @param {string} id The id of the process instance to set variables for.
         * @param {PatchVariablesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProcessInstanceVariables: async (id: string, body?: PatchVariablesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling modifyProcessInstanceVariables.');
            }
            const localVarPath = `/process-instance/{id}/variables`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
         * @summary Get List (POST)
         * @param {ProcessInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryProcessInstances: async (body?: ProcessInstanceQueryDto, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) method and therefore it is slightly more powerful than the Get Instance Count method.
         * @summary Get List Count (POST)
         * @param {ProcessInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryProcessInstancesCount: async (body?: ProcessInstanceQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets a variable of a given process instance by id.
         * @summary Update Process Variable
         * @param {string} id The id of the process instance to set the variable for.
         * @param {string} varName The name of the variable to set.
         * @param {VariableValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProcessInstanceVariable: async (id: string, varName: string, body?: VariableValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setProcessInstanceVariable.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling setProcessInstanceVariable.');
            }
            const localVarPath = `/process-instance/{id}/variables/{varName}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the serialized value for a binary variable or the binary value for a file variable.
         * @summary Update Process Variable (Binary)
         * @param {string} id The id of the process instance to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {Blob} [data] 
         * @param {string} [valueType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProcessInstanceVariableBinaryForm: async (id: string, varName: string, data?: Blob, valueType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setProcessInstanceVariableBinaryForm.');
            }
            // verify required parameter 'varName' is not null or undefined
            if (varName === null || varName === undefined) {
                throw new RequiredError('varName','Required parameter varName was null or undefined when calling setProcessInstanceVariableBinaryForm.');
            }
            const localVarPath = `/process-instance/{id}/variables/{varName}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"varName"}}`, encodeURIComponent(String(varName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }

            if (valueType !== undefined) { 
                localVarFormParams.append('valueType', valueType as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a batch to set retries of jobs associated with given processes asynchronously.
         * @summary Set Job Retries Async (POST)
         * @param {SetJobRetriesByProcessDto} [body] Please note that if both processInstances and processInstanceQuery are provided,
then the resulting execution will be performed on the union of these sets.
**Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRetriesByProcess: async (body?: SetJobRetriesByProcessDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/job-retries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a batch to set retries of jobs asynchronously based on a historic process instance query.
         * @summary Set Job Retries Async Historic Query Based (POST)
         * @param {SetJobRetriesByProcessDto} [body] Please note that if both processInstances and historicProcessInstanceQuery are provided,
then the resulting execution will be performed on the union of these sets.
**Unallowed property**: &#x60;processInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRetriesByProcessHistoricQueryBased: async (body?: SetJobRetriesByProcessDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/job-retries-historic-query-based`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update or create runtime process variables in the root scope of process instances.
         * @summary Set Variables Async (POST)
         * @param {SetVariablesAsyncDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVariablesAsyncOperation: async (body?: SetVariablesAsyncDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/variables-async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates or suspends process instances by providing certain criteria:  # Activate/Suspend Process Instance By Process Definition Id * `suspend` * `processDefinitionId`  # Activate/Suspend Process Instance By Process Definition Key  * `suspend` * `processDefinitionKey` * `processDefinitionTenantId` * `processDefinitionWithoutTenantId`  # Activate/Suspend Process Instance In Group * `suspend` * `processInstanceIds` * `processInstanceQuery` * `historicProcessInstanceQuery`
         * @summary Activate/Suspend In Group
         * @param {ProcessInstanceSuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuspensionState: async (body?: ProcessInstanceSuspensionStateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/suspended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates or suspends process instances asynchronously with a list of process instance ids, a process instance query, and/or a historical process instance query.
         * @summary Activate/Suspend In Batch
         * @param {ProcessInstanceSuspensionStateAsyncDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuspensionStateAsyncOperation: async (body?: ProcessInstanceSuspensionStateAsyncDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instance/suspended-async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates or suspends a given process instance by id.
         * @summary Activate/Suspend Process Instance By Id
         * @param {string} id The id of the process instance to activate or suspend.
         * @param {SuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuspensionStateById: async (id: string, body?: SuspensionStateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSuspensionStateById.');
            }
            const localVarPath = `/process-instance/{id}/suspended`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessInstanceApi - functional programming interface
 * @export
 */
export const ProcessInstanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Correlates a message asynchronously to executions that are waiting for this message.  Messages will not be correlated to process definition-level start message events to start process instances.
         * @summary Correlate Message Async (POST)
         * @param {CorrelationMessageAsyncDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async correlateMessageAsyncOperation(body?: CorrelationMessageAsyncDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).correlateMessageAsyncOperation(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
         * @summary Delete Async Historic Query Based (POST)
         * @param {DeleteProcessInstancesDto} [body] **Unallowed property**: &#x60;processInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAsyncHistoricQueryBased(body?: DeleteProcessInstancesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).deleteAsyncHistoricQueryBased(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a running process instance by id.
         * @summary Delete
         * @param {string} id The id of the process instance to be deleted.
         * @param {boolean} [skipCustomListeners] If set to true, the custom listeners will be skipped.
         * @param {boolean} [skipIoMappings] If set to true, the input/output mappings will be skipped.
         * @param {boolean} [skipSubprocesses] If set to true, subprocesses related to deleted processes will be skipped.
         * @param {boolean} [failIfNotExists] If set to false, the request will still be successful if the process id is not found.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProcessInstance(id: string, skipCustomListeners?: boolean, skipIoMappings?: boolean, skipSubprocesses?: boolean, failIfNotExists?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).deleteProcessInstance(id, skipCustomListeners, skipIoMappings, skipSubprocesses, failIfNotExists, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a variable of a process instance by id.
         * @summary Delete Process Variable
         * @param {string} id The id of the process instance to delete the variable from.
         * @param {string} varName The name of the variable to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProcessInstanceVariable(id: string, varName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).deleteProcessInstanceVariable(id, varName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes multiple process instances asynchronously (batch).
         * @summary Delete Async (POST)
         * @param {DeleteProcessInstancesDto} [body] **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProcessInstancesAsyncOperation(body?: DeleteProcessInstancesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).deleteProcessInstancesAsyncOperation(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves an Activity Instance (Tree) for a given process instance by id.
         * @summary Get Activity Instance
         * @param {string} id The id of the process instance for which the activity instance should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivityInstanceTree(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ActivityInstanceDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).getActivityInstanceTree(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
         * @summary Get Process Instance
         * @param {string} id The id of the process instance to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstance(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProcessInstanceDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).getProcessInstance(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the comments for a process instance by id.
         * @summary Get Process Instance Comments
         * @param {string} id The id of the process instance to retrieve the comments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstanceComments(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CommentDto>>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).getProcessInstanceComments(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a variable of a given process instance by id.
         * @summary Get Process Variable
         * @param {string} id The id of the process instance to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstanceVariable(id: string, varName: string, deserializeValue?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VariableValueDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).getProcessInstanceVariable(id, varName, deserializeValue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name. Applicable for byte array or file Process Variables.
         * @summary Get Process Variable (Binary)
         * @param {string} id The id of the process instance to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstanceVariableBinary(id: string, varName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).getProcessInstanceVariableBinary(id, varName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all variables of a given process instance by id.
         * @summary Get Process Variables
         * @param {string} id The id of the process instance to retrieve the variables from.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstanceVariables(id: string, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<{ [key: string]: VariableValueDto; }>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).getProcessInstanceVariables(id, deserializeValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [processInstanceIds] Filter by a comma-separated list of process instance ids.
         * @param {string} [businessKey] Filter by process instance business key.
         * @param {string} [businessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [processDefinitionId] Filter by the deployment the id belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {string} [superProcessInstance] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstance] Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
         * @param {string} [superCaseInstance] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstance] Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
         * @param {boolean} [active] Only include active process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [suspended] Only include suspended process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [withIncident] Filter by presence of incidents. Selects only process instances that have an incident.
         * @param {string} [incidentId] Filter by the incident id.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include process instances which belong to no tenant.
         * @param {boolean} [processDefinitionWithoutTenantId] Only include process instances which process definition has no tenant id.
         * @param {string} [activityIdIn] Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [leafProcessInstances] Restrict the query to all process instances that are leaf instances. (i.e. don&#x27;t have any sub instances).
         * @param {string} [variables] Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, processInstanceIds?: string, businessKey?: string, businessKeyLike?: string, caseInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionKeyNotIn?: string, deploymentId?: string, superProcessInstance?: string, subProcessInstance?: string, superCaseInstance?: string, subCaseInstance?: string, active?: boolean, suspended?: boolean, withIncident?: boolean, incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, processDefinitionWithoutTenantId?: boolean, activityIdIn?: string, rootProcessInstances?: boolean, leafProcessInstances?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ProcessInstanceDto>>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).getProcessInstances(sortBy, sortOrder, firstResult, maxResults, processInstanceIds, businessKey, businessKeyLike, caseInstanceId, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionKeyNotIn, deploymentId, superProcessInstance, subProcessInstance, superCaseInstance, subCaseInstance, active, suspended, withIncident, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, processDefinitionWithoutTenantId, activityIdIn, rootProcessInstances, leafProcessInstances, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of process instances that fulfill given parameters.
         * @summary Get List Count
         * @param {string} [processInstanceIds] Filter by a comma-separated list of process instance ids.
         * @param {string} [businessKey] Filter by process instance business key.
         * @param {string} [businessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [processDefinitionId] Filter by the deployment the id belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {string} [superProcessInstance] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstance] Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
         * @param {string} [superCaseInstance] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstance] Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
         * @param {boolean} [active] Only include active process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [suspended] Only include suspended process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [withIncident] Filter by presence of incidents. Selects only process instances that have an incident.
         * @param {string} [incidentId] Filter by the incident id.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include process instances which belong to no tenant.
         * @param {boolean} [processDefinitionWithoutTenantId] Only include process instances which process definition has no tenant id.
         * @param {string} [activityIdIn] Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [leafProcessInstances] Restrict the query to all process instances that are leaf instances. (i.e. don&#x27;t have any sub instances).
         * @param {string} [variables] Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstancesCount(processInstanceIds?: string, businessKey?: string, businessKeyLike?: string, caseInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionKeyNotIn?: string, deploymentId?: string, superProcessInstance?: string, subProcessInstance?: string, superCaseInstance?: string, subCaseInstance?: string, active?: boolean, suspended?: boolean, withIncident?: boolean, incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, processDefinitionWithoutTenantId?: boolean, activityIdIn?: string, rootProcessInstances?: boolean, leafProcessInstances?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).getProcessInstancesCount(processInstanceIds, businessKey, businessKeyLike, caseInstanceId, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionKeyNotIn, deploymentId, superProcessInstance, subProcessInstance, superCaseInstance, subCaseInstance, active, suspended, withIncident, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, processDefinitionWithoutTenantId, activityIdIn, rootProcessInstances, leafProcessInstances, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Submits a list of modification instructions to change a process instance's execution state. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed immediately and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
         * @summary Modify Process Instance Execution State
         * @param {string} id The id of the process instance to modify.
         * @param {ProcessInstanceModificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProcessInstance(id: string, body?: ProcessInstanceModificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).modifyProcessInstance(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Submits a list of modification instructions to change a process instance's execution state async. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed asynchronous and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-modification/).
         * @summary Modify Process Instance Execution State Async
         * @param {string} id The id of the process instance to modify.
         * @param {ProcessInstanceModificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProcessInstanceAsyncOperation(id: string, body?: ProcessInstanceModificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).modifyProcessInstanceAsyncOperation(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
         * @summary Update/Delete Process Variables
         * @param {string} id The id of the process instance to set variables for.
         * @param {PatchVariablesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProcessInstanceVariables(id: string, body?: PatchVariablesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).modifyProcessInstanceVariables(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
         * @summary Get List (POST)
         * @param {ProcessInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryProcessInstances(body?: ProcessInstanceQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ProcessInstanceDto>>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).queryProcessInstances(body, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) method and therefore it is slightly more powerful than the Get Instance Count method.
         * @summary Get List Count (POST)
         * @param {ProcessInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryProcessInstancesCount(body?: ProcessInstanceQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).queryProcessInstancesCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets a variable of a given process instance by id.
         * @summary Update Process Variable
         * @param {string} id The id of the process instance to set the variable for.
         * @param {string} varName The name of the variable to set.
         * @param {VariableValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProcessInstanceVariable(id: string, varName: string, body?: VariableValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).setProcessInstanceVariable(id, varName, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the serialized value for a binary variable or the binary value for a file variable.
         * @summary Update Process Variable (Binary)
         * @param {string} id The id of the process instance to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {Blob} [data] 
         * @param {string} [valueType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProcessInstanceVariableBinaryForm(id: string, varName: string, data?: Blob, valueType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).setProcessInstanceVariableBinaryForm(id, varName, data, valueType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a batch to set retries of jobs associated with given processes asynchronously.
         * @summary Set Job Retries Async (POST)
         * @param {SetJobRetriesByProcessDto} [body] Please note that if both processInstances and processInstanceQuery are provided,
then the resulting execution will be performed on the union of these sets.
**Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRetriesByProcess(body?: SetJobRetriesByProcessDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).setRetriesByProcess(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a batch to set retries of jobs asynchronously based on a historic process instance query.
         * @summary Set Job Retries Async Historic Query Based (POST)
         * @param {SetJobRetriesByProcessDto} [body] Please note that if both processInstances and historicProcessInstanceQuery are provided,
then the resulting execution will be performed on the union of these sets.
**Unallowed property**: &#x60;processInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRetriesByProcessHistoricQueryBased(body?: SetJobRetriesByProcessDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).setRetriesByProcessHistoricQueryBased(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update or create runtime process variables in the root scope of process instances.
         * @summary Set Variables Async (POST)
         * @param {SetVariablesAsyncDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setVariablesAsyncOperation(body?: SetVariablesAsyncDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).setVariablesAsyncOperation(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Activates or suspends process instances by providing certain criteria:  # Activate/Suspend Process Instance By Process Definition Id * `suspend` * `processDefinitionId`  # Activate/Suspend Process Instance By Process Definition Key  * `suspend` * `processDefinitionKey` * `processDefinitionTenantId` * `processDefinitionWithoutTenantId`  # Activate/Suspend Process Instance In Group * `suspend` * `processInstanceIds` * `processInstanceQuery` * `historicProcessInstanceQuery`
         * @summary Activate/Suspend In Group
         * @param {ProcessInstanceSuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionState(body?: ProcessInstanceSuspensionStateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).updateSuspensionState(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Activates or suspends process instances asynchronously with a list of process instance ids, a process instance query, and/or a historical process instance query.
         * @summary Activate/Suspend In Batch
         * @param {ProcessInstanceSuspensionStateAsyncDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionStateAsyncOperation(body?: ProcessInstanceSuspensionStateAsyncDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).updateSuspensionStateAsyncOperation(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Activates or suspends a given process instance by id.
         * @summary Activate/Suspend Process Instance By Id
         * @param {string} id The id of the process instance to activate or suspend.
         * @param {SuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionStateById(id: string, body?: SuspensionStateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProcessInstanceApiAxiosParamCreator(configuration).updateSuspensionStateById(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProcessInstanceApi - factory interface
 * @export
 */
export const ProcessInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Correlates a message asynchronously to executions that are waiting for this message.  Messages will not be correlated to process definition-level start message events to start process instances.
         * @summary Correlate Message Async (POST)
         * @param {CorrelationMessageAsyncDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async correlateMessageAsyncOperation(body?: CorrelationMessageAsyncDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return ProcessInstanceApiFp(configuration).correlateMessageAsyncOperation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
         * @summary Delete Async Historic Query Based (POST)
         * @param {DeleteProcessInstancesDto} [body] **Unallowed property**: &#x60;processInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAsyncHistoricQueryBased(body?: DeleteProcessInstancesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return ProcessInstanceApiFp(configuration).deleteAsyncHistoricQueryBased(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a running process instance by id.
         * @summary Delete
         * @param {string} id The id of the process instance to be deleted.
         * @param {boolean} [skipCustomListeners] If set to true, the custom listeners will be skipped.
         * @param {boolean} [skipIoMappings] If set to true, the input/output mappings will be skipped.
         * @param {boolean} [skipSubprocesses] If set to true, subprocesses related to deleted processes will be skipped.
         * @param {boolean} [failIfNotExists] If set to false, the request will still be successful if the process id is not found.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProcessInstance(id: string, skipCustomListeners?: boolean, skipIoMappings?: boolean, skipSubprocesses?: boolean, failIfNotExists?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProcessInstanceApiFp(configuration).deleteProcessInstance(id, skipCustomListeners, skipIoMappings, skipSubprocesses, failIfNotExists, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a variable of a process instance by id.
         * @summary Delete Process Variable
         * @param {string} id The id of the process instance to delete the variable from.
         * @param {string} varName The name of the variable to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProcessInstanceVariable(id: string, varName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProcessInstanceApiFp(configuration).deleteProcessInstanceVariable(id, varName, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes multiple process instances asynchronously (batch).
         * @summary Delete Async (POST)
         * @param {DeleteProcessInstancesDto} [body] **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProcessInstancesAsyncOperation(body?: DeleteProcessInstancesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return ProcessInstanceApiFp(configuration).deleteProcessInstancesAsyncOperation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an Activity Instance (Tree) for a given process instance by id.
         * @summary Get Activity Instance
         * @param {string} id The id of the process instance for which the activity instance should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivityInstanceTree(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ActivityInstanceDto>> {
            return ProcessInstanceApiFp(configuration).getActivityInstanceTree(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
         * @summary Get Process Instance
         * @param {string} id The id of the process instance to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstance(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProcessInstanceDto>> {
            return ProcessInstanceApiFp(configuration).getProcessInstance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the comments for a process instance by id.
         * @summary Get Process Instance Comments
         * @param {string} id The id of the process instance to retrieve the comments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstanceComments(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CommentDto>>> {
            return ProcessInstanceApiFp(configuration).getProcessInstanceComments(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a variable of a given process instance by id.
         * @summary Get Process Variable
         * @param {string} id The id of the process instance to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstanceVariable(id: string, varName: string, deserializeValue?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<VariableValueDto>> {
            return ProcessInstanceApiFp(configuration).getProcessInstanceVariable(id, varName, deserializeValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name. Applicable for byte array or file Process Variables.
         * @summary Get Process Variable (Binary)
         * @param {string} id The id of the process instance to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstanceVariableBinary(id: string, varName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return ProcessInstanceApiFp(configuration).getProcessInstanceVariableBinary(id, varName, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all variables of a given process instance by id.
         * @summary Get Process Variables
         * @param {string} id The id of the process instance to retrieve the variables from.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstanceVariables(id: string, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<{ [key: string]: VariableValueDto; }>> {
            return ProcessInstanceApiFp(configuration).getProcessInstanceVariables(id, deserializeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [processInstanceIds] Filter by a comma-separated list of process instance ids.
         * @param {string} [businessKey] Filter by process instance business key.
         * @param {string} [businessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [processDefinitionId] Filter by the deployment the id belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {string} [superProcessInstance] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstance] Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
         * @param {string} [superCaseInstance] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstance] Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
         * @param {boolean} [active] Only include active process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [suspended] Only include suspended process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [withIncident] Filter by presence of incidents. Selects only process instances that have an incident.
         * @param {string} [incidentId] Filter by the incident id.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include process instances which belong to no tenant.
         * @param {boolean} [processDefinitionWithoutTenantId] Only include process instances which process definition has no tenant id.
         * @param {string} [activityIdIn] Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [leafProcessInstances] Restrict the query to all process instances that are leaf instances. (i.e. don&#x27;t have any sub instances).
         * @param {string} [variables] Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, processInstanceIds?: string, businessKey?: string, businessKeyLike?: string, caseInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionKeyNotIn?: string, deploymentId?: string, superProcessInstance?: string, subProcessInstance?: string, superCaseInstance?: string, subCaseInstance?: string, active?: boolean, suspended?: boolean, withIncident?: boolean, incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, processDefinitionWithoutTenantId?: boolean, activityIdIn?: string, rootProcessInstances?: boolean, leafProcessInstances?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ProcessInstanceDto>>> {
            return ProcessInstanceApiFp(configuration).getProcessInstances(sortBy, sortOrder, firstResult, maxResults, processInstanceIds, businessKey, businessKeyLike, caseInstanceId, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionKeyNotIn, deploymentId, superProcessInstance, subProcessInstance, superCaseInstance, subCaseInstance, active, suspended, withIncident, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, processDefinitionWithoutTenantId, activityIdIn, rootProcessInstances, leafProcessInstances, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of process instances that fulfill given parameters.
         * @summary Get List Count
         * @param {string} [processInstanceIds] Filter by a comma-separated list of process instance ids.
         * @param {string} [businessKey] Filter by process instance business key.
         * @param {string} [businessKeyLike] Filter by process instance business key that the parameter is a substring of.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [processDefinitionId] Filter by the deployment the id belongs to.
         * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
         * @param {string} [processDefinitionKeyIn] Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
         * @param {string} [processDefinitionKeyNotIn] Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
         * @param {string} [deploymentId] Filter by the deployment the id belongs to.
         * @param {string} [superProcessInstance] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
         * @param {string} [subProcessInstance] Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
         * @param {string} [superCaseInstance] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
         * @param {string} [subCaseInstance] Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
         * @param {boolean} [active] Only include active process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [suspended] Only include suspended process instances. Value may only be true, as false is the default behavior.
         * @param {boolean} [withIncident] Filter by presence of incidents. Selects only process instances that have an incident.
         * @param {string} [incidentId] Filter by the incident id.
         * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Filter by the incident message. Exact match.
         * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
         * @param {boolean} [withoutTenantId] Only include process instances which belong to no tenant.
         * @param {boolean} [processDefinitionWithoutTenantId] Only include process instances which process definition has no tenant id.
         * @param {string} [activityIdIn] Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
         * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
         * @param {boolean} [leafProcessInstances] Restrict the query to all process instances that are leaf instances. (i.e. don&#x27;t have any sub instances).
         * @param {string} [variables] Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
         * @param {boolean} [variableNamesIgnoreCase] Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstancesCount(processInstanceIds?: string, businessKey?: string, businessKeyLike?: string, caseInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionKeyNotIn?: string, deploymentId?: string, superProcessInstance?: string, subProcessInstance?: string, superCaseInstance?: string, subCaseInstance?: string, active?: boolean, suspended?: boolean, withIncident?: boolean, incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, processDefinitionWithoutTenantId?: boolean, activityIdIn?: string, rootProcessInstances?: boolean, leafProcessInstances?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return ProcessInstanceApiFp(configuration).getProcessInstancesCount(processInstanceIds, businessKey, businessKeyLike, caseInstanceId, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionKeyNotIn, deploymentId, superProcessInstance, subProcessInstance, superCaseInstance, subCaseInstance, active, suspended, withIncident, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, processDefinitionWithoutTenantId, activityIdIn, rootProcessInstances, leafProcessInstances, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits a list of modification instructions to change a process instance's execution state. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed immediately and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
         * @summary Modify Process Instance Execution State
         * @param {string} id The id of the process instance to modify.
         * @param {ProcessInstanceModificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProcessInstance(id: string, body?: ProcessInstanceModificationDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProcessInstanceApiFp(configuration).modifyProcessInstance(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits a list of modification instructions to change a process instance's execution state async. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed asynchronous and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-modification/).
         * @summary Modify Process Instance Execution State Async
         * @param {string} id The id of the process instance to modify.
         * @param {ProcessInstanceModificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProcessInstanceAsyncOperation(id: string, body?: ProcessInstanceModificationDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return ProcessInstanceApiFp(configuration).modifyProcessInstanceAsyncOperation(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
         * @summary Update/Delete Process Variables
         * @param {string} id The id of the process instance to set variables for.
         * @param {PatchVariablesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProcessInstanceVariables(id: string, body?: PatchVariablesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProcessInstanceApiFp(configuration).modifyProcessInstanceVariables(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
         * @summary Get List (POST)
         * @param {ProcessInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryProcessInstances(body?: ProcessInstanceQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ProcessInstanceDto>>> {
            return ProcessInstanceApiFp(configuration).queryProcessInstances(body, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) method and therefore it is slightly more powerful than the Get Instance Count method.
         * @summary Get List Count (POST)
         * @param {ProcessInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryProcessInstancesCount(body?: ProcessInstanceQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return ProcessInstanceApiFp(configuration).queryProcessInstancesCount(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets a variable of a given process instance by id.
         * @summary Update Process Variable
         * @param {string} id The id of the process instance to set the variable for.
         * @param {string} varName The name of the variable to set.
         * @param {VariableValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProcessInstanceVariable(id: string, varName: string, body?: VariableValueDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProcessInstanceApiFp(configuration).setProcessInstanceVariable(id, varName, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the serialized value for a binary variable or the binary value for a file variable.
         * @summary Update Process Variable (Binary)
         * @param {string} id The id of the process instance to retrieve the variable for.
         * @param {string} varName The name of the variable to retrieve.
         * @param {Blob} [data] 
         * @param {string} [valueType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProcessInstanceVariableBinaryForm(id: string, varName: string, data?: Blob, valueType?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProcessInstanceApiFp(configuration).setProcessInstanceVariableBinaryForm(id, varName, data, valueType, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a batch to set retries of jobs associated with given processes asynchronously.
         * @summary Set Job Retries Async (POST)
         * @param {SetJobRetriesByProcessDto} [body] Please note that if both processInstances and processInstanceQuery are provided,
then the resulting execution will be performed on the union of these sets.
**Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRetriesByProcess(body?: SetJobRetriesByProcessDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return ProcessInstanceApiFp(configuration).setRetriesByProcess(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a batch to set retries of jobs asynchronously based on a historic process instance query.
         * @summary Set Job Retries Async Historic Query Based (POST)
         * @param {SetJobRetriesByProcessDto} [body] Please note that if both processInstances and historicProcessInstanceQuery are provided,
then the resulting execution will be performed on the union of these sets.
**Unallowed property**: &#x60;processInstanceQuery&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRetriesByProcessHistoricQueryBased(body?: SetJobRetriesByProcessDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return ProcessInstanceApiFp(configuration).setRetriesByProcessHistoricQueryBased(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update or create runtime process variables in the root scope of process instances.
         * @summary Set Variables Async (POST)
         * @param {SetVariablesAsyncDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setVariablesAsyncOperation(body?: SetVariablesAsyncDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return ProcessInstanceApiFp(configuration).setVariablesAsyncOperation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates or suspends process instances by providing certain criteria:  # Activate/Suspend Process Instance By Process Definition Id * `suspend` * `processDefinitionId`  # Activate/Suspend Process Instance By Process Definition Key  * `suspend` * `processDefinitionKey` * `processDefinitionTenantId` * `processDefinitionWithoutTenantId`  # Activate/Suspend Process Instance In Group * `suspend` * `processInstanceIds` * `processInstanceQuery` * `historicProcessInstanceQuery`
         * @summary Activate/Suspend In Group
         * @param {ProcessInstanceSuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionState(body?: ProcessInstanceSuspensionStateDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProcessInstanceApiFp(configuration).updateSuspensionState(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates or suspends process instances asynchronously with a list of process instance ids, a process instance query, and/or a historical process instance query.
         * @summary Activate/Suspend In Batch
         * @param {ProcessInstanceSuspensionStateAsyncDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionStateAsyncOperation(body?: ProcessInstanceSuspensionStateAsyncDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return ProcessInstanceApiFp(configuration).updateSuspensionStateAsyncOperation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates or suspends a given process instance by id.
         * @summary Activate/Suspend Process Instance By Id
         * @param {string} id The id of the process instance to activate or suspend.
         * @param {SuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionStateById(id: string, body?: SuspensionStateDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProcessInstanceApiFp(configuration).updateSuspensionStateById(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessInstanceApi - object-oriented interface
 * @export
 * @class ProcessInstanceApi
 * @extends {BaseAPI}
 */
export class ProcessInstanceApi extends BaseAPI {
    /**
     * Correlates a message asynchronously to executions that are waiting for this message.  Messages will not be correlated to process definition-level start message events to start process instances.
     * @summary Correlate Message Async (POST)
     * @param {CorrelationMessageAsyncDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async correlateMessageAsyncOperation(body?: CorrelationMessageAsyncDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return ProcessInstanceApiFp(this.configuration).correlateMessageAsyncOperation(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
     * @summary Delete Async Historic Query Based (POST)
     * @param {DeleteProcessInstancesDto} [body] **Unallowed property**: &#x60;processInstanceQuery&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async deleteAsyncHistoricQueryBased(body?: DeleteProcessInstancesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return ProcessInstanceApiFp(this.configuration).deleteAsyncHistoricQueryBased(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a running process instance by id.
     * @summary Delete
     * @param {string} id The id of the process instance to be deleted.
     * @param {boolean} [skipCustomListeners] If set to true, the custom listeners will be skipped.
     * @param {boolean} [skipIoMappings] If set to true, the input/output mappings will be skipped.
     * @param {boolean} [skipSubprocesses] If set to true, subprocesses related to deleted processes will be skipped.
     * @param {boolean} [failIfNotExists] If set to false, the request will still be successful if the process id is not found.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async deleteProcessInstance(id: string, skipCustomListeners?: boolean, skipIoMappings?: boolean, skipSubprocesses?: boolean, failIfNotExists?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProcessInstanceApiFp(this.configuration).deleteProcessInstance(id, skipCustomListeners, skipIoMappings, skipSubprocesses, failIfNotExists, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a variable of a process instance by id.
     * @summary Delete Process Variable
     * @param {string} id The id of the process instance to delete the variable from.
     * @param {string} varName The name of the variable to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async deleteProcessInstanceVariable(id: string, varName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProcessInstanceApiFp(this.configuration).deleteProcessInstanceVariable(id, varName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes multiple process instances asynchronously (batch).
     * @summary Delete Async (POST)
     * @param {DeleteProcessInstancesDto} [body] **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async deleteProcessInstancesAsyncOperation(body?: DeleteProcessInstancesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return ProcessInstanceApiFp(this.configuration).deleteProcessInstancesAsyncOperation(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves an Activity Instance (Tree) for a given process instance by id.
     * @summary Get Activity Instance
     * @param {string} id The id of the process instance for which the activity instance should be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async getActivityInstanceTree(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ActivityInstanceDto>> {
        return ProcessInstanceApiFp(this.configuration).getActivityInstanceTree(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
     * @summary Get Process Instance
     * @param {string} id The id of the process instance to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async getProcessInstance(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProcessInstanceDto>> {
        return ProcessInstanceApiFp(this.configuration).getProcessInstance(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the comments for a process instance by id.
     * @summary Get Process Instance Comments
     * @param {string} id The id of the process instance to retrieve the comments for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async getProcessInstanceComments(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CommentDto>>> {
        return ProcessInstanceApiFp(this.configuration).getProcessInstanceComments(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a variable of a given process instance by id.
     * @summary Get Process Variable
     * @param {string} id The id of the process instance to retrieve the variable for.
     * @param {string} varName The name of the variable to retrieve.
     * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async getProcessInstanceVariable(id: string, varName: string, deserializeValue?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<VariableValueDto>> {
        return ProcessInstanceApiFp(this.configuration).getProcessInstanceVariable(id, varName, deserializeValue, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name. Applicable for byte array or file Process Variables.
     * @summary Get Process Variable (Binary)
     * @param {string} id The id of the process instance to retrieve the variable for.
     * @param {string} varName The name of the variable to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async getProcessInstanceVariableBinary(id: string, varName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return ProcessInstanceApiFp(this.configuration).getProcessInstanceVariableBinary(id, varName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves all variables of a given process instance by id.
     * @summary Get Process Variables
     * @param {string} id The id of the process instance to retrieve the variables from.
     * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async getProcessInstanceVariables(id: string, deserializeValues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<{ [key: string]: VariableValueDto; }>> {
        return ProcessInstanceApiFp(this.configuration).getProcessInstanceVariables(id, deserializeValues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.
     * @summary Get List
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {string} [processInstanceIds] Filter by a comma-separated list of process instance ids.
     * @param {string} [businessKey] Filter by process instance business key.
     * @param {string} [businessKeyLike] Filter by process instance business key that the parameter is a substring of.
     * @param {string} [caseInstanceId] Filter by case instance id.
     * @param {string} [processDefinitionId] Filter by the deployment the id belongs to.
     * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
     * @param {string} [processDefinitionKeyIn] Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
     * @param {string} [processDefinitionKeyNotIn] Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
     * @param {string} [deploymentId] Filter by the deployment the id belongs to.
     * @param {string} [superProcessInstance] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {string} [subProcessInstance] Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
     * @param {string} [superCaseInstance] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {string} [subCaseInstance] Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
     * @param {boolean} [active] Only include active process instances. Value may only be true, as false is the default behavior.
     * @param {boolean} [suspended] Only include suspended process instances. Value may only be true, as false is the default behavior.
     * @param {boolean} [withIncident] Filter by presence of incidents. Selects only process instances that have an incident.
     * @param {string} [incidentId] Filter by the incident id.
     * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {string} [incidentMessage] Filter by the incident message. Exact match.
     * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include process instances which belong to no tenant.
     * @param {boolean} [processDefinitionWithoutTenantId] Only include process instances which process definition has no tenant id.
     * @param {string} [activityIdIn] Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
     * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
     * @param {boolean} [leafProcessInstances] Restrict the query to all process instances that are leaf instances. (i.e. don&#x27;t have any sub instances).
     * @param {string} [variables] Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {boolean} [variableNamesIgnoreCase] Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
     * @param {boolean} [variableValuesIgnoreCase] Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async getProcessInstances(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, processInstanceIds?: string, businessKey?: string, businessKeyLike?: string, caseInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionKeyNotIn?: string, deploymentId?: string, superProcessInstance?: string, subProcessInstance?: string, superCaseInstance?: string, subCaseInstance?: string, active?: boolean, suspended?: boolean, withIncident?: boolean, incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, processDefinitionWithoutTenantId?: boolean, activityIdIn?: string, rootProcessInstances?: boolean, leafProcessInstances?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ProcessInstanceDto>>> {
        return ProcessInstanceApiFp(this.configuration).getProcessInstances(sortBy, sortOrder, firstResult, maxResults, processInstanceIds, businessKey, businessKeyLike, caseInstanceId, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionKeyNotIn, deploymentId, superProcessInstance, subProcessInstance, superCaseInstance, subCaseInstance, active, suspended, withIncident, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, processDefinitionWithoutTenantId, activityIdIn, rootProcessInstances, leafProcessInstances, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of process instances that fulfill given parameters.
     * @summary Get List Count
     * @param {string} [processInstanceIds] Filter by a comma-separated list of process instance ids.
     * @param {string} [businessKey] Filter by process instance business key.
     * @param {string} [businessKeyLike] Filter by process instance business key that the parameter is a substring of.
     * @param {string} [caseInstanceId] Filter by case instance id.
     * @param {string} [processDefinitionId] Filter by the deployment the id belongs to.
     * @param {string} [processDefinitionKey] Filter by the key of the process definition the instances run on.
     * @param {string} [processDefinitionKeyIn] Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
     * @param {string} [processDefinitionKeyNotIn] Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
     * @param {string} [deploymentId] Filter by the deployment the id belongs to.
     * @param {string} [superProcessInstance] Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {string} [subProcessInstance] Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
     * @param {string} [superCaseInstance] Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {string} [subCaseInstance] Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
     * @param {boolean} [active] Only include active process instances. Value may only be true, as false is the default behavior.
     * @param {boolean} [suspended] Only include suspended process instances. Value may only be true, as false is the default behavior.
     * @param {boolean} [withIncident] Filter by presence of incidents. Selects only process instances that have an incident.
     * @param {string} [incidentId] Filter by the incident id.
     * @param {string} [incidentType] Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {string} [incidentMessage] Filter by the incident message. Exact match.
     * @param {string} [incidentMessageLike] Filter by the incident message that the parameter is a substring of.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
     * @param {boolean} [withoutTenantId] Only include process instances which belong to no tenant.
     * @param {boolean} [processDefinitionWithoutTenantId] Only include process instances which process definition has no tenant id.
     * @param {string} [activityIdIn] Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
     * @param {boolean} [rootProcessInstances] Restrict the query to all process instances that are top level process instances.
     * @param {boolean} [leafProcessInstances] Restrict the query to all process instances that are leaf instances. (i.e. don&#x27;t have any sub instances).
     * @param {string} [variables] Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {boolean} [variableNamesIgnoreCase] Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
     * @param {boolean} [variableValuesIgnoreCase] Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async getProcessInstancesCount(processInstanceIds?: string, businessKey?: string, businessKeyLike?: string, caseInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processDefinitionKeyNotIn?: string, deploymentId?: string, superProcessInstance?: string, subProcessInstance?: string, superCaseInstance?: string, subCaseInstance?: string, active?: boolean, suspended?: boolean, withIncident?: boolean, incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, tenantIdIn?: string, withoutTenantId?: boolean, processDefinitionWithoutTenantId?: boolean, activityIdIn?: string, rootProcessInstances?: boolean, leafProcessInstances?: boolean, variables?: string, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return ProcessInstanceApiFp(this.configuration).getProcessInstancesCount(processInstanceIds, businessKey, businessKeyLike, caseInstanceId, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionKeyNotIn, deploymentId, superProcessInstance, subProcessInstance, superCaseInstance, subCaseInstance, active, suspended, withIncident, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, processDefinitionWithoutTenantId, activityIdIn, rootProcessInstances, leafProcessInstances, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Submits a list of modification instructions to change a process instance's execution state. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed immediately and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
     * @summary Modify Process Instance Execution State
     * @param {string} id The id of the process instance to modify.
     * @param {ProcessInstanceModificationDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async modifyProcessInstance(id: string, body?: ProcessInstanceModificationDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProcessInstanceApiFp(this.configuration).modifyProcessInstance(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Submits a list of modification instructions to change a process instance's execution state async. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed asynchronous and in the order they are provided in this request's body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-modification/).
     * @summary Modify Process Instance Execution State Async
     * @param {string} id The id of the process instance to modify.
     * @param {ProcessInstanceModificationDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async modifyProcessInstanceAsyncOperation(id: string, body?: ProcessInstanceModificationDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return ProcessInstanceApiFp(this.configuration).modifyProcessInstanceAsyncOperation(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
     * @summary Update/Delete Process Variables
     * @param {string} id The id of the process instance to set variables for.
     * @param {PatchVariablesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async modifyProcessInstanceVariables(id: string, body?: PatchVariablesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProcessInstanceApiFp(this.configuration).modifyProcessInstanceVariables(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
     * @summary Get List (POST)
     * @param {ProcessInstanceQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async queryProcessInstances(body?: ProcessInstanceQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ProcessInstanceDto>>> {
        return ProcessInstanceApiFp(this.configuration).queryProcessInstances(body, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) method and therefore it is slightly more powerful than the Get Instance Count method.
     * @summary Get List Count (POST)
     * @param {ProcessInstanceQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async queryProcessInstancesCount(body?: ProcessInstanceQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return ProcessInstanceApiFp(this.configuration).queryProcessInstancesCount(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets a variable of a given process instance by id.
     * @summary Update Process Variable
     * @param {string} id The id of the process instance to set the variable for.
     * @param {string} varName The name of the variable to set.
     * @param {VariableValueDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async setProcessInstanceVariable(id: string, varName: string, body?: VariableValueDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProcessInstanceApiFp(this.configuration).setProcessInstanceVariable(id, varName, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @summary Update Process Variable (Binary)
     * @param {string} id The id of the process instance to retrieve the variable for.
     * @param {string} varName The name of the variable to retrieve.
     * @param {Blob} [data] 
     * @param {string} [valueType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async setProcessInstanceVariableBinaryForm(id: string, varName: string, data?: Blob, valueType?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProcessInstanceApiFp(this.configuration).setProcessInstanceVariableBinaryForm(id, varName, data, valueType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a batch to set retries of jobs associated with given processes asynchronously.
     * @summary Set Job Retries Async (POST)
     * @param {SetJobRetriesByProcessDto} [body] Please note that if both processInstances and processInstanceQuery are provided,
then the resulting execution will be performed on the union of these sets.
**Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async setRetriesByProcess(body?: SetJobRetriesByProcessDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return ProcessInstanceApiFp(this.configuration).setRetriesByProcess(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a batch to set retries of jobs asynchronously based on a historic process instance query.
     * @summary Set Job Retries Async Historic Query Based (POST)
     * @param {SetJobRetriesByProcessDto} [body] Please note that if both processInstances and historicProcessInstanceQuery are provided,
then the resulting execution will be performed on the union of these sets.
**Unallowed property**: &#x60;processInstanceQuery&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async setRetriesByProcessHistoricQueryBased(body?: SetJobRetriesByProcessDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return ProcessInstanceApiFp(this.configuration).setRetriesByProcessHistoricQueryBased(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update or create runtime process variables in the root scope of process instances.
     * @summary Set Variables Async (POST)
     * @param {SetVariablesAsyncDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async setVariablesAsyncOperation(body?: SetVariablesAsyncDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return ProcessInstanceApiFp(this.configuration).setVariablesAsyncOperation(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activates or suspends process instances by providing certain criteria:  # Activate/Suspend Process Instance By Process Definition Id * `suspend` * `processDefinitionId`  # Activate/Suspend Process Instance By Process Definition Key  * `suspend` * `processDefinitionKey` * `processDefinitionTenantId` * `processDefinitionWithoutTenantId`  # Activate/Suspend Process Instance In Group * `suspend` * `processInstanceIds` * `processInstanceQuery` * `historicProcessInstanceQuery`
     * @summary Activate/Suspend In Group
     * @param {ProcessInstanceSuspensionStateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async updateSuspensionState(body?: ProcessInstanceSuspensionStateDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProcessInstanceApiFp(this.configuration).updateSuspensionState(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activates or suspends process instances asynchronously with a list of process instance ids, a process instance query, and/or a historical process instance query.
     * @summary Activate/Suspend In Batch
     * @param {ProcessInstanceSuspensionStateAsyncDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async updateSuspensionStateAsyncOperation(body?: ProcessInstanceSuspensionStateAsyncDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return ProcessInstanceApiFp(this.configuration).updateSuspensionStateAsyncOperation(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activates or suspends a given process instance by id.
     * @summary Activate/Suspend Process Instance By Id
     * @param {string} id The id of the process instance to activate or suspend.
     * @param {SuspensionStateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstanceApi
     */
    public async updateSuspensionStateById(id: string, body?: SuspensionStateDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProcessInstanceApiFp(this.configuration).updateSuspensionStateById(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BatchDto } from '../models';
import { ExceptionDto } from '../models';
import { MigrationExecutionDto } from '../models';
import { MigrationPlanDto } from '../models';
import { MigrationPlanGenerationDto } from '../models';
import { MigrationPlanReportDto } from '../models';
/**
 * MigrationApi - axios parameter creator
 * @export
 */
export const MigrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration-async/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
         * @summary Execute Migration Plan
         * @param {MigrationExecutionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeMigrationPlan: async (body?: MigrationExecutionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migration/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the [Execute MigrationPlan](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
         * @summary Execute Migration Plan Async (Batch)
         * @param {MigrationExecutionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeMigrationPlanAsync: async (body?: MigrationExecutionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migration/executeAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.
         * @summary Generate Migration Plan
         * @param {MigrationPlanGenerationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMigrationPlan: async (body?: MigrationPlanGenerationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migration/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates a migration plan statically without executing it. This corresponds to the [creation time validation](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#creation-time-validation) described in the user guide.
         * @summary Validate Migration Plan
         * @param {MigrationPlanDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMigrationPlan: async (body?: MigrationPlanDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migration/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MigrationApi - functional programming interface
 * @export
 */
export const MigrationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration-async/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
         * @summary Execute Migration Plan
         * @param {MigrationExecutionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeMigrationPlan(body?: MigrationExecutionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MigrationApiAxiosParamCreator(configuration).executeMigrationPlan(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the [Execute MigrationPlan](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
         * @summary Execute Migration Plan Async (Batch)
         * @param {MigrationExecutionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeMigrationPlanAsync(body?: MigrationExecutionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BatchDto>>> {
            const localVarAxiosArgs = await MigrationApiAxiosParamCreator(configuration).executeMigrationPlanAsync(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.
         * @summary Generate Migration Plan
         * @param {MigrationPlanGenerationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateMigrationPlan(body?: MigrationPlanGenerationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MigrationPlanDto>>> {
            const localVarAxiosArgs = await MigrationApiAxiosParamCreator(configuration).generateMigrationPlan(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates a migration plan statically without executing it. This corresponds to the [creation time validation](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#creation-time-validation) described in the user guide.
         * @summary Validate Migration Plan
         * @param {MigrationPlanDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateMigrationPlan(body?: MigrationPlanDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MigrationPlanReportDto>>> {
            const localVarAxiosArgs = await MigrationApiAxiosParamCreator(configuration).validateMigrationPlan(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MigrationApi - factory interface
 * @export
 */
export const MigrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration-async/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
         * @summary Execute Migration Plan
         * @param {MigrationExecutionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeMigrationPlan(body?: MigrationExecutionDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MigrationApiFp(configuration).executeMigrationPlan(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the [Execute MigrationPlan](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
         * @summary Execute Migration Plan Async (Batch)
         * @param {MigrationExecutionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeMigrationPlanAsync(body?: MigrationExecutionDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BatchDto>> {
            return MigrationApiFp(configuration).executeMigrationPlanAsync(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.
         * @summary Generate Migration Plan
         * @param {MigrationPlanGenerationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateMigrationPlan(body?: MigrationPlanGenerationDto, options?: AxiosRequestConfig): Promise<AxiosResponse<MigrationPlanDto>> {
            return MigrationApiFp(configuration).generateMigrationPlan(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates a migration plan statically without executing it. This corresponds to the [creation time validation](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#creation-time-validation) described in the user guide.
         * @summary Validate Migration Plan
         * @param {MigrationPlanDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateMigrationPlan(body?: MigrationPlanDto, options?: AxiosRequestConfig): Promise<AxiosResponse<MigrationPlanReportDto>> {
            return MigrationApiFp(configuration).validateMigrationPlan(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MigrationApi - object-oriented interface
 * @export
 * @class MigrationApi
 * @extends {BaseAPI}
 */
export class MigrationApi extends BaseAPI {
    /**
     * Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration-async/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     * @summary Execute Migration Plan
     * @param {MigrationExecutionDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationApi
     */
    public async executeMigrationPlan(body?: MigrationExecutionDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MigrationApiFp(this.configuration).executeMigrationPlan(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the [Execute MigrationPlan](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     * @summary Execute Migration Plan Async (Batch)
     * @param {MigrationExecutionDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationApi
     */
    public async executeMigrationPlanAsync(body?: MigrationExecutionDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BatchDto>> {
        return MigrationApiFp(this.configuration).executeMigrationPlanAsync(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.
     * @summary Generate Migration Plan
     * @param {MigrationPlanGenerationDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationApi
     */
    public async generateMigrationPlan(body?: MigrationPlanGenerationDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<MigrationPlanDto>> {
        return MigrationApiFp(this.configuration).generateMigrationPlan(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates a migration plan statically without executing it. This corresponds to the [creation time validation](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#creation-time-validation) described in the user guide.
     * @summary Validate Migration Plan
     * @param {MigrationPlanDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationApi
     */
    public async validateMigrationPlan(body?: MigrationPlanDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<MigrationPlanReportDto>> {
        return MigrationApiFp(this.configuration).validateMigrationPlan(body, options).then((request) => request(this.axios, this.basePath));
    }
}

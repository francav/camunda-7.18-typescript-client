/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoricExternalTaskLogDto } from '../models';
import { HistoricExternalTaskLogQueryDto } from '../models';
/**
 * HistoricExternalTaskLogApi - axios parameter creator
 * @export
 */
export const HistoricExternalTaskLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the corresponding error details of the passed historic external task log by id.
         * @summary Get External Task Log Error Details
         * @param {string} id The id of the historic external task log to get the error details for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrorDetailsHistoricExternalTaskLog: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getErrorDetailsHistoricExternalTaskLog.');
            }
            const localVarPath = `/history/external-task-log/{id}/error-details`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a historic external task log by id.
         * @summary Get External Task Log
         * @param {string} id The id of the log entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricExternalTaskLog: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getHistoricExternalTaskLog.');
            }
            const localVarPath = `/history/external-task-log/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
         * @summary Get External Task Logs
         * @param {string} [logId] Filter by historic external task log id.
         * @param {string} [externalTaskId] Filter by external task id.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {string} [errorMessage] Filter by external task exception message.
         * @param {string} [activityIdIn] Only include historic external task logs which belong to one of the passed activity ids.
         * @param {string} [activityInstanceIdIn] Only include historic external task logs which belong to one of the passed activity instance ids.
         * @param {string} [executionIdIn] Only include historic external task logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [tenantIdIn] Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {number} [priorityLowerThanOrEquals] Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityHigherThanOrEquals] Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricExternalTaskLogs: async (logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/external-task-log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (logId !== undefined) {
                localVarQueryParameter['logId'] = logId;
            }

            if (externalTaskId !== undefined) {
                localVarQueryParameter['externalTaskId'] = externalTaskId;
            }

            if (topicName !== undefined) {
                localVarQueryParameter['topicName'] = topicName;
            }

            if (workerId !== undefined) {
                localVarQueryParameter['workerId'] = workerId;
            }

            if (errorMessage !== undefined) {
                localVarQueryParameter['errorMessage'] = errorMessage;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (activityInstanceIdIn !== undefined) {
                localVarQueryParameter['activityInstanceIdIn'] = activityInstanceIdIn;
            }

            if (executionIdIn !== undefined) {
                localVarQueryParameter['executionIdIn'] = executionIdIn;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (priorityLowerThanOrEquals !== undefined) {
                localVarQueryParameter['priorityLowerThanOrEquals'] = priorityLowerThanOrEquals;
            }

            if (priorityHigherThanOrEquals !== undefined) {
                localVarQueryParameter['priorityHigherThanOrEquals'] = priorityHigherThanOrEquals;
            }

            if (creationLog !== undefined) {
                localVarQueryParameter['creationLog'] = creationLog;
            }

            if (failureLog !== undefined) {
                localVarQueryParameter['failureLog'] = failureLog;
            }

            if (successLog !== undefined) {
                localVarQueryParameter['successLog'] = successLog;
            }

            if (deletionLog !== undefined) {
                localVarQueryParameter['deletionLog'] = deletionLog;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query/) method.
         * @summary Get External Task Log Count
         * @param {string} [logId] Filter by historic external task log id.
         * @param {string} [externalTaskId] Filter by external task id.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {string} [errorMessage] Filter by external task exception message.
         * @param {string} [activityIdIn] Only include historic external task logs which belong to one of the passed activity ids.
         * @param {string} [activityInstanceIdIn] Only include historic external task logs which belong to one of the passed activity instance ids.
         * @param {string} [executionIdIn] Only include historic external task logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [tenantIdIn] Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {number} [priorityLowerThanOrEquals] Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityHigherThanOrEquals] Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricExternalTaskLogsCount: async (logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/external-task-log/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (logId !== undefined) {
                localVarQueryParameter['logId'] = logId;
            }

            if (externalTaskId !== undefined) {
                localVarQueryParameter['externalTaskId'] = externalTaskId;
            }

            if (topicName !== undefined) {
                localVarQueryParameter['topicName'] = topicName;
            }

            if (workerId !== undefined) {
                localVarQueryParameter['workerId'] = workerId;
            }

            if (errorMessage !== undefined) {
                localVarQueryParameter['errorMessage'] = errorMessage;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (activityInstanceIdIn !== undefined) {
                localVarQueryParameter['activityInstanceIdIn'] = activityInstanceIdIn;
            }

            if (executionIdIn !== undefined) {
                localVarQueryParameter['executionIdIn'] = executionIdIn;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (priorityLowerThanOrEquals !== undefined) {
                localVarQueryParameter['priorityLowerThanOrEquals'] = priorityLowerThanOrEquals;
            }

            if (priorityHigherThanOrEquals !== undefined) {
                localVarQueryParameter['priorityHigherThanOrEquals'] = priorityHigherThanOrEquals;
            }

            if (creationLog !== undefined) {
                localVarQueryParameter['creationLog'] = creationLog;
            }

            if (failureLog !== undefined) {
                localVarQueryParameter['failureLog'] = failureLog;
            }

            if (successLog !== undefined) {
                localVarQueryParameter['successLog'] = successLog;
            }

            if (deletionLog !== undefined) {
                localVarQueryParameter['deletionLog'] = deletionLog;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types `String`, `Number` or `Boolean`.
         * @summary Get External Task Logs (POST)
         * @param {HistoricExternalTaskLogQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricExternalTaskLogs: async (body?: HistoricExternalTaskLogQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/external-task-log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
         * @summary Get External Task Log Count (POST)
         * @param {HistoricExternalTaskLogQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricExternalTaskLogsCount: async (body?: HistoricExternalTaskLogQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/external-task-log/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricExternalTaskLogApi - functional programming interface
 * @export
 */
export const HistoricExternalTaskLogApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves the corresponding error details of the passed historic external task log by id.
         * @summary Get External Task Log Error Details
         * @param {string} id The id of the historic external task log to get the error details for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getErrorDetailsHistoricExternalTaskLog(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await HistoricExternalTaskLogApiAxiosParamCreator(configuration).getErrorDetailsHistoricExternalTaskLog(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a historic external task log by id.
         * @summary Get External Task Log
         * @param {string} id The id of the log entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricExternalTaskLog(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HistoricExternalTaskLogDto>>> {
            const localVarAxiosArgs = await HistoricExternalTaskLogApiAxiosParamCreator(configuration).getHistoricExternalTaskLog(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
         * @summary Get External Task Logs
         * @param {string} [logId] Filter by historic external task log id.
         * @param {string} [externalTaskId] Filter by external task id.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {string} [errorMessage] Filter by external task exception message.
         * @param {string} [activityIdIn] Only include historic external task logs which belong to one of the passed activity ids.
         * @param {string} [activityInstanceIdIn] Only include historic external task logs which belong to one of the passed activity instance ids.
         * @param {string} [executionIdIn] Only include historic external task logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [tenantIdIn] Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {number} [priorityLowerThanOrEquals] Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityHigherThanOrEquals] Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricExternalTaskLogs(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricExternalTaskLogDto>>>> {
            const localVarAxiosArgs = await HistoricExternalTaskLogApiAxiosParamCreator(configuration).getHistoricExternalTaskLogs(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query/) method.
         * @summary Get External Task Log Count
         * @param {string} [logId] Filter by historic external task log id.
         * @param {string} [externalTaskId] Filter by external task id.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {string} [errorMessage] Filter by external task exception message.
         * @param {string} [activityIdIn] Only include historic external task logs which belong to one of the passed activity ids.
         * @param {string} [activityInstanceIdIn] Only include historic external task logs which belong to one of the passed activity instance ids.
         * @param {string} [executionIdIn] Only include historic external task logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [tenantIdIn] Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {number} [priorityLowerThanOrEquals] Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityHigherThanOrEquals] Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricExternalTaskLogsCount(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricExternalTaskLogApiAxiosParamCreator(configuration).getHistoricExternalTaskLogsCount(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types `String`, `Number` or `Boolean`.
         * @summary Get External Task Logs (POST)
         * @param {HistoricExternalTaskLogQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricExternalTaskLogs(body?: HistoricExternalTaskLogQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricExternalTaskLogDto>>>> {
            const localVarAxiosArgs = await HistoricExternalTaskLogApiAxiosParamCreator(configuration).queryHistoricExternalTaskLogs(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
         * @summary Get External Task Log Count (POST)
         * @param {HistoricExternalTaskLogQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricExternalTaskLogsCount(body?: HistoricExternalTaskLogQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricExternalTaskLogApiAxiosParamCreator(configuration).queryHistoricExternalTaskLogsCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoricExternalTaskLogApi - factory interface
 * @export
 */
export const HistoricExternalTaskLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves the corresponding error details of the passed historic external task log by id.
         * @summary Get External Task Log Error Details
         * @param {string} id The id of the historic external task log to get the error details for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getErrorDetailsHistoricExternalTaskLog(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return HistoricExternalTaskLogApiFp(configuration).getErrorDetailsHistoricExternalTaskLog(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a historic external task log by id.
         * @summary Get External Task Log
         * @param {string} id The id of the log entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricExternalTaskLog(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HistoricExternalTaskLogDto>> {
            return HistoricExternalTaskLogApiFp(configuration).getHistoricExternalTaskLog(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
         * @summary Get External Task Logs
         * @param {string} [logId] Filter by historic external task log id.
         * @param {string} [externalTaskId] Filter by external task id.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {string} [errorMessage] Filter by external task exception message.
         * @param {string} [activityIdIn] Only include historic external task logs which belong to one of the passed activity ids.
         * @param {string} [activityInstanceIdIn] Only include historic external task logs which belong to one of the passed activity instance ids.
         * @param {string} [executionIdIn] Only include historic external task logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [tenantIdIn] Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {number} [priorityLowerThanOrEquals] Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityHigherThanOrEquals] Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricExternalTaskLogs(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricExternalTaskLogDto>>> {
            return HistoricExternalTaskLogApiFp(configuration).getHistoricExternalTaskLogs(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query/) method.
         * @summary Get External Task Log Count
         * @param {string} [logId] Filter by historic external task log id.
         * @param {string} [externalTaskId] Filter by external task id.
         * @param {string} [topicName] Filter by an external task topic.
         * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
         * @param {string} [errorMessage] Filter by external task exception message.
         * @param {string} [activityIdIn] Only include historic external task logs which belong to one of the passed activity ids.
         * @param {string} [activityInstanceIdIn] Only include historic external task logs which belong to one of the passed activity instance ids.
         * @param {string} [executionIdIn] Only include historic external task logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [tenantIdIn] Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {number} [priorityLowerThanOrEquals] Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [priorityHigherThanOrEquals] Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricExternalTaskLogsCount(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricExternalTaskLogApiFp(configuration).getHistoricExternalTaskLogsCount(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types `String`, `Number` or `Boolean`.
         * @summary Get External Task Logs (POST)
         * @param {HistoricExternalTaskLogQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricExternalTaskLogs(body?: HistoricExternalTaskLogQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricExternalTaskLogDto>>> {
            return HistoricExternalTaskLogApiFp(configuration).queryHistoricExternalTaskLogs(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
         * @summary Get External Task Log Count (POST)
         * @param {HistoricExternalTaskLogQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricExternalTaskLogsCount(body?: HistoricExternalTaskLogQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricExternalTaskLogApiFp(configuration).queryHistoricExternalTaskLogsCount(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricExternalTaskLogApi - object-oriented interface
 * @export
 * @class HistoricExternalTaskLogApi
 * @extends {BaseAPI}
 */
export class HistoricExternalTaskLogApi extends BaseAPI {
    /**
     * Retrieves the corresponding error details of the passed historic external task log by id.
     * @summary Get External Task Log Error Details
     * @param {string} id The id of the historic external task log to get the error details for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricExternalTaskLogApi
     */
    public async getErrorDetailsHistoricExternalTaskLog(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return HistoricExternalTaskLogApiFp(this.configuration).getErrorDetailsHistoricExternalTaskLog(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a historic external task log by id.
     * @summary Get External Task Log
     * @param {string} id The id of the log entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricExternalTaskLogApi
     */
    public async getHistoricExternalTaskLog(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<HistoricExternalTaskLogDto>> {
        return HistoricExternalTaskLogApiFp(this.configuration).getHistoricExternalTaskLog(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
     * @summary Get External Task Logs
     * @param {string} [logId] Filter by historic external task log id.
     * @param {string} [externalTaskId] Filter by external task id.
     * @param {string} [topicName] Filter by an external task topic.
     * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
     * @param {string} [errorMessage] Filter by external task exception message.
     * @param {string} [activityIdIn] Only include historic external task logs which belong to one of the passed activity ids.
     * @param {string} [activityInstanceIdIn] Only include historic external task logs which belong to one of the passed activity instance ids.
     * @param {string} [executionIdIn] Only include historic external task logs which belong to one of the passed execution ids.
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processDefinitionId] Filter by process definition id.
     * @param {string} [processDefinitionKey] Filter by process definition key.
     * @param {string} [tenantIdIn] Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {number} [priorityLowerThanOrEquals] Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {number} [priorityHigherThanOrEquals] Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricExternalTaskLogApi
     */
    public async getHistoricExternalTaskLogs(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricExternalTaskLogDto>>> {
        return HistoricExternalTaskLogApiFp(this.configuration).getHistoricExternalTaskLogs(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query/) method.
     * @summary Get External Task Log Count
     * @param {string} [logId] Filter by historic external task log id.
     * @param {string} [externalTaskId] Filter by external task id.
     * @param {string} [topicName] Filter by an external task topic.
     * @param {string} [workerId] Filter by the id of the worker that the task was most recently locked by.
     * @param {string} [errorMessage] Filter by external task exception message.
     * @param {string} [activityIdIn] Only include historic external task logs which belong to one of the passed activity ids.
     * @param {string} [activityInstanceIdIn] Only include historic external task logs which belong to one of the passed activity instance ids.
     * @param {string} [executionIdIn] Only include historic external task logs which belong to one of the passed execution ids.
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processDefinitionId] Filter by process definition id.
     * @param {string} [processDefinitionKey] Filter by process definition key.
     * @param {string} [tenantIdIn] Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {number} [priorityLowerThanOrEquals] Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {number} [priorityHigherThanOrEquals] Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricExternalTaskLogApi
     */
    public async getHistoricExternalTaskLogsCount(logId?: string, externalTaskId?: string, topicName?: string, workerId?: string, errorMessage?: string, activityIdIn?: string, activityInstanceIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, tenantIdIn?: string, withoutTenantId?: boolean, priorityLowerThanOrEquals?: number, priorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricExternalTaskLogApiFp(this.configuration).getHistoricExternalTaskLogsCount(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types `String`, `Number` or `Boolean`.
     * @summary Get External Task Logs (POST)
     * @param {HistoricExternalTaskLogQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricExternalTaskLogApi
     */
    public async queryHistoricExternalTaskLogs(body?: HistoricExternalTaskLogQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricExternalTaskLogDto>>> {
        return HistoricExternalTaskLogApiFp(this.configuration).queryHistoricExternalTaskLogs(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
     * @summary Get External Task Log Count (POST)
     * @param {HistoricExternalTaskLogQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricExternalTaskLogApi
     */
    public async queryHistoricExternalTaskLogsCount(body?: HistoricExternalTaskLogQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricExternalTaskLogApiFp(this.configuration).queryHistoricExternalTaskLogsCount(body, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoricVariableInstanceDto } from '../models';
import { HistoricVariableInstanceQueryDto } from '../models';
/**
 * HistoricVariableInstanceApi - axios parameter creator
 * @export
 */
export const HistoricVariableInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a historic variable instance by id.
         * @summary Delete Variable Instance
         * @param {string} id The id of the variable instance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHistoricVariableInstance: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteHistoricVariableInstance.');
            }
            const localVarPath = `/history/variable-instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a historic variable by id.
         * @summary Get Variable Instance
         * @param {string} id The id of the variable instance.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricVariableInstance: async (id: string, deserializeValues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getHistoricVariableInstance.');
            }
            const localVarPath = `/history/variable-instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deserializeValues !== undefined) {
                localVarQueryParameter['deserializeValues'] = deserializeValues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
         * @summary Get Variable Instance (Binary)
         * @param {string} id The id of the variable instance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricVariableInstanceBinary: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getHistoricVariableInstanceBinary.');
            }
            const localVarPath = `/history/variable-instance/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
         * @summary Get Variable Instances
         * @param {string} [variableName] Filter by variable name.
         * @param {string} [variableNameLike] Restrict to variables with a name like the parameter.
         * @param {any} [variableValue] Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
         * @param {boolean} [variableNamesIgnoreCase] Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableTypeIn] Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
         * @param {boolean} [includeDeleted] Include variables that has already been deleted during the execution.
         * @param {string} [processInstanceId] Filter by the process instance the variable belongs to.
         * @param {string} [processInstanceIdIn] Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [processDefinitionId] Filter by the process definition the variable belongs to.
         * @param {string} [processDefinitionKey] Filter by a key of the process definition the variable belongs to.
         * @param {string} [executionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
         * @param {string} [caseInstanceId] Filter by the case instance the variable belongs to.
         * @param {string} [caseExecutionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
         * @param {string} [caseActivityIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
         * @param {string} [taskIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
         * @param {string} [activityInstanceIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [variableNameIn] Only include historic variable instances which belong to one of the passed and comma-separated variable names.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricVariableInstances: async (variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/variable-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableName !== undefined) {
                localVarQueryParameter['variableName'] = variableName;
            }

            if (variableNameLike !== undefined) {
                localVarQueryParameter['variableNameLike'] = variableNameLike;
            }

            if (variableValue !== undefined) {
                localVarQueryParameter['variableValue'] = variableValue;
            }

            if (variableNamesIgnoreCase !== undefined) {
                localVarQueryParameter['variableNamesIgnoreCase'] = variableNamesIgnoreCase;
            }

            if (variableValuesIgnoreCase !== undefined) {
                localVarQueryParameter['variableValuesIgnoreCase'] = variableValuesIgnoreCase;
            }

            if (variableTypeIn !== undefined) {
                localVarQueryParameter['variableTypeIn'] = variableTypeIn;
            }

            if (includeDeleted !== undefined) {
                localVarQueryParameter['includeDeleted'] = includeDeleted;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processInstanceIdIn !== undefined) {
                localVarQueryParameter['processInstanceIdIn'] = processInstanceIdIn;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (executionIdIn !== undefined) {
                localVarQueryParameter['executionIdIn'] = executionIdIn;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (caseExecutionIdIn !== undefined) {
                localVarQueryParameter['caseExecutionIdIn'] = caseExecutionIdIn;
            }

            if (caseActivityIdIn !== undefined) {
                localVarQueryParameter['caseActivityIdIn'] = caseActivityIdIn;
            }

            if (taskIdIn !== undefined) {
                localVarQueryParameter['taskIdIn'] = taskIdIn;
            }

            if (activityInstanceIdIn !== undefined) {
                localVarQueryParameter['activityInstanceIdIn'] = activityInstanceIdIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (variableNameIn !== undefined) {
                localVarQueryParameter['variableNameIn'] = variableNameIn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (deserializeValues !== undefined) {
                localVarQueryParameter['deserializeValues'] = deserializeValues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method.
         * @summary Get Variable Instance Count
         * @param {string} [variableName] Filter by variable name.
         * @param {string} [variableNameLike] Restrict to variables with a name like the parameter.
         * @param {any} [variableValue] Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
         * @param {boolean} [variableNamesIgnoreCase] Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableTypeIn] Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
         * @param {boolean} [includeDeleted] Include variables that has already been deleted during the execution.
         * @param {string} [processInstanceId] Filter by the process instance the variable belongs to.
         * @param {string} [processInstanceIdIn] Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [processDefinitionId] Filter by the process definition the variable belongs to.
         * @param {string} [processDefinitionKey] Filter by a key of the process definition the variable belongs to.
         * @param {string} [executionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
         * @param {string} [caseInstanceId] Filter by the case instance the variable belongs to.
         * @param {string} [caseExecutionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
         * @param {string} [caseActivityIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
         * @param {string} [taskIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
         * @param {string} [activityInstanceIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [variableNameIn] Only include historic variable instances which belong to one of the passed and comma-separated variable names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricVariableInstancesCount: async (variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/variable-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableName !== undefined) {
                localVarQueryParameter['variableName'] = variableName;
            }

            if (variableNameLike !== undefined) {
                localVarQueryParameter['variableNameLike'] = variableNameLike;
            }

            if (variableValue !== undefined) {
                localVarQueryParameter['variableValue'] = variableValue;
            }

            if (variableNamesIgnoreCase !== undefined) {
                localVarQueryParameter['variableNamesIgnoreCase'] = variableNamesIgnoreCase;
            }

            if (variableValuesIgnoreCase !== undefined) {
                localVarQueryParameter['variableValuesIgnoreCase'] = variableValuesIgnoreCase;
            }

            if (variableTypeIn !== undefined) {
                localVarQueryParameter['variableTypeIn'] = variableTypeIn;
            }

            if (includeDeleted !== undefined) {
                localVarQueryParameter['includeDeleted'] = includeDeleted;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processInstanceIdIn !== undefined) {
                localVarQueryParameter['processInstanceIdIn'] = processInstanceIdIn;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (executionIdIn !== undefined) {
                localVarQueryParameter['executionIdIn'] = executionIdIn;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (caseExecutionIdIn !== undefined) {
                localVarQueryParameter['caseExecutionIdIn'] = caseExecutionIdIn;
            }

            if (caseActivityIdIn !== undefined) {
                localVarQueryParameter['caseActivityIdIn'] = caseActivityIdIn;
            }

            if (taskIdIn !== undefined) {
                localVarQueryParameter['taskIdIn'] = taskIdIn;
            }

            if (activityInstanceIdIn !== undefined) {
                localVarQueryParameter['activityInstanceIdIn'] = activityInstanceIdIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (variableNameIn !== undefined) {
                localVarQueryParameter['variableNameIn'] = variableNameIn;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types `String`, `Number` or `Boolean`.
         * @summary Get Variable Instances (POST)
         * @param {HistoricVariableInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricVariableInstances: async (body?: HistoricVariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/variable-instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (deserializeValues !== undefined) {
                localVarQueryParameter['deserializeValues'] = deserializeValues;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
         * @summary Get Variable Instance Count (POST)
         * @param {HistoricVariableInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricVariableInstancesCount: async (body?: HistoricVariableInstanceQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/variable-instance/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricVariableInstanceApi - functional programming interface
 * @export
 */
export const HistoricVariableInstanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a historic variable instance by id.
         * @summary Delete Variable Instance
         * @param {string} id The id of the variable instance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoricVariableInstance(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await HistoricVariableInstanceApiAxiosParamCreator(configuration).deleteHistoricVariableInstance(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a historic variable by id.
         * @summary Get Variable Instance
         * @param {string} id The id of the variable instance.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricVariableInstance(id: string, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HistoricVariableInstanceDto>>> {
            const localVarAxiosArgs = await HistoricVariableInstanceApiAxiosParamCreator(configuration).getHistoricVariableInstance(id, deserializeValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
         * @summary Get Variable Instance (Binary)
         * @param {string} id The id of the variable instance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricVariableInstanceBinary(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await HistoricVariableInstanceApiAxiosParamCreator(configuration).getHistoricVariableInstanceBinary(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
         * @summary Get Variable Instances
         * @param {string} [variableName] Filter by variable name.
         * @param {string} [variableNameLike] Restrict to variables with a name like the parameter.
         * @param {any} [variableValue] Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
         * @param {boolean} [variableNamesIgnoreCase] Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableTypeIn] Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
         * @param {boolean} [includeDeleted] Include variables that has already been deleted during the execution.
         * @param {string} [processInstanceId] Filter by the process instance the variable belongs to.
         * @param {string} [processInstanceIdIn] Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [processDefinitionId] Filter by the process definition the variable belongs to.
         * @param {string} [processDefinitionKey] Filter by a key of the process definition the variable belongs to.
         * @param {string} [executionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
         * @param {string} [caseInstanceId] Filter by the case instance the variable belongs to.
         * @param {string} [caseExecutionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
         * @param {string} [caseActivityIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
         * @param {string} [taskIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
         * @param {string} [activityInstanceIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [variableNameIn] Only include historic variable instances which belong to one of the passed and comma-separated variable names.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricVariableInstances(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricVariableInstanceDto>>>> {
            const localVarAxiosArgs = await HistoricVariableInstanceApiAxiosParamCreator(configuration).getHistoricVariableInstances(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, variableNameIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method.
         * @summary Get Variable Instance Count
         * @param {string} [variableName] Filter by variable name.
         * @param {string} [variableNameLike] Restrict to variables with a name like the parameter.
         * @param {any} [variableValue] Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
         * @param {boolean} [variableNamesIgnoreCase] Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableTypeIn] Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
         * @param {boolean} [includeDeleted] Include variables that has already been deleted during the execution.
         * @param {string} [processInstanceId] Filter by the process instance the variable belongs to.
         * @param {string} [processInstanceIdIn] Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [processDefinitionId] Filter by the process definition the variable belongs to.
         * @param {string} [processDefinitionKey] Filter by a key of the process definition the variable belongs to.
         * @param {string} [executionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
         * @param {string} [caseInstanceId] Filter by the case instance the variable belongs to.
         * @param {string} [caseExecutionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
         * @param {string} [caseActivityIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
         * @param {string} [taskIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
         * @param {string} [activityInstanceIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [variableNameIn] Only include historic variable instances which belong to one of the passed and comma-separated variable names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricVariableInstancesCount(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricVariableInstanceApiAxiosParamCreator(configuration).getHistoricVariableInstancesCount(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, variableNameIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types `String`, `Number` or `Boolean`.
         * @summary Get Variable Instances (POST)
         * @param {HistoricVariableInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricVariableInstances(body?: HistoricVariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricVariableInstanceDto>>>> {
            const localVarAxiosArgs = await HistoricVariableInstanceApiAxiosParamCreator(configuration).queryHistoricVariableInstances(body, firstResult, maxResults, deserializeValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
         * @summary Get Variable Instance Count (POST)
         * @param {HistoricVariableInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricVariableInstancesCount(body?: HistoricVariableInstanceQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricVariableInstanceApiAxiosParamCreator(configuration).queryHistoricVariableInstancesCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoricVariableInstanceApi - factory interface
 * @export
 */
export const HistoricVariableInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a historic variable instance by id.
         * @summary Delete Variable Instance
         * @param {string} id The id of the variable instance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHistoricVariableInstance(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return HistoricVariableInstanceApiFp(configuration).deleteHistoricVariableInstance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a historic variable by id.
         * @summary Get Variable Instance
         * @param {string} id The id of the variable instance.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricVariableInstance(id: string, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<HistoricVariableInstanceDto>> {
            return HistoricVariableInstanceApiFp(configuration).getHistoricVariableInstance(id, deserializeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
         * @summary Get Variable Instance (Binary)
         * @param {string} id The id of the variable instance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricVariableInstanceBinary(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return HistoricVariableInstanceApiFp(configuration).getHistoricVariableInstanceBinary(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
         * @summary Get Variable Instances
         * @param {string} [variableName] Filter by variable name.
         * @param {string} [variableNameLike] Restrict to variables with a name like the parameter.
         * @param {any} [variableValue] Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
         * @param {boolean} [variableNamesIgnoreCase] Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableTypeIn] Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
         * @param {boolean} [includeDeleted] Include variables that has already been deleted during the execution.
         * @param {string} [processInstanceId] Filter by the process instance the variable belongs to.
         * @param {string} [processInstanceIdIn] Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [processDefinitionId] Filter by the process definition the variable belongs to.
         * @param {string} [processDefinitionKey] Filter by a key of the process definition the variable belongs to.
         * @param {string} [executionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
         * @param {string} [caseInstanceId] Filter by the case instance the variable belongs to.
         * @param {string} [caseExecutionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
         * @param {string} [caseActivityIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
         * @param {string} [taskIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
         * @param {string} [activityInstanceIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [variableNameIn] Only include historic variable instances which belong to one of the passed and comma-separated variable names.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricVariableInstances(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricVariableInstanceDto>>> {
            return HistoricVariableInstanceApiFp(configuration).getHistoricVariableInstances(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, variableNameIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method.
         * @summary Get Variable Instance Count
         * @param {string} [variableName] Filter by variable name.
         * @param {string} [variableNameLike] Restrict to variables with a name like the parameter.
         * @param {any} [variableValue] Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
         * @param {boolean} [variableNamesIgnoreCase] Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
         * @param {boolean} [variableValuesIgnoreCase] Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
         * @param {string} [variableTypeIn] Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
         * @param {boolean} [includeDeleted] Include variables that has already been deleted during the execution.
         * @param {string} [processInstanceId] Filter by the process instance the variable belongs to.
         * @param {string} [processInstanceIdIn] Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
         * @param {string} [processDefinitionId] Filter by the process definition the variable belongs to.
         * @param {string} [processDefinitionKey] Filter by a key of the process definition the variable belongs to.
         * @param {string} [executionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
         * @param {string} [caseInstanceId] Filter by the case instance the variable belongs to.
         * @param {string} [caseExecutionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
         * @param {string} [caseActivityIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
         * @param {string} [taskIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
         * @param {string} [activityInstanceIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
         * @param {string} [tenantIdIn] Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [variableNameIn] Only include historic variable instances which belong to one of the passed and comma-separated variable names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricVariableInstancesCount(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricVariableInstanceApiFp(configuration).getHistoricVariableInstancesCount(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, variableNameIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types `String`, `Number` or `Boolean`.
         * @summary Get Variable Instances (POST)
         * @param {HistoricVariableInstanceQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricVariableInstances(body?: HistoricVariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricVariableInstanceDto>>> {
            return HistoricVariableInstanceApiFp(configuration).queryHistoricVariableInstances(body, firstResult, maxResults, deserializeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
         * @summary Get Variable Instance Count (POST)
         * @param {HistoricVariableInstanceQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricVariableInstancesCount(body?: HistoricVariableInstanceQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricVariableInstanceApiFp(configuration).queryHistoricVariableInstancesCount(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricVariableInstanceApi - object-oriented interface
 * @export
 * @class HistoricVariableInstanceApi
 * @extends {BaseAPI}
 */
export class HistoricVariableInstanceApi extends BaseAPI {
    /**
     * Deletes a historic variable instance by id.
     * @summary Delete Variable Instance
     * @param {string} id The id of the variable instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricVariableInstanceApi
     */
    public async deleteHistoricVariableInstance(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return HistoricVariableInstanceApiFp(this.configuration).deleteHistoricVariableInstance(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a historic variable by id.
     * @summary Get Variable Instance
     * @param {string} id The id of the variable instance.
     * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricVariableInstanceApi
     */
    public async getHistoricVariableInstance(id: string, deserializeValues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<HistoricVariableInstanceDto>> {
        return HistoricVariableInstanceApiFp(this.configuration).getHistoricVariableInstance(id, deserializeValues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
     * @summary Get Variable Instance (Binary)
     * @param {string} id The id of the variable instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricVariableInstanceApi
     */
    public async getHistoricVariableInstanceBinary(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return HistoricVariableInstanceApiFp(this.configuration).getHistoricVariableInstanceBinary(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
     * @summary Get Variable Instances
     * @param {string} [variableName] Filter by variable name.
     * @param {string} [variableNameLike] Restrict to variables with a name like the parameter.
     * @param {any} [variableValue] Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
     * @param {boolean} [variableNamesIgnoreCase] Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param {boolean} [variableValuesIgnoreCase] Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param {string} [variableTypeIn] Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
     * @param {boolean} [includeDeleted] Include variables that has already been deleted during the execution.
     * @param {string} [processInstanceId] Filter by the process instance the variable belongs to.
     * @param {string} [processInstanceIdIn] Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
     * @param {string} [processDefinitionId] Filter by the process definition the variable belongs to.
     * @param {string} [processDefinitionKey] Filter by a key of the process definition the variable belongs to.
     * @param {string} [executionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
     * @param {string} [caseInstanceId] Filter by the case instance the variable belongs to.
     * @param {string} [caseExecutionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
     * @param {string} [caseActivityIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
     * @param {string} [taskIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
     * @param {string} [activityInstanceIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
     * @param {string} [tenantIdIn] Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [variableNameIn] Only include historic variable instances which belong to one of the passed and comma-separated variable names.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricVariableInstanceApi
     */
    public async getHistoricVariableInstances(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricVariableInstanceDto>>> {
        return HistoricVariableInstanceApiFp(this.configuration).getHistoricVariableInstances(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, variableNameIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method.
     * @summary Get Variable Instance Count
     * @param {string} [variableName] Filter by variable name.
     * @param {string} [variableNameLike] Restrict to variables with a name like the parameter.
     * @param {any} [variableValue] Filter by variable value. Is treated as a &#x60;String&#x60; object on server side.
     * @param {boolean} [variableNamesIgnoreCase] Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param {boolean} [variableValuesIgnoreCase] Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param {string} [variableTypeIn] Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;.
     * @param {boolean} [includeDeleted] Include variables that has already been deleted during the execution.
     * @param {string} [processInstanceId] Filter by the process instance the variable belongs to.
     * @param {string} [processInstanceIdIn] Only include historic variable instances which belong to one of the passed and comma-separated process instance ids.
     * @param {string} [processDefinitionId] Filter by the process definition the variable belongs to.
     * @param {string} [processDefinitionKey] Filter by a key of the process definition the variable belongs to.
     * @param {string} [executionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated execution ids.
     * @param {string} [caseInstanceId] Filter by the case instance the variable belongs to.
     * @param {string} [caseExecutionIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids.
     * @param {string} [caseActivityIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids.
     * @param {string} [taskIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated task ids.
     * @param {string} [activityInstanceIdIn] Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids.
     * @param {string} [tenantIdIn] Only include historic variable instances which belong to one of the passed and comma- separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [variableNameIn] Only include historic variable instances which belong to one of the passed and comma-separated variable names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricVariableInstanceApi
     */
    public async getHistoricVariableInstancesCount(variableName?: string, variableNameLike?: string, variableValue?: any, variableNamesIgnoreCase?: boolean, variableValuesIgnoreCase?: boolean, variableTypeIn?: string, includeDeleted?: boolean, processInstanceId?: string, processInstanceIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, executionIdIn?: string, caseInstanceId?: string, caseExecutionIdIn?: string, caseActivityIdIn?: string, taskIdIn?: string, activityInstanceIdIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, variableNameIn?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricVariableInstanceApiFp(this.configuration).getHistoricVariableInstancesCount(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, variableNameIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types `String`, `Number` or `Boolean`.
     * @summary Get Variable Instances (POST)
     * @param {HistoricVariableInstanceQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricVariableInstanceApi
     */
    public async queryHistoricVariableInstances(body?: HistoricVariableInstanceQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricVariableInstanceDto>>> {
        return HistoricVariableInstanceApiFp(this.configuration).queryHistoricVariableInstances(body, firstResult, maxResults, deserializeValues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
     * @summary Get Variable Instance Count (POST)
     * @param {HistoricVariableInstanceQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricVariableInstanceApi
     */
    public async queryHistoricVariableInstancesCount(body?: HistoricVariableInstanceQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricVariableInstanceApiFp(this.configuration).queryHistoricVariableInstancesCount(body, options).then((request) => request(this.axios, this.basePath));
    }
}

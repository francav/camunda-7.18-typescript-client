/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoricIncidentDto } from '../models';
/**
 * HistoricIncidentApi - axios parameter creator
 * @export
 */
export const HistoricIncidentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query-count/) method.
         * @summary Get Incidents
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKey] Restricts to incidents that have the given processDefinitionKey.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that have one of the given process definition keys.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [createTimeBefore] Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [createTimeAfter] Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeBefore] Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeAfter] Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [historyConfiguration] Restricts to incidents that have the given parameter set as history configuration.
         * @param {boolean} [open] Restricts to incidents that are open.
         * @param {boolean} [resolved] Restricts to incidents that are resolved.
         * @param {boolean} [deleted] Restricts to incidents that are deleted.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricIncidents: async (incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, createTimeBefore?: Date, createTimeAfter?: Date, endTimeBefore?: Date, endTimeAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, historyConfiguration?: string, open?: boolean, resolved?: boolean, deleted?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/incident`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (incidentId !== undefined) {
                localVarQueryParameter['incidentId'] = incidentId;
            }

            if (incidentType !== undefined) {
                localVarQueryParameter['incidentType'] = incidentType;
            }

            if (incidentMessage !== undefined) {
                localVarQueryParameter['incidentMessage'] = incidentMessage;
            }

            if (incidentMessageLike !== undefined) {
                localVarQueryParameter['incidentMessageLike'] = incidentMessageLike;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (createTimeBefore !== undefined) {
                localVarQueryParameter['createTimeBefore'] = (createTimeBefore as any instanceof Date) ?
                    (createTimeBefore as any).toISOString() :
                    createTimeBefore;
            }

            if (createTimeAfter !== undefined) {
                localVarQueryParameter['createTimeAfter'] = (createTimeAfter as any instanceof Date) ?
                    (createTimeAfter as any).toISOString() :
                    createTimeAfter;
            }

            if (endTimeBefore !== undefined) {
                localVarQueryParameter['endTimeBefore'] = (endTimeBefore as any instanceof Date) ?
                    (endTimeBefore as any).toISOString() :
                    endTimeBefore;
            }

            if (endTimeAfter !== undefined) {
                localVarQueryParameter['endTimeAfter'] = (endTimeAfter as any instanceof Date) ?
                    (endTimeAfter as any).toISOString() :
                    endTimeAfter;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (failedActivityId !== undefined) {
                localVarQueryParameter['failedActivityId'] = failedActivityId;
            }

            if (causeIncidentId !== undefined) {
                localVarQueryParameter['causeIncidentId'] = causeIncidentId;
            }

            if (rootCauseIncidentId !== undefined) {
                localVarQueryParameter['rootCauseIncidentId'] = rootCauseIncidentId;
            }

            if (configuration !== undefined) {
                localVarQueryParameter['configuration'] = configuration;
            }

            if (historyConfiguration !== undefined) {
                localVarQueryParameter['historyConfiguration'] = historyConfiguration;
            }

            if (open !== undefined) {
                localVarQueryParameter['open'] = open;
            }

            if (resolved !== undefined) {
                localVarQueryParameter['resolved'] = resolved;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (jobDefinitionIdIn !== undefined) {
                localVarQueryParameter['jobDefinitionIdIn'] = jobDefinitionIdIn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query/) method.
         * @summary Get Incident Count
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKey] Restricts to incidents that have the given processDefinitionKey.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that have one of the given process definition keys.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [createTimeBefore] Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [createTimeAfter] Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeBefore] Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeAfter] Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [historyConfiguration] Restricts to incidents that have the given parameter set as history configuration.
         * @param {boolean} [open] Restricts to incidents that are open.
         * @param {boolean} [resolved] Restricts to incidents that are resolved.
         * @param {boolean} [deleted] Restricts to incidents that are deleted.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricIncidentsCount: async (incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, createTimeBefore?: Date, createTimeAfter?: Date, endTimeBefore?: Date, endTimeAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, historyConfiguration?: string, open?: boolean, resolved?: boolean, deleted?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/incident/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (incidentId !== undefined) {
                localVarQueryParameter['incidentId'] = incidentId;
            }

            if (incidentType !== undefined) {
                localVarQueryParameter['incidentType'] = incidentType;
            }

            if (incidentMessage !== undefined) {
                localVarQueryParameter['incidentMessage'] = incidentMessage;
            }

            if (incidentMessageLike !== undefined) {
                localVarQueryParameter['incidentMessageLike'] = incidentMessageLike;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (processDefinitionKeyIn !== undefined) {
                localVarQueryParameter['processDefinitionKeyIn'] = processDefinitionKeyIn;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (createTimeBefore !== undefined) {
                localVarQueryParameter['createTimeBefore'] = (createTimeBefore as any instanceof Date) ?
                    (createTimeBefore as any).toISOString() :
                    createTimeBefore;
            }

            if (createTimeAfter !== undefined) {
                localVarQueryParameter['createTimeAfter'] = (createTimeAfter as any instanceof Date) ?
                    (createTimeAfter as any).toISOString() :
                    createTimeAfter;
            }

            if (endTimeBefore !== undefined) {
                localVarQueryParameter['endTimeBefore'] = (endTimeBefore as any instanceof Date) ?
                    (endTimeBefore as any).toISOString() :
                    endTimeBefore;
            }

            if (endTimeAfter !== undefined) {
                localVarQueryParameter['endTimeAfter'] = (endTimeAfter as any instanceof Date) ?
                    (endTimeAfter as any).toISOString() :
                    endTimeAfter;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (failedActivityId !== undefined) {
                localVarQueryParameter['failedActivityId'] = failedActivityId;
            }

            if (causeIncidentId !== undefined) {
                localVarQueryParameter['causeIncidentId'] = causeIncidentId;
            }

            if (rootCauseIncidentId !== undefined) {
                localVarQueryParameter['rootCauseIncidentId'] = rootCauseIncidentId;
            }

            if (configuration !== undefined) {
                localVarQueryParameter['configuration'] = configuration;
            }

            if (historyConfiguration !== undefined) {
                localVarQueryParameter['historyConfiguration'] = historyConfiguration;
            }

            if (open !== undefined) {
                localVarQueryParameter['open'] = open;
            }

            if (resolved !== undefined) {
                localVarQueryParameter['resolved'] = resolved;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (jobDefinitionIdIn !== undefined) {
                localVarQueryParameter['jobDefinitionIdIn'] = jobDefinitionIdIn;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricIncidentApi - functional programming interface
 * @export
 */
export const HistoricIncidentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query-count/) method.
         * @summary Get Incidents
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKey] Restricts to incidents that have the given processDefinitionKey.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that have one of the given process definition keys.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [createTimeBefore] Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [createTimeAfter] Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeBefore] Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeAfter] Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [historyConfiguration] Restricts to incidents that have the given parameter set as history configuration.
         * @param {boolean} [open] Restricts to incidents that are open.
         * @param {boolean} [resolved] Restricts to incidents that are resolved.
         * @param {boolean} [deleted] Restricts to incidents that are deleted.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, createTimeBefore?: Date, createTimeAfter?: Date, endTimeBefore?: Date, endTimeAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, historyConfiguration?: string, open?: boolean, resolved?: boolean, deleted?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricIncidentDto>>>> {
            const localVarAxiosArgs = await HistoricIncidentApiAxiosParamCreator(configuration).getHistoricIncidents(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query/) method.
         * @summary Get Incident Count
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKey] Restricts to incidents that have the given processDefinitionKey.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that have one of the given process definition keys.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [createTimeBefore] Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [createTimeAfter] Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeBefore] Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeAfter] Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [historyConfiguration] Restricts to incidents that have the given parameter set as history configuration.
         * @param {boolean} [open] Restricts to incidents that are open.
         * @param {boolean} [resolved] Restricts to incidents that are resolved.
         * @param {boolean} [deleted] Restricts to incidents that are deleted.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, createTimeBefore?: Date, createTimeAfter?: Date, endTimeBefore?: Date, endTimeAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, historyConfiguration?: string, open?: boolean, resolved?: boolean, deleted?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricIncidentApiAxiosParamCreator(configuration).getHistoricIncidentsCount(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoricIncidentApi - factory interface
 * @export
 */
export const HistoricIncidentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query-count/) method.
         * @summary Get Incidents
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKey] Restricts to incidents that have the given processDefinitionKey.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that have one of the given process definition keys.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [createTimeBefore] Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [createTimeAfter] Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeBefore] Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeAfter] Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [historyConfiguration] Restricts to incidents that have the given parameter set as history configuration.
         * @param {boolean} [open] Restricts to incidents that are open.
         * @param {boolean} [resolved] Restricts to incidents that are resolved.
         * @param {boolean} [deleted] Restricts to incidents that are deleted.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, createTimeBefore?: Date, createTimeAfter?: Date, endTimeBefore?: Date, endTimeAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, historyConfiguration?: string, open?: boolean, resolved?: boolean, deleted?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricIncidentDto>>> {
            return HistoricIncidentApiFp(configuration).getHistoricIncidents(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query/) method.
         * @summary Get Incident Count
         * @param {string} [incidentId] Restricts to incidents that have the given id.
         * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
         * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
         * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
         * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
         * @param {string} [processDefinitionKey] Restricts to incidents that have the given processDefinitionKey.
         * @param {string} [processDefinitionKeyIn] Restricts to incidents that have one of the given process definition keys.
         * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
         * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
         * @param {Date} [createTimeBefore] Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [createTimeAfter] Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeBefore] Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {Date} [endTimeAfter] Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
         * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
         * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
         * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
         * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
         * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
         * @param {string} [historyConfiguration] Restricts to incidents that have the given parameter set as history configuration.
         * @param {boolean} [open] Restricts to incidents that are open.
         * @param {boolean} [resolved] Restricts to incidents that are resolved.
         * @param {boolean} [deleted] Restricts to incidents that are deleted.
         * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, createTimeBefore?: Date, createTimeAfter?: Date, endTimeBefore?: Date, endTimeAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, historyConfiguration?: string, open?: boolean, resolved?: boolean, deleted?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricIncidentApiFp(configuration).getHistoricIncidentsCount(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricIncidentApi - object-oriented interface
 * @export
 * @class HistoricIncidentApi
 * @extends {BaseAPI}
 */
export class HistoricIncidentApi extends BaseAPI {
    /**
     * Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query-count/) method.
     * @summary Get Incidents
     * @param {string} [incidentId] Restricts to incidents that have the given id.
     * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
     * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
     * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
     * @param {string} [processDefinitionKey] Restricts to incidents that have the given processDefinitionKey.
     * @param {string} [processDefinitionKeyIn] Restricts to incidents that have one of the given process definition keys.
     * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
     * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
     * @param {Date} [createTimeBefore] Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [createTimeAfter] Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [endTimeBefore] Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [endTimeAfter] Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
     * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
     * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
     * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
     * @param {string} [historyConfiguration] Restricts to incidents that have the given parameter set as history configuration.
     * @param {boolean} [open] Restricts to incidents that are open.
     * @param {boolean} [resolved] Restricts to incidents that are resolved.
     * @param {boolean} [deleted] Restricts to incidents that are deleted.
     * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricIncidentApi
     */
    public async getHistoricIncidents(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, createTimeBefore?: Date, createTimeAfter?: Date, endTimeBefore?: Date, endTimeAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, historyConfiguration?: string, open?: boolean, resolved?: boolean, deleted?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricIncidentDto>>> {
        return HistoricIncidentApiFp(this.configuration).getHistoricIncidents(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.18/reference/rest/history/incident/get-incident-query/) method.
     * @summary Get Incident Count
     * @param {string} [incidentId] Restricts to incidents that have the given id.
     * @param {string} [incidentType] Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {string} [incidentMessage] Restricts to incidents that have the given incident message.
     * @param {string} [incidentMessageLike] Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
     * @param {string} [processDefinitionId] Restricts to incidents that belong to a process definition with the given id.
     * @param {string} [processDefinitionKey] Restricts to incidents that have the given processDefinitionKey.
     * @param {string} [processDefinitionKeyIn] Restricts to incidents that have one of the given process definition keys.
     * @param {string} [processInstanceId] Restricts to incidents that belong to a process instance with the given id.
     * @param {string} [executionId] Restricts to incidents that belong to an execution with the given id.
     * @param {Date} [createTimeBefore] Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [createTimeAfter] Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [endTimeBefore] Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} [endTimeAfter] Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {string} [activityId] Restricts to incidents that belong to an activity with the given id.
     * @param {string} [failedActivityId] Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param {string} [causeIncidentId] Restricts to incidents that have the given incident id as cause incident.
     * @param {string} [rootCauseIncidentId] Restricts to incidents that have the given incident id as root cause incident.
     * @param {string} [configuration] Restricts to incidents that have the given parameter set as configuration.
     * @param {string} [historyConfiguration] Restricts to incidents that have the given parameter set as history configuration.
     * @param {boolean} [open] Restricts to incidents that are open.
     * @param {boolean} [resolved] Restricts to incidents that are resolved.
     * @param {boolean} [deleted] Restricts to incidents that are deleted.
     * @param {string} [tenantIdIn] Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [jobDefinitionIdIn] Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricIncidentApi
     */
    public async getHistoricIncidentsCount(incidentId?: string, incidentType?: string, incidentMessage?: string, incidentMessageLike?: string, processDefinitionId?: string, processDefinitionKey?: string, processDefinitionKeyIn?: string, processInstanceId?: string, executionId?: string, createTimeBefore?: Date, createTimeAfter?: Date, endTimeBefore?: Date, endTimeAfter?: Date, activityId?: string, failedActivityId?: string, causeIncidentId?: string, rootCauseIncidentId?: string, configuration?: string, historyConfiguration?: string, open?: boolean, resolved?: boolean, deleted?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, jobDefinitionIdIn?: string, sortBy?: string, sortOrder?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricIncidentApiFp(this.configuration).getHistoricIncidentsCount(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }
}

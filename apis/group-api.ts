/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { GroupDto } from '../models';
import { GroupQueryDto } from '../models';
import { ResourceOptionsDto } from '../models';
/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The `/group` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group/{id}` resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Group Resource Instance Options
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableGroupInstanceOperations: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling availableGroupInstanceOperations.');
            }
            const localVarPath = `/group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Group Membership Resource Options
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableGroupMembersOperations: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling availableGroupMembersOperations.');
            }
            const localVarPath = `/group/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/group` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Group Resource Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableGroupOperations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new group.
         * @summary Create Group
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (body?: GroupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a member to a group.
         * @summary Create Group Member
         * @param {string} id The id of the group.
         * @param {string} userId The id of user to add to the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupMember: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createGroupMember.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling createGroupMember.');
            }
            const localVarPath = `/group/{id}/members/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a group by id.
         * @summary Delete Group
         * @param {string} id The id of the group to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteGroup.');
            }
            const localVarPath = `/group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a member from a group.
         * @summary Delete a Group Member
         * @param {string} id The id of the group.
         * @param {string} userId The id of user to remove from the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupMember: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteGroupMember.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteGroupMember.');
            }
            const localVarPath = `/group/{id}/members/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group by id.
         * @summary Get Group
         * @param {string} id The id of the group to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGroup.');
            }
            const localVarPath = `/group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for groups using a list of parameters and retrieves the count.
         * @summary Get List Count
         * @param {string} [id] Filter by the id of the group.
         * @param {string} [idIn] Filter by a comma seperated list of group ids.
         * @param {string} [name] Filter by the name of the group.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [type] Filter by the type of the group.
         * @param {string} [member] Only retrieve groups where the given user id is a member of.
         * @param {string} [memberOfTenant] Only retrieve groups which are members of the given tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupCount: async (id?: string, idIn?: string, name?: string, nameLike?: string, type?: string, member?: string, memberOfTenant?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (idIn !== undefined) {
                localVarQueryParameter['idIn'] = idIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberOfTenant !== undefined) {
                localVarQueryParameter['memberOfTenant'] = memberOfTenant;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count](https://docs.camunda.org/manual/7.18/reference/rest/group/get-query-count) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [id] Filter by the id of the group.
         * @param {string} [idIn] Filter by a comma seperated list of group ids.
         * @param {string} [name] Filter by the name of the group.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [type] Filter by the type of the group.
         * @param {string} [member] Only retrieve groups where the given user id is a member of.
         * @param {string} [memberOfTenant] Only retrieve groups which are members of the given tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryGroups: async (sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, id?: string, idIn?: string, name?: string, nameLike?: string, type?: string, member?: string, memberOfTenant?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (idIn !== undefined) {
                localVarQueryParameter['idIn'] = idIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameLike !== undefined) {
                localVarQueryParameter['nameLike'] = nameLike;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberOfTenant !== undefined) {
                localVarQueryParameter['memberOfTenant'] = memberOfTenant;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count (POST)](https://docs.camunda.org/manual/7.18/reference/rest/group/post-query-count/) method.
         * @summary Get List (POST)
         * @param {GroupQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQueryGroups: async (body?: GroupQueryDto, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for groups using a list of parameters and retrieves the count.
         * @summary Get List Count (POST)
         * @param {GroupQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryGroupCount: async (body?: GroupQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a given group by id.
         * @summary Update Group
         * @param {string} id The id of the group.
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (id: string, body?: GroupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateGroup.');
            }
            const localVarPath = `/group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The `/group` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group/{id}` resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Group Resource Instance Options
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableGroupInstanceOperations(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResourceOptionsDto>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).availableGroupInstanceOperations(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Group Membership Resource Options
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableGroupMembersOperations(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResourceOptionsDto>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).availableGroupMembersOperations(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The `/group` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Group Resource Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableGroupOperations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResourceOptionsDto>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).availableGroupOperations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new group.
         * @summary Create Group
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(body?: GroupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).createGroup(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a member to a group.
         * @summary Create Group Member
         * @param {string} id The id of the group.
         * @param {string} userId The id of user to add to the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupMember(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).createGroupMember(id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a group by id.
         * @summary Delete Group
         * @param {string} id The id of the group to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).deleteGroup(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Removes a member from a group.
         * @summary Delete a Group Member
         * @param {string} id The id of the group.
         * @param {string} userId The id of user to remove from the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupMember(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).deleteGroupMember(id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a group by id.
         * @summary Get Group
         * @param {string} id The id of the group to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupDto>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).getGroup(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for groups using a list of parameters and retrieves the count.
         * @summary Get List Count
         * @param {string} [id] Filter by the id of the group.
         * @param {string} [idIn] Filter by a comma seperated list of group ids.
         * @param {string} [name] Filter by the name of the group.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [type] Filter by the type of the group.
         * @param {string} [member] Only retrieve groups where the given user id is a member of.
         * @param {string} [memberOfTenant] Only retrieve groups which are members of the given tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupCount(id?: string, idIn?: string, name?: string, nameLike?: string, type?: string, member?: string, memberOfTenant?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).getGroupCount(id, idIn, name, nameLike, type, member, memberOfTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count](https://docs.camunda.org/manual/7.18/reference/rest/group/get-query-count) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [id] Filter by the id of the group.
         * @param {string} [idIn] Filter by a comma seperated list of group ids.
         * @param {string} [name] Filter by the name of the group.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [type] Filter by the type of the group.
         * @param {string} [member] Only retrieve groups where the given user id is a member of.
         * @param {string} [memberOfTenant] Only retrieve groups which are members of the given tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryGroups(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, id?: string, idIn?: string, name?: string, nameLike?: string, type?: string, member?: string, memberOfTenant?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupDto>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).getQueryGroups(sortBy, sortOrder, firstResult, maxResults, id, idIn, name, nameLike, type, member, memberOfTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count (POST)](https://docs.camunda.org/manual/7.18/reference/rest/group/post-query-count/) method.
         * @summary Get List (POST)
         * @param {GroupQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postQueryGroups(body?: GroupQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupDto>>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).postQueryGroups(body, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for groups using a list of parameters and retrieves the count.
         * @summary Get List Count (POST)
         * @param {GroupQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryGroupCount(body?: GroupQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).queryGroupCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a given group by id.
         * @summary Update Group
         * @param {string} id The id of the group.
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(id: string, body?: GroupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).updateGroup(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * The `/group` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group/{id}` resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Group Resource Instance Options
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableGroupInstanceOperations(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResourceOptionsDto>> {
            return GroupApiFp(configuration).availableGroupInstanceOperations(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Group Membership Resource Options
         * @param {string} id The id of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableGroupMembersOperations(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResourceOptionsDto>> {
            return GroupApiFp(configuration).availableGroupMembersOperations(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/group` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
         * @summary Group Resource Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableGroupOperations(options?: AxiosRequestConfig): Promise<AxiosResponse<ResourceOptionsDto>> {
            return GroupApiFp(configuration).availableGroupOperations(options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new group.
         * @summary Create Group
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(body?: GroupDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GroupApiFp(configuration).createGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a member to a group.
         * @summary Create Group Member
         * @param {string} id The id of the group.
         * @param {string} userId The id of user to add to the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupMember(id: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GroupApiFp(configuration).createGroupMember(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a group by id.
         * @summary Delete Group
         * @param {string} id The id of the group to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GroupApiFp(configuration).deleteGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a member from a group.
         * @summary Delete a Group Member
         * @param {string} id The id of the group.
         * @param {string} userId The id of user to remove from the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupMember(id: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GroupApiFp(configuration).deleteGroupMember(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a group by id.
         * @summary Get Group
         * @param {string} id The id of the group to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupDto>> {
            return GroupApiFp(configuration).getGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for groups using a list of parameters and retrieves the count.
         * @summary Get List Count
         * @param {string} [id] Filter by the id of the group.
         * @param {string} [idIn] Filter by a comma seperated list of group ids.
         * @param {string} [name] Filter by the name of the group.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [type] Filter by the type of the group.
         * @param {string} [member] Only retrieve groups where the given user id is a member of.
         * @param {string} [memberOfTenant] Only retrieve groups which are members of the given tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupCount(id?: string, idIn?: string, name?: string, nameLike?: string, type?: string, member?: string, memberOfTenant?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return GroupApiFp(configuration).getGroupCount(id, idIn, name, nameLike, type, member, memberOfTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count](https://docs.camunda.org/manual/7.18/reference/rest/group/get-query-count) method.
         * @summary Get List
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {string} [id] Filter by the id of the group.
         * @param {string} [idIn] Filter by a comma seperated list of group ids.
         * @param {string} [name] Filter by the name of the group.
         * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
         * @param {string} [type] Filter by the type of the group.
         * @param {string} [member] Only retrieve groups where the given user id is a member of.
         * @param {string} [memberOfTenant] Only retrieve groups which are members of the given tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryGroups(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, id?: string, idIn?: string, name?: string, nameLike?: string, type?: string, member?: string, memberOfTenant?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupDto>>> {
            return GroupApiFp(configuration).getQueryGroups(sortBy, sortOrder, firstResult, maxResults, id, idIn, name, nameLike, type, member, memberOfTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count (POST)](https://docs.camunda.org/manual/7.18/reference/rest/group/post-query-count/) method.
         * @summary Get List (POST)
         * @param {GroupQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postQueryGroups(body?: GroupQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupDto>>> {
            return GroupApiFp(configuration).postQueryGroups(body, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for groups using a list of parameters and retrieves the count.
         * @summary Get List Count (POST)
         * @param {GroupQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryGroupCount(body?: GroupQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return GroupApiFp(configuration).queryGroupCount(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a given group by id.
         * @summary Update Group
         * @param {string} id The id of the group.
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(id: string, body?: GroupDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GroupApiFp(configuration).updateGroup(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * The `/group` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group/{id}` resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @summary Group Resource Instance Options
     * @param {string} id The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async availableGroupInstanceOperations(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResourceOptionsDto>> {
        return GroupApiFp(this.configuration).availableGroupInstanceOperations(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @summary Group Membership Resource Options
     * @param {string} id The id of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async availableGroupMembersOperations(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResourceOptionsDto>> {
        return GroupApiFp(this.configuration).availableGroupMembersOperations(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The `/group` resource supports two custom OPTIONS requests, this one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the `/group` resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @summary Group Resource Options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async availableGroupOperations(options?: AxiosRequestConfig) : Promise<AxiosResponse<ResourceOptionsDto>> {
        return GroupApiFp(this.configuration).availableGroupOperations(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new group.
     * @summary Create Group
     * @param {GroupDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async createGroup(body?: GroupDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GroupApiFp(this.configuration).createGroup(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a member to a group.
     * @summary Create Group Member
     * @param {string} id The id of the group.
     * @param {string} userId The id of user to add to the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async createGroupMember(id: string, userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GroupApiFp(this.configuration).createGroupMember(id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a group by id.
     * @summary Delete Group
     * @param {string} id The id of the group to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async deleteGroup(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GroupApiFp(this.configuration).deleteGroup(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes a member from a group.
     * @summary Delete a Group Member
     * @param {string} id The id of the group.
     * @param {string} userId The id of user to remove from the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async deleteGroupMember(id: string, userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GroupApiFp(this.configuration).deleteGroupMember(id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a group by id.
     * @summary Get Group
     * @param {string} id The id of the group to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async getGroup(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupDto>> {
        return GroupApiFp(this.configuration).getGroup(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for groups using a list of parameters and retrieves the count.
     * @summary Get List Count
     * @param {string} [id] Filter by the id of the group.
     * @param {string} [idIn] Filter by a comma seperated list of group ids.
     * @param {string} [name] Filter by the name of the group.
     * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
     * @param {string} [type] Filter by the type of the group.
     * @param {string} [member] Only retrieve groups where the given user id is a member of.
     * @param {string} [memberOfTenant] Only retrieve groups which are members of the given tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async getGroupCount(id?: string, idIn?: string, name?: string, nameLike?: string, type?: string, member?: string, memberOfTenant?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return GroupApiFp(this.configuration).getGroupCount(id, idIn, name, nameLike, type, member, memberOfTenant, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count](https://docs.camunda.org/manual/7.18/reference/rest/group/get-query-count) method.
     * @summary Get List
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {string} [id] Filter by the id of the group.
     * @param {string} [idIn] Filter by a comma seperated list of group ids.
     * @param {string} [name] Filter by the name of the group.
     * @param {string} [nameLike] Filter by the name that the parameter is a substring of.
     * @param {string} [type] Filter by the type of the group.
     * @param {string} [member] Only retrieve groups where the given user id is a member of.
     * @param {string} [memberOfTenant] Only retrieve groups which are members of the given tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async getQueryGroups(sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, id?: string, idIn?: string, name?: string, nameLike?: string, type?: string, member?: string, memberOfTenant?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupDto>>> {
        return GroupApiFp(this.configuration).getQueryGroups(sortBy, sortOrder, firstResult, maxResults, id, idIn, name, nameLike, type, member, memberOfTenant, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the [Get Group Count (POST)](https://docs.camunda.org/manual/7.18/reference/rest/group/post-query-count/) method.
     * @summary Get List (POST)
     * @param {GroupQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async postQueryGroups(body?: GroupQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupDto>>> {
        return GroupApiFp(this.configuration).postQueryGroups(body, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for groups using a list of parameters and retrieves the count.
     * @summary Get List Count (POST)
     * @param {GroupQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async queryGroupCount(body?: GroupQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return GroupApiFp(this.configuration).queryGroupCount(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a given group by id.
     * @summary Update Group
     * @param {string} id The id of the group.
     * @param {GroupDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async updateGroup(id: string, body?: GroupDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GroupApiFp(this.configuration).updateGroup(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}

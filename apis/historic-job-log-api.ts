/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoricJobLogDto } from '../models';
import { HistoricJobLogQueryDto } from '../models';
/**
 * HistoricJobLogApi - axios parameter creator
 * @export
 */
export const HistoricJobLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a historic job log by id.
         * @summary Get Job Log
         * @param {string} id The id of the log entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricJobLog: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getHistoricJobLog.');
            }
            const localVarPath = `/history/job-log/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query-count/) method.
         * @summary Get Job Logs
         * @param {string} [logId] Filter by historic job log id.
         * @param {string} [jobId] Filter by job id.
         * @param {string} [jobExceptionMessage] Filter by job exception message.
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [jobDefinitionType] Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
         * @param {string} [jobDefinitionConfiguration] Filter by job definition configuration.
         * @param {string} [activityIdIn] Only include historic job logs which belong to one of the passed activity ids.
         * @param {string} [failedActivityIdIn] Only include historic job logs which belong to failures of one of the passed activity ids.
         * @param {string} [executionIdIn] Only include historic job logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [deploymentId] Filter by deployment id.
         * @param {string} [tenantIdIn] Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [hostname] Filter by hostname.
         * @param {number} [jobPriorityLowerThanOrEquals] Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [jobPriorityHigherThanOrEquals] Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricJobLogs: async (logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/job-log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (logId !== undefined) {
                localVarQueryParameter['logId'] = logId;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }

            if (jobExceptionMessage !== undefined) {
                localVarQueryParameter['jobExceptionMessage'] = jobExceptionMessage;
            }

            if (jobDefinitionId !== undefined) {
                localVarQueryParameter['jobDefinitionId'] = jobDefinitionId;
            }

            if (jobDefinitionType !== undefined) {
                localVarQueryParameter['jobDefinitionType'] = jobDefinitionType;
            }

            if (jobDefinitionConfiguration !== undefined) {
                localVarQueryParameter['jobDefinitionConfiguration'] = jobDefinitionConfiguration;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (failedActivityIdIn !== undefined) {
                localVarQueryParameter['failedActivityIdIn'] = failedActivityIdIn;
            }

            if (executionIdIn !== undefined) {
                localVarQueryParameter['executionIdIn'] = executionIdIn;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (deploymentId !== undefined) {
                localVarQueryParameter['deploymentId'] = deploymentId;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (hostname !== undefined) {
                localVarQueryParameter['hostname'] = hostname;
            }

            if (jobPriorityLowerThanOrEquals !== undefined) {
                localVarQueryParameter['jobPriorityLowerThanOrEquals'] = jobPriorityLowerThanOrEquals;
            }

            if (jobPriorityHigherThanOrEquals !== undefined) {
                localVarQueryParameter['jobPriorityHigherThanOrEquals'] = jobPriorityHigherThanOrEquals;
            }

            if (creationLog !== undefined) {
                localVarQueryParameter['creationLog'] = creationLog;
            }

            if (failureLog !== undefined) {
                localVarQueryParameter['failureLog'] = failureLog;
            }

            if (successLog !== undefined) {
                localVarQueryParameter['successLog'] = successLog;
            }

            if (deletionLog !== undefined) {
                localVarQueryParameter['deletionLog'] = deletionLog;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query/) method.
         * @summary Get Job Log Count
         * @param {string} [logId] Filter by historic job log id.
         * @param {string} [jobId] Filter by job id.
         * @param {string} [jobExceptionMessage] Filter by job exception message.
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [jobDefinitionType] Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
         * @param {string} [jobDefinitionConfiguration] Filter by job definition configuration.
         * @param {string} [activityIdIn] Only include historic job logs which belong to one of the passed activity ids.
         * @param {string} [failedActivityIdIn] Only include historic job logs which belong to failures of one of the passed activity ids.
         * @param {string} [executionIdIn] Only include historic job logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [deploymentId] Filter by deployment id.
         * @param {string} [tenantIdIn] Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [hostname] Filter by hostname.
         * @param {number} [jobPriorityLowerThanOrEquals] Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [jobPriorityHigherThanOrEquals] Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricJobLogsCount: async (logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/job-log/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (logId !== undefined) {
                localVarQueryParameter['logId'] = logId;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }

            if (jobExceptionMessage !== undefined) {
                localVarQueryParameter['jobExceptionMessage'] = jobExceptionMessage;
            }

            if (jobDefinitionId !== undefined) {
                localVarQueryParameter['jobDefinitionId'] = jobDefinitionId;
            }

            if (jobDefinitionType !== undefined) {
                localVarQueryParameter['jobDefinitionType'] = jobDefinitionType;
            }

            if (jobDefinitionConfiguration !== undefined) {
                localVarQueryParameter['jobDefinitionConfiguration'] = jobDefinitionConfiguration;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (failedActivityIdIn !== undefined) {
                localVarQueryParameter['failedActivityIdIn'] = failedActivityIdIn;
            }

            if (executionIdIn !== undefined) {
                localVarQueryParameter['executionIdIn'] = executionIdIn;
            }

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (deploymentId !== undefined) {
                localVarQueryParameter['deploymentId'] = deploymentId;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (hostname !== undefined) {
                localVarQueryParameter['hostname'] = hostname;
            }

            if (jobPriorityLowerThanOrEquals !== undefined) {
                localVarQueryParameter['jobPriorityLowerThanOrEquals'] = jobPriorityLowerThanOrEquals;
            }

            if (jobPriorityHigherThanOrEquals !== undefined) {
                localVarQueryParameter['jobPriorityHigherThanOrEquals'] = jobPriorityHigherThanOrEquals;
            }

            if (creationLog !== undefined) {
                localVarQueryParameter['creationLog'] = creationLog;
            }

            if (failureLog !== undefined) {
                localVarQueryParameter['failureLog'] = failureLog;
            }

            if (successLog !== undefined) {
                localVarQueryParameter['successLog'] = successLog;
            }

            if (deletionLog !== undefined) {
                localVarQueryParameter['deletionLog'] = deletionLog;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the corresponding exception stacktrace to the passed historic job log by id.
         * @summary Get Job Log Exception Stacktrace
         * @param {string} id The id of the historic job log to get the exception stacktrace for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStacktraceHistoricJobLog: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStacktraceHistoricJobLog.');
            }
            const localVarPath = `/history/job-log/{id}/stacktrace`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types `String`, `Number` or `Boolean`.
         * @summary Get Job Logs (POST)
         * @param {HistoricJobLogQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricJobLogs: async (body?: HistoricJobLogQueryDto, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/job-log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query-count/) method.
         * @summary Get Job Log Count (POST)
         * @param {HistoricJobLogQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricJobLogsCount: async (body?: HistoricJobLogQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/job-log/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricJobLogApi - functional programming interface
 * @export
 */
export const HistoricJobLogApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves a historic job log by id.
         * @summary Get Job Log
         * @param {string} id The id of the log entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricJobLog(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HistoricJobLogDto>>> {
            const localVarAxiosArgs = await HistoricJobLogApiAxiosParamCreator(configuration).getHistoricJobLog(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query-count/) method.
         * @summary Get Job Logs
         * @param {string} [logId] Filter by historic job log id.
         * @param {string} [jobId] Filter by job id.
         * @param {string} [jobExceptionMessage] Filter by job exception message.
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [jobDefinitionType] Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
         * @param {string} [jobDefinitionConfiguration] Filter by job definition configuration.
         * @param {string} [activityIdIn] Only include historic job logs which belong to one of the passed activity ids.
         * @param {string} [failedActivityIdIn] Only include historic job logs which belong to failures of one of the passed activity ids.
         * @param {string} [executionIdIn] Only include historic job logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [deploymentId] Filter by deployment id.
         * @param {string} [tenantIdIn] Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [hostname] Filter by hostname.
         * @param {number} [jobPriorityLowerThanOrEquals] Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [jobPriorityHigherThanOrEquals] Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricJobLogs(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricJobLogDto>>>> {
            const localVarAxiosArgs = await HistoricJobLogApiAxiosParamCreator(configuration).getHistoricJobLogs(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query/) method.
         * @summary Get Job Log Count
         * @param {string} [logId] Filter by historic job log id.
         * @param {string} [jobId] Filter by job id.
         * @param {string} [jobExceptionMessage] Filter by job exception message.
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [jobDefinitionType] Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
         * @param {string} [jobDefinitionConfiguration] Filter by job definition configuration.
         * @param {string} [activityIdIn] Only include historic job logs which belong to one of the passed activity ids.
         * @param {string} [failedActivityIdIn] Only include historic job logs which belong to failures of one of the passed activity ids.
         * @param {string} [executionIdIn] Only include historic job logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [deploymentId] Filter by deployment id.
         * @param {string} [tenantIdIn] Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [hostname] Filter by hostname.
         * @param {number} [jobPriorityLowerThanOrEquals] Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [jobPriorityHigherThanOrEquals] Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricJobLogsCount(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricJobLogApiAxiosParamCreator(configuration).getHistoricJobLogsCount(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the corresponding exception stacktrace to the passed historic job log by id.
         * @summary Get Job Log Exception Stacktrace
         * @param {string} id The id of the historic job log to get the exception stacktrace for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStacktraceHistoricJobLog(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await HistoricJobLogApiAxiosParamCreator(configuration).getStacktraceHistoricJobLog(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types `String`, `Number` or `Boolean`.
         * @summary Get Job Logs (POST)
         * @param {HistoricJobLogQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricJobLogs(body?: HistoricJobLogQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricJobLogDto>>>> {
            const localVarAxiosArgs = await HistoricJobLogApiAxiosParamCreator(configuration).queryHistoricJobLogs(body, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query-count/) method.
         * @summary Get Job Log Count (POST)
         * @param {HistoricJobLogQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricJobLogsCount(body?: HistoricJobLogQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricJobLogApiAxiosParamCreator(configuration).queryHistoricJobLogsCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoricJobLogApi - factory interface
 * @export
 */
export const HistoricJobLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves a historic job log by id.
         * @summary Get Job Log
         * @param {string} id The id of the log entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricJobLog(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HistoricJobLogDto>> {
            return HistoricJobLogApiFp(configuration).getHistoricJobLog(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query-count/) method.
         * @summary Get Job Logs
         * @param {string} [logId] Filter by historic job log id.
         * @param {string} [jobId] Filter by job id.
         * @param {string} [jobExceptionMessage] Filter by job exception message.
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [jobDefinitionType] Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
         * @param {string} [jobDefinitionConfiguration] Filter by job definition configuration.
         * @param {string} [activityIdIn] Only include historic job logs which belong to one of the passed activity ids.
         * @param {string} [failedActivityIdIn] Only include historic job logs which belong to failures of one of the passed activity ids.
         * @param {string} [executionIdIn] Only include historic job logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [deploymentId] Filter by deployment id.
         * @param {string} [tenantIdIn] Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [hostname] Filter by hostname.
         * @param {number} [jobPriorityLowerThanOrEquals] Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [jobPriorityHigherThanOrEquals] Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricJobLogs(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricJobLogDto>>> {
            return HistoricJobLogApiFp(configuration).getHistoricJobLogs(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query/) method.
         * @summary Get Job Log Count
         * @param {string} [logId] Filter by historic job log id.
         * @param {string} [jobId] Filter by job id.
         * @param {string} [jobExceptionMessage] Filter by job exception message.
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [jobDefinitionType] Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
         * @param {string} [jobDefinitionConfiguration] Filter by job definition configuration.
         * @param {string} [activityIdIn] Only include historic job logs which belong to one of the passed activity ids.
         * @param {string} [failedActivityIdIn] Only include historic job logs which belong to failures of one of the passed activity ids.
         * @param {string} [executionIdIn] Only include historic job logs which belong to one of the passed execution ids.
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processDefinitionId] Filter by process definition id.
         * @param {string} [processDefinitionKey] Filter by process definition key.
         * @param {string} [deploymentId] Filter by deployment id.
         * @param {string} [tenantIdIn] Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [hostname] Filter by hostname.
         * @param {number} [jobPriorityLowerThanOrEquals] Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {number} [jobPriorityHigherThanOrEquals] Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
         * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricJobLogsCount(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricJobLogApiFp(configuration).getHistoricJobLogsCount(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the corresponding exception stacktrace to the passed historic job log by id.
         * @summary Get Job Log Exception Stacktrace
         * @param {string} id The id of the historic job log to get the exception stacktrace for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStacktraceHistoricJobLog(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return HistoricJobLogApiFp(configuration).getStacktraceHistoricJobLog(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types `String`, `Number` or `Boolean`.
         * @summary Get Job Logs (POST)
         * @param {HistoricJobLogQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricJobLogs(body?: HistoricJobLogQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricJobLogDto>>> {
            return HistoricJobLogApiFp(configuration).queryHistoricJobLogs(body, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query-count/) method.
         * @summary Get Job Log Count (POST)
         * @param {HistoricJobLogQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricJobLogsCount(body?: HistoricJobLogQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricJobLogApiFp(configuration).queryHistoricJobLogsCount(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricJobLogApi - object-oriented interface
 * @export
 * @class HistoricJobLogApi
 * @extends {BaseAPI}
 */
export class HistoricJobLogApi extends BaseAPI {
    /**
     * Retrieves a historic job log by id.
     * @summary Get Job Log
     * @param {string} id The id of the log entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricJobLogApi
     */
    public async getHistoricJobLog(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<HistoricJobLogDto>> {
        return HistoricJobLogApiFp(this.configuration).getHistoricJobLog(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query-count/) method.
     * @summary Get Job Logs
     * @param {string} [logId] Filter by historic job log id.
     * @param {string} [jobId] Filter by job id.
     * @param {string} [jobExceptionMessage] Filter by job exception message.
     * @param {string} [jobDefinitionId] Filter by job definition id.
     * @param {string} [jobDefinitionType] Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
     * @param {string} [jobDefinitionConfiguration] Filter by job definition configuration.
     * @param {string} [activityIdIn] Only include historic job logs which belong to one of the passed activity ids.
     * @param {string} [failedActivityIdIn] Only include historic job logs which belong to failures of one of the passed activity ids.
     * @param {string} [executionIdIn] Only include historic job logs which belong to one of the passed execution ids.
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processDefinitionId] Filter by process definition id.
     * @param {string} [processDefinitionKey] Filter by process definition key.
     * @param {string} [deploymentId] Filter by deployment id.
     * @param {string} [tenantIdIn] Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [hostname] Filter by hostname.
     * @param {number} [jobPriorityLowerThanOrEquals] Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {number} [jobPriorityHigherThanOrEquals] Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricJobLogApi
     */
    public async getHistoricJobLogs(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricJobLogDto>>> {
        return HistoricJobLogApiFp(this.configuration).getHistoricJobLogs(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query/) method.
     * @summary Get Job Log Count
     * @param {string} [logId] Filter by historic job log id.
     * @param {string} [jobId] Filter by job id.
     * @param {string} [jobExceptionMessage] Filter by job exception message.
     * @param {string} [jobDefinitionId] Filter by job definition id.
     * @param {string} [jobDefinitionType] Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
     * @param {string} [jobDefinitionConfiguration] Filter by job definition configuration.
     * @param {string} [activityIdIn] Only include historic job logs which belong to one of the passed activity ids.
     * @param {string} [failedActivityIdIn] Only include historic job logs which belong to failures of one of the passed activity ids.
     * @param {string} [executionIdIn] Only include historic job logs which belong to one of the passed execution ids.
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processDefinitionId] Filter by process definition id.
     * @param {string} [processDefinitionKey] Filter by process definition key.
     * @param {string} [deploymentId] Filter by deployment id.
     * @param {string} [tenantIdIn] Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [hostname] Filter by hostname.
     * @param {number} [jobPriorityLowerThanOrEquals] Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {number} [jobPriorityHigherThanOrEquals] Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {boolean} [creationLog] Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [failureLog] Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [successLog] Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [deletionLog] Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricJobLogApi
     */
    public async getHistoricJobLogsCount(logId?: string, jobId?: string, jobExceptionMessage?: string, jobDefinitionId?: string, jobDefinitionType?: string, jobDefinitionConfiguration?: string, activityIdIn?: string, failedActivityIdIn?: string, executionIdIn?: string, processInstanceId?: string, processDefinitionId?: string, processDefinitionKey?: string, deploymentId?: string, tenantIdIn?: string, withoutTenantId?: boolean, hostname?: string, jobPriorityLowerThanOrEquals?: number, jobPriorityHigherThanOrEquals?: number, creationLog?: boolean, failureLog?: boolean, successLog?: boolean, deletionLog?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricJobLogApiFp(this.configuration).getHistoricJobLogsCount(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the corresponding exception stacktrace to the passed historic job log by id.
     * @summary Get Job Log Exception Stacktrace
     * @param {string} id The id of the historic job log to get the exception stacktrace for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricJobLogApi
     */
    public async getStacktraceHistoricJobLog(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return HistoricJobLogApiFp(this.configuration).getStacktraceHistoricJobLog(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types `String`, `Number` or `Boolean`.
     * @summary Get Job Logs (POST)
     * @param {HistoricJobLogQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricJobLogApi
     */
    public async queryHistoricJobLogs(body?: HistoricJobLogQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricJobLogDto>>> {
        return HistoricJobLogApiFp(this.configuration).queryHistoricJobLogs(body, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.18/reference/rest/history/job-log/get-job-log-query-count/) method.
     * @summary Get Job Log Count (POST)
     * @param {HistoricJobLogQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricJobLogApi
     */
    public async queryHistoricJobLogsCount(body?: HistoricJobLogQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricJobLogApiFp(this.configuration).queryHistoricJobLogsCount(body, options).then((request) => request(this.axios, this.basePath));
    }
}

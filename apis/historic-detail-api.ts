/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { HistoricDetailDto } from '../models';
import { HistoricDetailQueryDto } from '../models';
/**
 * HistoricDetailApi - axios parameter creator
 * @export
 */
export const HistoricDetailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Queries for historic details that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
         * @summary Get Historic Details
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIdIn] Only include historic details which belong to one of the passed comma-separated process instance ids.
         * @param {string} [executionId] Filter by execution id.
         * @param {string} [taskId] Filter by task id.
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [caseExecutionId] Filter by case execution id.
         * @param {string} [variableInstanceId] Filter by variable instance id.
         * @param {string} [variableTypeIn] Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [userOperationId] Filter by a user operation id.
         * @param {boolean} [formFields] Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [variableUpdates] Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [excludeTaskDetails] Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [initial] Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [occurredBefore] Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {Date} [occurredAfter] Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricDetails: async (processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processInstanceIdIn !== undefined) {
                localVarQueryParameter['processInstanceIdIn'] = processInstanceIdIn;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (activityInstanceId !== undefined) {
                localVarQueryParameter['activityInstanceId'] = activityInstanceId;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (caseExecutionId !== undefined) {
                localVarQueryParameter['caseExecutionId'] = caseExecutionId;
            }

            if (variableInstanceId !== undefined) {
                localVarQueryParameter['variableInstanceId'] = variableInstanceId;
            }

            if (variableTypeIn !== undefined) {
                localVarQueryParameter['variableTypeIn'] = variableTypeIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (userOperationId !== undefined) {
                localVarQueryParameter['userOperationId'] = userOperationId;
            }

            if (formFields !== undefined) {
                localVarQueryParameter['formFields'] = formFields;
            }

            if (variableUpdates !== undefined) {
                localVarQueryParameter['variableUpdates'] = variableUpdates;
            }

            if (excludeTaskDetails !== undefined) {
                localVarQueryParameter['excludeTaskDetails'] = excludeTaskDetails;
            }

            if (initial !== undefined) {
                localVarQueryParameter['initial'] = initial;
            }

            if (occurredBefore !== undefined) {
                localVarQueryParameter['occurredBefore'] = (occurredBefore as any instanceof Date) ?
                    (occurredBefore as any).toISOString() :
                    occurredBefore;
            }

            if (occurredAfter !== undefined) {
                localVarQueryParameter['occurredAfter'] = (occurredAfter as any instanceof Date) ?
                    (occurredAfter as any).toISOString() :
                    occurredAfter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (deserializeValues !== undefined) {
                localVarQueryParameter['deserializeValues'] = deserializeValues;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of historic details that fulfill the given parameters. Takes the same parameters as the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method.
         * @summary Get Historic Detail Count
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIdIn] Only include historic details which belong to one of the passed comma-separated process instance ids.
         * @param {string} [executionId] Filter by execution id.
         * @param {string} [taskId] Filter by task id.
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [caseExecutionId] Filter by case execution id.
         * @param {string} [variableInstanceId] Filter by variable instance id.
         * @param {string} [variableTypeIn] Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [userOperationId] Filter by a user operation id.
         * @param {boolean} [formFields] Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [variableUpdates] Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [excludeTaskDetails] Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [initial] Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [occurredBefore] Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {Date} [occurredAfter] Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricDetailsCount: async (processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/detail/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (processInstanceId !== undefined) {
                localVarQueryParameter['processInstanceId'] = processInstanceId;
            }

            if (processInstanceIdIn !== undefined) {
                localVarQueryParameter['processInstanceIdIn'] = processInstanceIdIn;
            }

            if (executionId !== undefined) {
                localVarQueryParameter['executionId'] = executionId;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (activityInstanceId !== undefined) {
                localVarQueryParameter['activityInstanceId'] = activityInstanceId;
            }

            if (caseInstanceId !== undefined) {
                localVarQueryParameter['caseInstanceId'] = caseInstanceId;
            }

            if (caseExecutionId !== undefined) {
                localVarQueryParameter['caseExecutionId'] = caseExecutionId;
            }

            if (variableInstanceId !== undefined) {
                localVarQueryParameter['variableInstanceId'] = variableInstanceId;
            }

            if (variableTypeIn !== undefined) {
                localVarQueryParameter['variableTypeIn'] = variableTypeIn;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (userOperationId !== undefined) {
                localVarQueryParameter['userOperationId'] = userOperationId;
            }

            if (formFields !== undefined) {
                localVarQueryParameter['formFields'] = formFields;
            }

            if (variableUpdates !== undefined) {
                localVarQueryParameter['variableUpdates'] = variableUpdates;
            }

            if (excludeTaskDetails !== undefined) {
                localVarQueryParameter['excludeTaskDetails'] = excludeTaskDetails;
            }

            if (initial !== undefined) {
                localVarQueryParameter['initial'] = initial;
            }

            if (occurredBefore !== undefined) {
                localVarQueryParameter['occurredBefore'] = (occurredBefore as any instanceof Date) ?
                    (occurredBefore as any).toISOString() :
                    occurredBefore;
            }

            if (occurredAfter !== undefined) {
                localVarQueryParameter['occurredAfter'] = (occurredAfter as any instanceof Date) ?
                    (occurredAfter as any).toISOString() :
                    occurredAfter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a historic detail by id.
         * @summary Get Historic Detail
         * @param {string} id The id of the detail.
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicDetail: async (id: string, deserializeValue?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling historicDetail.');
            }
            const localVarPath = `/history/detail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deserializeValue !== undefined) {
                localVarQueryParameter['deserializeValue'] = deserializeValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the content of a historic variable update by id. Applicable for byte array and file variables.
         * @summary Get Historic Detail (Binary)
         * @param {string} id The id of the historic variable update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicDetailBinary: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling historicDetailBinary.');
            }
            const localVarPath = `/history/detail/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for historic details that fulfill the given parameters. This method is slightly more powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method because it allows sorting by multiple parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
         * @summary Get Historic Details (POST)
         * @param {HistoricDetailQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryHistoricDetails: async (body?: HistoricDetailQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (deserializeValues !== undefined) {
                localVarQueryParameter['deserializeValues'] = deserializeValues;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoricDetailApi - functional programming interface
 * @export
 */
export const HistoricDetailApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Queries for historic details that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
         * @summary Get Historic Details
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIdIn] Only include historic details which belong to one of the passed comma-separated process instance ids.
         * @param {string} [executionId] Filter by execution id.
         * @param {string} [taskId] Filter by task id.
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [caseExecutionId] Filter by case execution id.
         * @param {string} [variableInstanceId] Filter by variable instance id.
         * @param {string} [variableTypeIn] Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [userOperationId] Filter by a user operation id.
         * @param {boolean} [formFields] Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [variableUpdates] Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [excludeTaskDetails] Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [initial] Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [occurredBefore] Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {Date} [occurredAfter] Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDetails(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricDetailDto>>>> {
            const localVarAxiosArgs = await HistoricDetailApiAxiosParamCreator(configuration).getHistoricDetails(processInstanceId, processInstanceIdIn, executionId, taskId, activityInstanceId, caseInstanceId, caseExecutionId, variableInstanceId, variableTypeIn, tenantIdIn, withoutTenantId, userOperationId, formFields, variableUpdates, excludeTaskDetails, initial, occurredBefore, occurredAfter, sortBy, sortOrder, firstResult, maxResults, deserializeValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of historic details that fulfill the given parameters. Takes the same parameters as the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method.
         * @summary Get Historic Detail Count
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIdIn] Only include historic details which belong to one of the passed comma-separated process instance ids.
         * @param {string} [executionId] Filter by execution id.
         * @param {string} [taskId] Filter by task id.
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [caseExecutionId] Filter by case execution id.
         * @param {string} [variableInstanceId] Filter by variable instance id.
         * @param {string} [variableTypeIn] Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [userOperationId] Filter by a user operation id.
         * @param {boolean} [formFields] Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [variableUpdates] Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [excludeTaskDetails] Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [initial] Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [occurredBefore] Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {Date} [occurredAfter] Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDetailsCount(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await HistoricDetailApiAxiosParamCreator(configuration).getHistoricDetailsCount(processInstanceId, processInstanceIdIn, executionId, taskId, activityInstanceId, caseInstanceId, caseExecutionId, variableInstanceId, variableTypeIn, tenantIdIn, withoutTenantId, userOperationId, formFields, variableUpdates, excludeTaskDetails, initial, occurredBefore, occurredAfter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a historic detail by id.
         * @summary Get Historic Detail
         * @param {string} id The id of the detail.
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historicDetail(id: string, deserializeValue?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HistoricDetailDto>>> {
            const localVarAxiosArgs = await HistoricDetailApiAxiosParamCreator(configuration).historicDetail(id, deserializeValue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the content of a historic variable update by id. Applicable for byte array and file variables.
         * @summary Get Historic Detail (Binary)
         * @param {string} id The id of the historic variable update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historicDetailBinary(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await HistoricDetailApiAxiosParamCreator(configuration).historicDetailBinary(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for historic details that fulfill the given parameters. This method is slightly more powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method because it allows sorting by multiple parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
         * @summary Get Historic Details (POST)
         * @param {HistoricDetailQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricDetails(body?: HistoricDetailQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HistoricDetailDto>>>> {
            const localVarAxiosArgs = await HistoricDetailApiAxiosParamCreator(configuration).queryHistoricDetails(body, firstResult, maxResults, deserializeValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoricDetailApi - factory interface
 * @export
 */
export const HistoricDetailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Queries for historic details that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
         * @summary Get Historic Details
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIdIn] Only include historic details which belong to one of the passed comma-separated process instance ids.
         * @param {string} [executionId] Filter by execution id.
         * @param {string} [taskId] Filter by task id.
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [caseExecutionId] Filter by case execution id.
         * @param {string} [variableInstanceId] Filter by variable instance id.
         * @param {string} [variableTypeIn] Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [userOperationId] Filter by a user operation id.
         * @param {boolean} [formFields] Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [variableUpdates] Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [excludeTaskDetails] Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [initial] Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [occurredBefore] Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {Date} [occurredAfter] Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDetails(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricDetailDto>>> {
            return HistoricDetailApiFp(configuration).getHistoricDetails(processInstanceId, processInstanceIdIn, executionId, taskId, activityInstanceId, caseInstanceId, caseExecutionId, variableInstanceId, variableTypeIn, tenantIdIn, withoutTenantId, userOperationId, formFields, variableUpdates, excludeTaskDetails, initial, occurredBefore, occurredAfter, sortBy, sortOrder, firstResult, maxResults, deserializeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of historic details that fulfill the given parameters. Takes the same parameters as the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method.
         * @summary Get Historic Detail Count
         * @param {string} [processInstanceId] Filter by process instance id.
         * @param {string} [processInstanceIdIn] Only include historic details which belong to one of the passed comma-separated process instance ids.
         * @param {string} [executionId] Filter by execution id.
         * @param {string} [taskId] Filter by task id.
         * @param {string} [activityInstanceId] Filter by activity instance id.
         * @param {string} [caseInstanceId] Filter by case instance id.
         * @param {string} [caseExecutionId] Filter by case execution id.
         * @param {string} [variableInstanceId] Filter by variable instance id.
         * @param {string} [variableTypeIn] Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
         * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids.
         * @param {boolean} [withoutTenantId] Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [userOperationId] Filter by a user operation id.
         * @param {boolean} [formFields] Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [variableUpdates] Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [excludeTaskDetails] Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [initial] Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {Date} [occurredBefore] Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {Date} [occurredAfter] Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricDetailsCount(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return HistoricDetailApiFp(configuration).getHistoricDetailsCount(processInstanceId, processInstanceIdIn, executionId, taskId, activityInstanceId, caseInstanceId, caseExecutionId, variableInstanceId, variableTypeIn, tenantIdIn, withoutTenantId, userOperationId, formFields, variableUpdates, excludeTaskDetails, initial, occurredBefore, occurredAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a historic detail by id.
         * @summary Get Historic Detail
         * @param {string} id The id of the detail.
         * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historicDetail(id: string, deserializeValue?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<HistoricDetailDto>> {
            return HistoricDetailApiFp(configuration).historicDetail(id, deserializeValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the content of a historic variable update by id. Applicable for byte array and file variables.
         * @summary Get Historic Detail (Binary)
         * @param {string} id The id of the historic variable update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historicDetailBinary(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return HistoricDetailApiFp(configuration).historicDetailBinary(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for historic details that fulfill the given parameters. This method is slightly more powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method because it allows sorting by multiple parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
         * @summary Get Historic Details (POST)
         * @param {HistoricDetailQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryHistoricDetails(body?: HistoricDetailQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HistoricDetailDto>>> {
            return HistoricDetailApiFp(configuration).queryHistoricDetails(body, firstResult, maxResults, deserializeValues, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoricDetailApi - object-oriented interface
 * @export
 * @class HistoricDetailApi
 * @extends {BaseAPI}
 */
export class HistoricDetailApi extends BaseAPI {
    /**
     * Queries for historic details that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
     * @summary Get Historic Details
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processInstanceIdIn] Only include historic details which belong to one of the passed comma-separated process instance ids.
     * @param {string} [executionId] Filter by execution id.
     * @param {string} [taskId] Filter by task id.
     * @param {string} [activityInstanceId] Filter by activity instance id.
     * @param {string} [caseInstanceId] Filter by case instance id.
     * @param {string} [caseExecutionId] Filter by case execution id.
     * @param {string} [variableInstanceId] Filter by variable instance id.
     * @param {string} [variableTypeIn] Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [userOperationId] Filter by a user operation id.
     * @param {boolean} [formFields] Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [variableUpdates] Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [excludeTaskDetails] Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [initial] Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Date} [occurredBefore] Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {Date} [occurredAfter] Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDetailApi
     */
    public async getHistoricDetails(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricDetailDto>>> {
        return HistoricDetailApiFp(this.configuration).getHistoricDetails(processInstanceId, processInstanceIdIn, executionId, taskId, activityInstanceId, caseInstanceId, caseExecutionId, variableInstanceId, variableTypeIn, tenantIdIn, withoutTenantId, userOperationId, formFields, variableUpdates, excludeTaskDetails, initial, occurredBefore, occurredAfter, sortBy, sortOrder, firstResult, maxResults, deserializeValues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of historic details that fulfill the given parameters. Takes the same parameters as the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method.
     * @summary Get Historic Detail Count
     * @param {string} [processInstanceId] Filter by process instance id.
     * @param {string} [processInstanceIdIn] Only include historic details which belong to one of the passed comma-separated process instance ids.
     * @param {string} [executionId] Filter by execution id.
     * @param {string} [taskId] Filter by task id.
     * @param {string} [activityInstanceId] Filter by activity instance id.
     * @param {string} [caseInstanceId] Filter by case instance id.
     * @param {string} [caseExecutionId] Filter by case execution id.
     * @param {string} [variableInstanceId] Filter by variable instance id.
     * @param {string} [variableTypeIn] Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.18/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
     * @param {string} [tenantIdIn] Filter by a comma-separated list of tenant ids.
     * @param {boolean} [withoutTenantId] Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [userOperationId] Filter by a user operation id.
     * @param {boolean} [formFields] Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [variableUpdates] Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [excludeTaskDetails] Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [initial] Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Date} [occurredBefore] Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {Date} [occurredAfter] Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDetailApi
     */
    public async getHistoricDetailsCount(processInstanceId?: string, processInstanceIdIn?: string, executionId?: string, taskId?: string, activityInstanceId?: string, caseInstanceId?: string, caseExecutionId?: string, variableInstanceId?: string, variableTypeIn?: string, tenantIdIn?: string, withoutTenantId?: boolean, userOperationId?: string, formFields?: boolean, variableUpdates?: boolean, excludeTaskDetails?: boolean, initial?: boolean, occurredBefore?: Date, occurredAfter?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return HistoricDetailApiFp(this.configuration).getHistoricDetailsCount(processInstanceId, processInstanceIdIn, executionId, taskId, activityInstanceId, caseInstanceId, caseExecutionId, variableInstanceId, variableTypeIn, tenantIdIn, withoutTenantId, userOperationId, formFields, variableUpdates, excludeTaskDetails, initial, occurredBefore, occurredAfter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a historic detail by id.
     * @summary Get Historic Detail
     * @param {string} id The id of the detail.
     * @param {boolean} [deserializeValue] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDetailApi
     */
    public async historicDetail(id: string, deserializeValue?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<HistoricDetailDto>> {
        return HistoricDetailApiFp(this.configuration).historicDetail(id, deserializeValue, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the content of a historic variable update by id. Applicable for byte array and file variables.
     * @summary Get Historic Detail (Binary)
     * @param {string} id The id of the historic variable update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDetailApi
     */
    public async historicDetailBinary(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return HistoricDetailApiFp(this.configuration).historicDetailBinary(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for historic details that fulfill the given parameters. This method is slightly more powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query/) method because it allows sorting by multiple parameters. The size of the result set can be retrieved by using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.18/reference/rest/history/detail/get-detail-query-count/) method.
     * @summary Get Historic Details (POST)
     * @param {HistoricDetailQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {boolean} [deserializeValues] Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoricDetailApi
     */
    public async queryHistoricDetails(body?: HistoricDetailQueryDto, firstResult?: number, maxResults?: number, deserializeValues?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HistoricDetailDto>>> {
        return HistoricDetailApiFp(this.configuration).queryHistoricDetails(body, firstResult, maxResults, deserializeValues, options).then((request) => request(this.axios, this.basePath));
    }
}

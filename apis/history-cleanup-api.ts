/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExceptionDto } from '../models';
import { HistoryCleanupConfigurationDto } from '../models';
import { JobDto } from '../models';
/**
 * HistoryCleanupApi - axios parameter creator
 * @export
 */
export const HistoryCleanupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Schedules asynchronous history cleanup (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).  **Note:** This endpoint will return at most a single history cleanup job. Since version `7.9.0` it is possible to configure multiple [parallel history cleanup jobs](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#parallel-execution). Use [`GET /history/cleanup/jobs`](https://docs.camunda.org/manual/7.18/reference/rest/history/history-cleanup/get-history-cleanup-jobs) to find all the available history cleanup jobs.
         * @summary Clean up history (POST)
         * @param {boolean} [immediatelyDue] When true the job will be scheduled for nearest future. When &#x60;false&#x60;, the job will be scheduled for next batch window start time. Default is &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cleanupAsync: async (immediatelyDue?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/cleanup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (immediatelyDue !== undefined) {
                localVarQueryParameter['immediatelyDue'] = immediatelyDue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * **Deprecated!** Use `GET /history/cleanup/jobs` instead.  Finds history cleanup job (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
         * @summary Find clean up history job (GET)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCleanupJob: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/cleanup/job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds history cleanup jobs (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
         * @summary Find clean up history jobs (GET)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCleanupJobs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/cleanup/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves history cleanup batch window configuration (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
         * @summary Get History Cleanup Configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryCleanupConfiguration: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/history/cleanup/configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoryCleanupApi - functional programming interface
 * @export
 */
export const HistoryCleanupApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Schedules asynchronous history cleanup (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).  **Note:** This endpoint will return at most a single history cleanup job. Since version `7.9.0` it is possible to configure multiple [parallel history cleanup jobs](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#parallel-execution). Use [`GET /history/cleanup/jobs`](https://docs.camunda.org/manual/7.18/reference/rest/history/history-cleanup/get-history-cleanup-jobs) to find all the available history cleanup jobs.
         * @summary Clean up history (POST)
         * @param {boolean} [immediatelyDue] When true the job will be scheduled for nearest future. When &#x60;false&#x60;, the job will be scheduled for next batch window start time. Default is &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cleanupAsync(immediatelyDue?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JobDto>>> {
            const localVarAxiosArgs = await HistoryCleanupApiAxiosParamCreator(configuration).cleanupAsync(immediatelyDue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * **Deprecated!** Use `GET /history/cleanup/jobs` instead.  Finds history cleanup job (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
         * @summary Find clean up history job (GET)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCleanupJob(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JobDto>>> {
            const localVarAxiosArgs = await HistoryCleanupApiAxiosParamCreator(configuration).findCleanupJob(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Finds history cleanup jobs (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
         * @summary Find clean up history jobs (GET)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCleanupJobs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<JobDto>>>> {
            const localVarAxiosArgs = await HistoryCleanupApiAxiosParamCreator(configuration).findCleanupJobs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves history cleanup batch window configuration (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
         * @summary Get History Cleanup Configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoryCleanupConfiguration(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HistoryCleanupConfigurationDto>>> {
            const localVarAxiosArgs = await HistoryCleanupApiAxiosParamCreator(configuration).getHistoryCleanupConfiguration(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HistoryCleanupApi - factory interface
 * @export
 */
export const HistoryCleanupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Schedules asynchronous history cleanup (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).  **Note:** This endpoint will return at most a single history cleanup job. Since version `7.9.0` it is possible to configure multiple [parallel history cleanup jobs](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#parallel-execution). Use [`GET /history/cleanup/jobs`](https://docs.camunda.org/manual/7.18/reference/rest/history/history-cleanup/get-history-cleanup-jobs) to find all the available history cleanup jobs.
         * @summary Clean up history (POST)
         * @param {boolean} [immediatelyDue] When true the job will be scheduled for nearest future. When &#x60;false&#x60;, the job will be scheduled for next batch window start time. Default is &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cleanupAsync(immediatelyDue?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<JobDto>> {
            return HistoryCleanupApiFp(configuration).cleanupAsync(immediatelyDue, options).then((request) => request(axios, basePath));
        },
        /**
         * **Deprecated!** Use `GET /history/cleanup/jobs` instead.  Finds history cleanup job (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
         * @summary Find clean up history job (GET)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCleanupJob(options?: AxiosRequestConfig): Promise<AxiosResponse<JobDto>> {
            return HistoryCleanupApiFp(configuration).findCleanupJob(options).then((request) => request(axios, basePath));
        },
        /**
         * Finds history cleanup jobs (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
         * @summary Find clean up history jobs (GET)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCleanupJobs(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<JobDto>>> {
            return HistoryCleanupApiFp(configuration).findCleanupJobs(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves history cleanup batch window configuration (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
         * @summary Get History Cleanup Configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoryCleanupConfiguration(options?: AxiosRequestConfig): Promise<AxiosResponse<HistoryCleanupConfigurationDto>> {
            return HistoryCleanupApiFp(configuration).getHistoryCleanupConfiguration(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoryCleanupApi - object-oriented interface
 * @export
 * @class HistoryCleanupApi
 * @extends {BaseAPI}
 */
export class HistoryCleanupApi extends BaseAPI {
    /**
     * Schedules asynchronous history cleanup (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).  **Note:** This endpoint will return at most a single history cleanup job. Since version `7.9.0` it is possible to configure multiple [parallel history cleanup jobs](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#parallel-execution). Use [`GET /history/cleanup/jobs`](https://docs.camunda.org/manual/7.18/reference/rest/history/history-cleanup/get-history-cleanup-jobs) to find all the available history cleanup jobs.
     * @summary Clean up history (POST)
     * @param {boolean} [immediatelyDue] When true the job will be scheduled for nearest future. When &#x60;false&#x60;, the job will be scheduled for next batch window start time. Default is &#x60;true&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryCleanupApi
     */
    public async cleanupAsync(immediatelyDue?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<JobDto>> {
        return HistoryCleanupApiFp(this.configuration).cleanupAsync(immediatelyDue, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * **Deprecated!** Use `GET /history/cleanup/jobs` instead.  Finds history cleanup job (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
     * @summary Find clean up history job (GET)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryCleanupApi
     */
    public async findCleanupJob(options?: AxiosRequestConfig) : Promise<AxiosResponse<JobDto>> {
        return HistoryCleanupApiFp(this.configuration).findCleanupJob(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Finds history cleanup jobs (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
     * @summary Find clean up history jobs (GET)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryCleanupApi
     */
    public async findCleanupJobs(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<JobDto>>> {
        return HistoryCleanupApiFp(this.configuration).findCleanupJobs(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves history cleanup batch window configuration (See [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup)).
     * @summary Get History Cleanup Configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryCleanupApi
     */
    public async getHistoryCleanupConfiguration(options?: AxiosRequestConfig) : Promise<AxiosResponse<HistoryCleanupConfigurationDto>> {
        return HistoryCleanupApiFp(this.configuration).getHistoryCleanupConfiguration(options).then((request) => request(this.axios, this.basePath));
    }
}

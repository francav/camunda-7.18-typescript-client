/* tslint:disable */
/* eslint-disable */
/**
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CountResultDto } from '../models';
import { ExceptionDto } from '../models';
import { JobDefinitionDto } from '../models';
import { JobDefinitionPriorityDto } from '../models';
import { JobDefinitionQueryDto } from '../models';
import { JobDefinitionSuspensionStateDto } from '../models';
import { JobDefinitionsSuspensionStateDto } from '../models';
import { RetriesDto } from '../models';
/**
 * JobDefinitionApi - axios parameter creator
 * @export
 */
export const JobDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.
         * @summary Get Job Definition
         * @param {string} id The id of the job definition to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobDefinition: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getJobDefinition.');
            }
            const localVarPath = `/job-definition/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
         * @summary Get Job Definitions
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [activityIdIn] Only include job definitions which belong to one of the passed and comma-separated activity ids.
         * @param {string} [processDefinitionId] Only include job definitions which exist for the given process definition id.
         * @param {string} [processDefinitionKey] Only include job definitions which exist for the given process definition key.
         * @param {string} [jobType] Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
         * @param {string} [jobConfiguration] Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
         * @param {boolean} [active] Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withOverridingJobPriority] Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
         * @param {string} [tenantIdIn] Only include job definitions which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeJobDefinitionsWithoutTenantId] Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobDefinitions: async (jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobDefinitionId !== undefined) {
                localVarQueryParameter['jobDefinitionId'] = jobDefinitionId;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (jobType !== undefined) {
                localVarQueryParameter['jobType'] = jobType;
            }

            if (jobConfiguration !== undefined) {
                localVarQueryParameter['jobConfiguration'] = jobConfiguration;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (withOverridingJobPriority !== undefined) {
                localVarQueryParameter['withOverridingJobPriority'] = withOverridingJobPriority;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (includeJobDefinitionsWithoutTenantId !== undefined) {
                localVarQueryParameter['includeJobDefinitionsWithoutTenantId'] = includeJobDefinitionsWithoutTenantId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method.
         * @summary Get Job Definition Count
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [activityIdIn] Only include job definitions which belong to one of the passed and comma-separated activity ids.
         * @param {string} [processDefinitionId] Only include job definitions which exist for the given process definition id.
         * @param {string} [processDefinitionKey] Only include job definitions which exist for the given process definition key.
         * @param {string} [jobType] Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
         * @param {string} [jobConfiguration] Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
         * @param {boolean} [active] Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withOverridingJobPriority] Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
         * @param {string} [tenantIdIn] Only include job definitions which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeJobDefinitionsWithoutTenantId] Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobDefinitionsCount: async (jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job-definition/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobDefinitionId !== undefined) {
                localVarQueryParameter['jobDefinitionId'] = jobDefinitionId;
            }

            if (activityIdIn !== undefined) {
                localVarQueryParameter['activityIdIn'] = activityIdIn;
            }

            if (processDefinitionId !== undefined) {
                localVarQueryParameter['processDefinitionId'] = processDefinitionId;
            }

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (jobType !== undefined) {
                localVarQueryParameter['jobType'] = jobType;
            }

            if (jobConfiguration !== undefined) {
                localVarQueryParameter['jobConfiguration'] = jobConfiguration;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (suspended !== undefined) {
                localVarQueryParameter['suspended'] = suspended;
            }

            if (withOverridingJobPriority !== undefined) {
                localVarQueryParameter['withOverridingJobPriority'] = withOverridingJobPriority;
            }

            if (tenantIdIn !== undefined) {
                localVarQueryParameter['tenantIdIn'] = tenantIdIn;
            }

            if (withoutTenantId !== undefined) {
                localVarQueryParameter['withoutTenantId'] = withoutTenantId;
            }

            if (includeJobDefinitionsWithoutTenantId !== undefined) {
                localVarQueryParameter['includeJobDefinitionsWithoutTenantId'] = includeJobDefinitionsWithoutTenantId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types `String`, `Number` or `Boolean`.
         * @summary Get Job Definitions (POST)
         * @param {JobDefinitionQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryJobDefinitions: async (body?: JobDefinitionQueryDto, firstResult?: number, maxResults?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
         * @summary Get Job Definition Count (POST)
         * @param {JobDefinitionQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryJobDefinitionsCount: async (body?: JobDefinitionQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job-definition/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions' existing jobs are updated accordingly. The priority can be reset by setting it to `null`, meaning that a new job's priority will not be determined based on its definition's priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
         * @summary Set Job Definition Priority by Id
         * @param {string} id The id of the job definition to be updated.
         * @param {JobDefinitionPriorityDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setJobPriorityJobDefinition: async (id: string, body?: JobDefinitionPriorityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setJobPriorityJobDefinition.');
            }
            const localVarPath = `/job-definition/{id}/jobPriority`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the number of retries of all **failed** jobs associated with the given job definition id.
         * @summary Set Job Retries By Job Definition Id
         * @param {string} id The id of the job definition to be updated.
         * @param {RetriesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setJobRetriesJobDefinition: async (id: string, body?: RetriesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setJobRetriesJobDefinition.');
            }
            const localVarPath = `/job-definition/{id}/retries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates or suspends a given job definition by id.
         * @summary Activate/Suspend Job Definition By Id
         * @param {string} id The id of the job definition to activate or suspend.
         * @param {JobDefinitionSuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuspensionStateJobDefinition: async (id: string, body?: JobDefinitionSuspensionStateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSuspensionStateJobDefinition.');
            }
            const localVarPath = `/job-definition/{id}/suspended`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates or suspends job definitions with the given process definition id or process definition key.
         * @summary Activate/Suspend Job Definitions
         * @param {JobDefinitionsSuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuspensionStateJobDefinitions: async (body?: JobDefinitionsSuspensionStateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job-definition/suspended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobDefinitionApi - functional programming interface
 * @export
 */
export const JobDefinitionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.
         * @summary Get Job Definition
         * @param {string} id The id of the job definition to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobDefinition(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JobDefinitionDto>>> {
            const localVarAxiosArgs = await JobDefinitionApiAxiosParamCreator(configuration).getJobDefinition(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
         * @summary Get Job Definitions
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [activityIdIn] Only include job definitions which belong to one of the passed and comma-separated activity ids.
         * @param {string} [processDefinitionId] Only include job definitions which exist for the given process definition id.
         * @param {string} [processDefinitionKey] Only include job definitions which exist for the given process definition key.
         * @param {string} [jobType] Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
         * @param {string} [jobConfiguration] Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
         * @param {boolean} [active] Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withOverridingJobPriority] Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
         * @param {string} [tenantIdIn] Only include job definitions which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeJobDefinitionsWithoutTenantId] Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobDefinitions(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<JobDefinitionDto>>>> {
            const localVarAxiosArgs = await JobDefinitionApiAxiosParamCreator(configuration).getJobDefinitions(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method.
         * @summary Get Job Definition Count
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [activityIdIn] Only include job definitions which belong to one of the passed and comma-separated activity ids.
         * @param {string} [processDefinitionId] Only include job definitions which exist for the given process definition id.
         * @param {string} [processDefinitionKey] Only include job definitions which exist for the given process definition key.
         * @param {string} [jobType] Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
         * @param {string} [jobConfiguration] Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
         * @param {boolean} [active] Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withOverridingJobPriority] Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
         * @param {string} [tenantIdIn] Only include job definitions which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeJobDefinitionsWithoutTenantId] Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobDefinitionsCount(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await JobDefinitionApiAxiosParamCreator(configuration).getJobDefinitionsCount(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types `String`, `Number` or `Boolean`.
         * @summary Get Job Definitions (POST)
         * @param {JobDefinitionQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryJobDefinitions(body?: JobDefinitionQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<JobDefinitionDto>>>> {
            const localVarAxiosArgs = await JobDefinitionApiAxiosParamCreator(configuration).queryJobDefinitions(body, firstResult, maxResults, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
         * @summary Get Job Definition Count (POST)
         * @param {JobDefinitionQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryJobDefinitionsCount(body?: JobDefinitionQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountResultDto>>> {
            const localVarAxiosArgs = await JobDefinitionApiAxiosParamCreator(configuration).queryJobDefinitionsCount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions' existing jobs are updated accordingly. The priority can be reset by setting it to `null`, meaning that a new job's priority will not be determined based on its definition's priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
         * @summary Set Job Definition Priority by Id
         * @param {string} id The id of the job definition to be updated.
         * @param {JobDefinitionPriorityDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setJobPriorityJobDefinition(id: string, body?: JobDefinitionPriorityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await JobDefinitionApiAxiosParamCreator(configuration).setJobPriorityJobDefinition(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets the number of retries of all **failed** jobs associated with the given job definition id.
         * @summary Set Job Retries By Job Definition Id
         * @param {string} id The id of the job definition to be updated.
         * @param {RetriesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setJobRetriesJobDefinition(id: string, body?: RetriesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await JobDefinitionApiAxiosParamCreator(configuration).setJobRetriesJobDefinition(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Activates or suspends a given job definition by id.
         * @summary Activate/Suspend Job Definition By Id
         * @param {string} id The id of the job definition to activate or suspend.
         * @param {JobDefinitionSuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionStateJobDefinition(id: string, body?: JobDefinitionSuspensionStateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await JobDefinitionApiAxiosParamCreator(configuration).updateSuspensionStateJobDefinition(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Activates or suspends job definitions with the given process definition id or process definition key.
         * @summary Activate/Suspend Job Definitions
         * @param {JobDefinitionsSuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionStateJobDefinitions(body?: JobDefinitionsSuspensionStateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await JobDefinitionApiAxiosParamCreator(configuration).updateSuspensionStateJobDefinitions(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * JobDefinitionApi - factory interface
 * @export
 */
export const JobDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.
         * @summary Get Job Definition
         * @param {string} id The id of the job definition to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobDefinition(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<JobDefinitionDto>> {
            return JobDefinitionApiFp(configuration).getJobDefinition(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
         * @summary Get Job Definitions
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [activityIdIn] Only include job definitions which belong to one of the passed and comma-separated activity ids.
         * @param {string} [processDefinitionId] Only include job definitions which exist for the given process definition id.
         * @param {string} [processDefinitionKey] Only include job definitions which exist for the given process definition key.
         * @param {string} [jobType] Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
         * @param {string} [jobConfiguration] Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
         * @param {boolean} [active] Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withOverridingJobPriority] Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
         * @param {string} [tenantIdIn] Only include job definitions which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeJobDefinitionsWithoutTenantId] Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
         * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobDefinitions(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<JobDefinitionDto>>> {
            return JobDefinitionApiFp(configuration).getJobDefinitions(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method.
         * @summary Get Job Definition Count
         * @param {string} [jobDefinitionId] Filter by job definition id.
         * @param {string} [activityIdIn] Only include job definitions which belong to one of the passed and comma-separated activity ids.
         * @param {string} [processDefinitionId] Only include job definitions which exist for the given process definition id.
         * @param {string} [processDefinitionKey] Only include job definitions which exist for the given process definition key.
         * @param {string} [jobType] Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
         * @param {string} [jobConfiguration] Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
         * @param {boolean} [active] Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [suspended] Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [withOverridingJobPriority] Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
         * @param {string} [tenantIdIn] Only include job definitions which belong to one of the passed and comma-separated tenant ids.
         * @param {boolean} [withoutTenantId] Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {boolean} [includeJobDefinitionsWithoutTenantId] Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobDefinitionsCount(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return JobDefinitionApiFp(configuration).getJobDefinitionsCount(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types `String`, `Number` or `Boolean`.
         * @summary Get Job Definitions (POST)
         * @param {JobDefinitionQueryDto} [body] 
         * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
         * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryJobDefinitions(body?: JobDefinitionQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<JobDefinitionDto>>> {
            return JobDefinitionApiFp(configuration).queryJobDefinitions(body, firstResult, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
         * @summary Get Job Definition Count (POST)
         * @param {JobDefinitionQueryDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryJobDefinitionsCount(body?: JobDefinitionQueryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<CountResultDto>> {
            return JobDefinitionApiFp(configuration).queryJobDefinitionsCount(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions' existing jobs are updated accordingly. The priority can be reset by setting it to `null`, meaning that a new job's priority will not be determined based on its definition's priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
         * @summary Set Job Definition Priority by Id
         * @param {string} id The id of the job definition to be updated.
         * @param {JobDefinitionPriorityDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setJobPriorityJobDefinition(id: string, body?: JobDefinitionPriorityDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return JobDefinitionApiFp(configuration).setJobPriorityJobDefinition(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the number of retries of all **failed** jobs associated with the given job definition id.
         * @summary Set Job Retries By Job Definition Id
         * @param {string} id The id of the job definition to be updated.
         * @param {RetriesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setJobRetriesJobDefinition(id: string, body?: RetriesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return JobDefinitionApiFp(configuration).setJobRetriesJobDefinition(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates or suspends a given job definition by id.
         * @summary Activate/Suspend Job Definition By Id
         * @param {string} id The id of the job definition to activate or suspend.
         * @param {JobDefinitionSuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionStateJobDefinition(id: string, body?: JobDefinitionSuspensionStateDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return JobDefinitionApiFp(configuration).updateSuspensionStateJobDefinition(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates or suspends job definitions with the given process definition id or process definition key.
         * @summary Activate/Suspend Job Definitions
         * @param {JobDefinitionsSuspensionStateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuspensionStateJobDefinitions(body?: JobDefinitionsSuspensionStateDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return JobDefinitionApiFp(configuration).updateSuspensionStateJobDefinitions(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobDefinitionApi - object-oriented interface
 * @export
 * @class JobDefinitionApi
 * @extends {BaseAPI}
 */
export class JobDefinitionApi extends BaseAPI {
    /**
     * Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.
     * @summary Get Job Definition
     * @param {string} id The id of the job definition to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobDefinitionApi
     */
    public async getJobDefinition(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<JobDefinitionDto>> {
        return JobDefinitionApiFp(this.configuration).getJobDefinition(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
     * @summary Get Job Definitions
     * @param {string} [jobDefinitionId] Filter by job definition id.
     * @param {string} [activityIdIn] Only include job definitions which belong to one of the passed and comma-separated activity ids.
     * @param {string} [processDefinitionId] Only include job definitions which exist for the given process definition id.
     * @param {string} [processDefinitionKey] Only include job definitions which exist for the given process definition key.
     * @param {string} [jobType] Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
     * @param {string} [jobConfiguration] Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
     * @param {boolean} [active] Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [suspended] Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [withOverridingJobPriority] Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
     * @param {string} [tenantIdIn] Only include job definitions which belong to one of the passed and comma-separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeJobDefinitionsWithoutTenantId] Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {string} [sortBy] Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {string} [sortOrder] Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobDefinitionApi
     */
    public async getJobDefinitions(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, sortBy?: string, sortOrder?: string, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<JobDefinitionDto>>> {
        return JobDefinitionApiFp(this.configuration).getJobDefinitions(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method.
     * @summary Get Job Definition Count
     * @param {string} [jobDefinitionId] Filter by job definition id.
     * @param {string} [activityIdIn] Only include job definitions which belong to one of the passed and comma-separated activity ids.
     * @param {string} [processDefinitionId] Only include job definitions which exist for the given process definition id.
     * @param {string} [processDefinitionKey] Only include job definitions which exist for the given process definition key.
     * @param {string} [jobType] Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
     * @param {string} [jobConfiguration] Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
     * @param {boolean} [active] Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [suspended] Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [withOverridingJobPriority] Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied.
     * @param {string} [tenantIdIn] Only include job definitions which belong to one of the passed and comma-separated tenant ids.
     * @param {boolean} [withoutTenantId] Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {boolean} [includeJobDefinitionsWithoutTenantId] Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobDefinitionApi
     */
    public async getJobDefinitionsCount(jobDefinitionId?: string, activityIdIn?: string, processDefinitionId?: string, processDefinitionKey?: string, jobType?: string, jobConfiguration?: string, active?: boolean, suspended?: boolean, withOverridingJobPriority?: boolean, tenantIdIn?: string, withoutTenantId?: boolean, includeJobDefinitionsWithoutTenantId?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return JobDefinitionApiFp(this.configuration).getJobDefinitionsCount(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types `String`, `Number` or `Boolean`.
     * @summary Get Job Definitions (POST)
     * @param {JobDefinitionQueryDto} [body] 
     * @param {number} [firstResult] Pagination of results. Specifies the index of the first result to return.
     * @param {number} [maxResults] Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobDefinitionApi
     */
    public async queryJobDefinitions(body?: JobDefinitionQueryDto, firstResult?: number, maxResults?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<JobDefinitionDto>>> {
        return JobDefinitionApiFp(this.configuration).queryJobDefinitions(body, firstResult, maxResults, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
     * @summary Get Job Definition Count (POST)
     * @param {JobDefinitionQueryDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobDefinitionApi
     */
    public async queryJobDefinitionsCount(body?: JobDefinitionQueryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<CountResultDto>> {
        return JobDefinitionApiFp(this.configuration).queryJobDefinitionsCount(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions' existing jobs are updated accordingly. The priority can be reset by setting it to `null`, meaning that a new job's priority will not be determined based on its definition's priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
     * @summary Set Job Definition Priority by Id
     * @param {string} id The id of the job definition to be updated.
     * @param {JobDefinitionPriorityDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobDefinitionApi
     */
    public async setJobPriorityJobDefinition(id: string, body?: JobDefinitionPriorityDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return JobDefinitionApiFp(this.configuration).setJobPriorityJobDefinition(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets the number of retries of all **failed** jobs associated with the given job definition id.
     * @summary Set Job Retries By Job Definition Id
     * @param {string} id The id of the job definition to be updated.
     * @param {RetriesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobDefinitionApi
     */
    public async setJobRetriesJobDefinition(id: string, body?: RetriesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return JobDefinitionApiFp(this.configuration).setJobRetriesJobDefinition(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activates or suspends a given job definition by id.
     * @summary Activate/Suspend Job Definition By Id
     * @param {string} id The id of the job definition to activate or suspend.
     * @param {JobDefinitionSuspensionStateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobDefinitionApi
     */
    public async updateSuspensionStateJobDefinition(id: string, body?: JobDefinitionSuspensionStateDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return JobDefinitionApiFp(this.configuration).updateSuspensionStateJobDefinition(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activates or suspends job definitions with the given process definition id or process definition key.
     * @summary Activate/Suspend Job Definitions
     * @param {JobDefinitionsSuspensionStateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobDefinitionApi
     */
    public async updateSuspensionStateJobDefinitions(body?: JobDefinitionsSuspensionStateDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return JobDefinitionApiFp(this.configuration).updateSuspensionStateJobDefinitions(body, options).then((request) => request(this.axios, this.basePath));
    }
}
